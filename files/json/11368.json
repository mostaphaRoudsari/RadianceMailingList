{"body": "\nGreg, Jack,\n\nThanks for your explanations, I think I've got it now!\n\nSo the RAM memory I can save via -PP is the one taken by the oct.\n\n(hope I haven't misunderstood it again!)\n\nThanks again! You are great!\n\nLucio Boscolo Mezzopan\nAssistant Designer? |? Lighting\n\nArup\n13 Fitzroy Street ?London W1T 4BQ? United Kingdom\nt +44 20 7636 1531? d +44 20 7755 6311\nf +44 20 7755 9012\nwww.arup.com\n\n-----Original Message-----\nSent: 10 January 2011 16:47\nTo: Radiance general discussion\nHi Jack,\n\nYour description of the behavior of rpict and rtrace with the -PP option is correct, and you essentially captured the reason behind the lack of memory sharing of ambient values.  Doing so would require locking and coordination of memory sharing across processes, which is implemented a little differently on different systems.  I chose to avoid the differences by taking advantage of the \"copy-on-write\" behavior of most Unix systems when fork() is called.\n\nWhen you use the -PP option, rpict (or rtrace) loads in the octree and all the associated, static data structures needed for rendering.  It also loads in any indirect irradiance values that have been previously computed and cached in the ambient file.  Once that is done, it calls fork() to make a copy of the process and waits for additional connections by other rpict/rtrace commands using the same -PP syncfile.  It's a bit awkward, but it works on all modern Unix systems, and requires no further communication among processes once started.\n\nThe newer -n option in rvu works similarly, but through a different mechanism.  Rather than making multiple copies of the same process that expects input from stdin to tell it what to do, it has a single parent process that communicates via pipes to all its children, which perform the actual ray tracing.  It still uses the copy-on-write trick, loading the scene and ambient data prior to forking the child processes, but the whole thing is hidden from the user.\n\nI subsequently implemented the -n option in rtrace as well, which is a bit confusing.  In most cases, it's a little more efficient to use rtrace -n than rtrace -PP, and you have to use one or the other.  The times you would still choose rtrace -PP are when you need to start the parallel processes at different times, or take the ray input from different sources.\n\nI don't expect to add a -n option to rpict in the forseeable future.  There are certain things about the way rpict samples the image plane that make such an option problematic, so we're kind of stuck with -PP for now.\n\nBest,\n-Greg\n\n\n_______________________________________________\nRadiance-general mailing list\nRadiance-general at radiance-online.org\nhttp://www.radiance-online.org/mailman/listinfo/radiance-general\n____________________________________________________________\nElectronic mail messages entering and leaving Arup  business\nsystems are scanned for acceptability of content and viruses\n\n\n\n", "replyTo": "Subject: [Radiance-general] Instances", "sender": "gregoryjward at gmail.com", "isquestion": false, "tags": [], "id": "<CC7B52EF0E443D45B11162FB554D97DF101ABD809F@EURXMBC02.global.arup.com>", "refs": ["<1773335.454131290542592530.JavaMail.defaultUser@defaultHost>", "<4CEC21B0.6060103@visarc.com>", "<CC7B52EF0E443D45B11162FB554D97DF06B915F81C@EURXMBC02.global.arup.com>", "<4CED0866.2080807@visarc.com>", "<CC7B52EF0E443D45B11162FB554D97DF06B935FE90@EURXMBC02.global.arup.com>", "<4D05F826.5060009@gmx.net>", "<CC7B52EF0E443D45B11162FB554D97DF06B947B2E3@EURXMBC02.global.arup.com>", "<C43A7C7D-072A-469E-A5BE-8BA6FAC32AF3@lmi.net>", "<CC7B52EF0E443D45B11162FB554D97DF101ABD7B72@EURXMBC02.global.arup.com>", "<A3159C8B-89E6-4D92-A0A6-36C73DB225A3@lmi.net>", "<CC7B52EF0E443D45B11162FB554D97DF101ABD7D4C@EURXMBC02.global.arup.com>", "<4D2B2972.20400@visarc.com>", "<B5D4DBFC-0741-4CD2-A3E4-26D66D84F928@lmi.net>"], "datetime": "Tue, 11 Jan 2011 18:46:48 +0000", "email": "Greg Ward", "subject": "Re: [Radiance-general] Instances"}