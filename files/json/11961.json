{"body": "\nThanks, Krystyna -- this is helpful.\n\nThere are a few ways you could do this.  The easiest might be to use pinterp to convert the view angles and average over rectangles, but the more accurate way if you really want a cone angle is with pcomb, like so:\n\nangle = 60\npcomb -e \"fang:$angle/180\" -e 'xc:xmax/2;yc:ymax/2' -e 'r2=((x-xc)*(x-xc)+(y-yc)*(y-yc))/(xc*yc)' \\\n-e 'lo=if(r2-fang*fang,0,WE/(PI*fang*xc*fang*yc)*li(1))' -o render.hdr \\\n| pvalue -h -H -pG -df | total -if\n\nThen repeat with angle=120.  This command only works for angular fisheye images with 180 degrees in each dimension and square pixels (-vta -vh 180 -vv 180 -pa 1) which is what you have.  (The -pa 1 option is defaulted.)\n\nThe reported result will be in averaged cd/m^2 (nits).  If you want radiance units (watts/m^2) instead, take off the WE constant (=179) and substitute 1.0 in the final -e option to pcomb.\n\nThe command works by setting all pixels outside the desired cone to 0, and scaling the rest by one over the number of pixels inside the target radius.  The picture is converted to IEEE floats by pvalue and summed up by the total utility.\n\nI did a quick test and it seems to work OK.\n\nBest,\n-Greg\n\n\n\n", "replyTo": "Subject: [Radiance-general] Cropping a .pic file", "sender": "Greg Ward", "isquestion": false, "tags": [], "id": "<49E3F43F-FC94-4FDD-A4E4-5757B64923EF@lmi.net>", "refs": ["<BANLkTikk9qn9sJ8x0P=jaVNNXqq3ja4EQg@mail.gmail.com>", "<BE307638-C36D-42EF-BE57-332A1742AA00@lmi.net>", "<BANLkTi=recYrupcZdCAN=z+CW2EQjKr3Hg@mail.gmail.com>"], "datetime": "Sun, 19 Jun 2011 22:17:24 -0700", "email": "gregoryjward at gmail.com", "subject": "[Radiance-general] Cropping a .pic file"}