{"refs": [], "id": "", "subject": "[Radiance-general] Hardware accelerated radianReferences: <200502261059.j1QAxoG3097920@server.cityscape3d.com>", "email": "cbauer- at t-online.de", "body": "<4222FF57.6030001@cityscape3d.com>\nMessage-ID: <422368B0.4060605@t-online.de>\n\nMichael Kruger wrote:\nHi Mike,\n\nthe oconv code is not much if counted in lines and statements, but it is\ndefinitly one of the complicated parts of Radiance. The memory issue\nis certainly connected to the amount of fine detail in the scene, as one\nalgrithm within oconv calls itself recursively again and again when\nstepping down the tree and subdividing the cube into octants and\nsuboctants etc. This results in oconv 'blowing' itself up considerably,\nusing far more memory for the process than the produced octree later has\nitself.\n\nThis means by subdividing the scene beforehand and then including the\nparts as instances you have far better chances to get a model 'oconved'.\n(If I remember it right Greg once said that by using instances and\nsubinstances etc the whole world could be converted to an octree with\nresolution down to some inches ...)\n\nAnother optimisation comes into play: if you have lots of similar\ninstances, they are only allocated once. A drawback of using instance is\nthat every ray has to undergo a transformation on entering, but for huge\nmodels this effect becomes negligible.\n\nAll in all this means of course some appropriate user intervention.\nComing up with an automatic solution which e.g triggers subdivision of\nthe scene automatically presumably will be not easy :-)\n\n-Cb\n\n\n\n\n\n", "isquestion": true, "replyTo": "", "tags": [], "sender": "Carsten Bauer", "datetime": "Mon Feb 28 18:41:32 2005"}