{"refs": [], "id": "<mailman.9.1120912008.370.radiance-general@radiance-online.org>", "subject": "[Radiance-general] dxfimport | toren.com", "email": "jelle.feringa at ezct.net", "body": "\nHi group,\n\n\n\nI'm happy to tell you Iebele Abel released a dxf to rad converter for Linux.\n\nWhat's good about the converter is that implies a way of organizing your\nradiance scene.\n\nThe workflow is based on the layers present in the .dxf file, the modifier\nin the generated .rad file will correspond to the name of the layer in the\n.dxf file. The point of this is that when you need to make different\nrenderings of a project in progress you use the layers for mapping the\nmaterials to the .rad geometry. When presented a modified model, just\noverwrite the existing .rad geometry using dxfimport, launch your\nrenderscript et voila, another render iteration on its way. When working for\nrapid changing projects this workflow is killer.\n\nSomething which is highly productive for this type of workflow is to have a\nstandardized radiance library where the layer number in your dxf file\ncorresponds to the material in your materials definitions. If this way of\nworking is familiar to you, & you happen to work on Linux, you should\ndefinitely take a look at Iebele's dxfimport converter !\n\n\n\nWhen looking for a converter with lots of options, look further, but\ndxfimport fits perfectly in a highly streamlined radiance workflow, based on\n.dxf input.\n\n\n\nIebele, perhaps you could elaborate on which entities dxfimport handles?\nWhich versions of .dxf are supported in dxfimport? What about unreasonable\nlarge models, do these work with dxfimport?\n\n\n\nCheers, Jelle.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: http://radiance-online.org/pipermail/radiance-general/attachments/20050709/d2913040/attachment.html\n", "isquestion": true, "replyTo": "", "tags": [], "sender": "Jelle Feringa / EZCT Architecture & Design Research", "datetime": "Sat Jul  9 14:26:48 2005"}