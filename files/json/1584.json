{"refs": ["<a932f51195d061d856d96814b21d928e@gmx.net>", "<A5662C01-B0B1-4B30-92C2-D098CA4D51F7@gmail.com>", "<4469a270441082ca2a06e1860a55bcb6@gmx.net>", "<BE949BCD-9EBF-4F7C-9D1F-906487F14017@gmail.com>", "<a21064ffac25d2264e0e62cade2f3820@gmx.net>"], "id": "<D50BE2C9-DF24-4F96-A535-F413648337A5@gmail.com>", "subject": "[Radiance-general] rvu: too many modifiers in ambient lis", "email": "gregoryjward at gmail.com", "body": "\nHi Lars,\n\nThat explains the problem.  Because each new inclusion of a material\ngets a new id, and this id needs to go into the ambient include/\nexclude list for that modifier name, you will quickly overflow your\nambient exclude set if you incorporate a copy of your materials for\nevery object.\n\nThis is bad practice in general because it means that most of your\nmemory is occupied with redundant material definitions rather than\ngeometry.  A better approach is to include any materials that need to\nundergo transformations as part of the geometric object file.  If you\njust have a map you wish to apply, possibly substituting the\nunderlying material, you can use an alias appropriately, e.g.:\n\n# The map for this material:\n\nvoid colorpict thisMap\n7 ...\n0\n0\n\n# origMat is the name of a predefined material in my main library,\nincluded once\n\nthisMap alias thisMat origMat\n\nthisMat {geometry ...}\n\n-----\nThis allows you to include the main material definitions only once,\nand control them in a central library.  You can even control the\nmaps, because they are named by the colorpict rather than defined\ndirectly in your geometry files.\n\nHope this helps.\n-Greg\n\n\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] rvu: too many modifiers in ambient list", "tags": [], "sender": "Greg Ward", "datetime": "Mon Jul 11 16:57:33 2005"}