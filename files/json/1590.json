{"refs": ["<20050711111305.21027.qmail@web32403.mail.mud.yahoo.com>"], "id": "<42D381E8.7070400@t-online.de>", "subject": "[Radiance-general] how to start it using participating media", "email": "cbauer- at t-online.de", "body": "\nhi Ida,\n\nin coarse words, a medium in a first step sucks in light (energy..) from\nthe field and partly absorbs that completely, partly reemits the light\nagain. And this is also the basic way how you specify such a medium in\nRadiance, you define an extinction value (three values, for the three\ncolor channels rgb) for the amount of light taken out and an 'albedo'\nvalue (also three for rgb) for the amount of light reabsorbed or\n'scattered'.\nThe extinction comes with a unit (1/distance), whereas the albedo is a\ndimensionless relation of scattered/absorbed energy and thus always lies\nbetween 0 and 1.\nso much for the quick and dirty version, follow the links posted by Lars\nto read the exact definitons..\n\nIn Radiance, medium properties are defined with the 'mist' material :\n\n( **note-  the following short demo follows freely  the one in the book\nRendering with Radiance by G Ward/R Shakespeare, p. 460ff **)\n\nvoid mist fogdemo\n0\n0\n6 0.07 0.07 0.07  0.5 0.5 0.5\n\nwould be a simple version with rgb extinction = 0.07 (in units 1/your\nworld unit), eg 1/m  and rgb albedo = 0.5\nNote that you have to set both, see above, because without extinction\nthere would be not light to scatter either.\n\nThe next point to consider is that the medium speciifc calculations\nusually take an awful lot of time, so one definitely should try to limit\nthem\na) to certain regions in space and\nb) to certain light sources, i.e consider light scattering only for the\nlight from few selected sources.\n\na) is achieved by setting up a boundary for the mist volume, means\ncreating some object made out of the mist material which encloses a volume\n\nb) is achieved by listing the chosen sources in the mist material\ndefinition.\n\nIf you have e.g a spotlight\nvoid spotlight spot\n0\n0\n7  1000 1000 1000 40  0 0 -1\n\nspot ring spot_light\n0\n0\n8  0 0 2  0 0 -1  0.08 0.0\n\nyou may list the spot_light object in the mist definition:\n\nvoid mist fogdemo\n1 spot_light\n0\n6 0.07 0.07 0.07  0.5 0.5 0.5\n\nnow the enclosing volume:\nthe spotlight is located at  0 0 2  (x, y, z), so you can set a cone\nwith cap for the surrounding mist volume as follows\nfogdemo ring fog_cap\n0\n0\n8  0 0 2.1  0 0 1  0.2  0.0\n\nfogdemo cone fog_cone\n0\n0\n8 0 0 2.1   0 0 0  0.2  2\n\n##note that the surface normals point outside, i.e away from the\nenclosed volume\nfinally add some demo objects\nvoid plastic grey\n0\n0\n5  0.5 0.5 0.5 0 0\n\ngrey polygon ground\n0\n0\n12 -2  -2   0\n2   -2   0\n2    2   0\n-2   2   0\n\ngrey sphere ball\n0\n0\n4  0 0 0.5 0.2\n\nBefore you oconv and and render the scene (preferrably chose a view\npoint outside the mist cone), one more step needs to be done, you have\nto tell Radiance at which distance it should sample the scattering\neffects, the parameter is -ms, for that 2x2x2 m scene -ms 0.1 or -ms\n0.05 is  a start, so append this to your render options.\n\nSo far, the treatment is the same whether you use Radiance classic or\nRadzilla.\n\nIn  Radzilla you have now the additional possibility to modify the\nscattering albedo with a pattern. **Note that this is  just for\ncreating  visual effects, for an exact  calculation  one rather would\nhave to modify the extinction value over the volume, but this is very\ndifficult to perform.**\n\nArbitrary patterns in Radiance or Radzilla can be created with help of\nso called 'noise functions' provided by the Radiance functional language.\nAs an example, create a file  fog_pat.cal and write the following lines\nin it:\n\ngr = abs(fnoise3(Px/A3, Py/A4, Pz/A5))+ A2 ;\nred = A1*gr*gr;\ngrn = A1*gr*gr;\nblu = A1*gr*gr;\n\nthen  add a 'mistfunc' definition to your scene file:\nvoid mistfunc fog_pat\n4 red grn blu fog_pat.cal\n0\n5  1 0.0  1.0 1.0 0.3\n\nmake this appear before your mist material definition and change the\nmist material to have now the fog_pat as modifier:\nfor_pat mist fogdemo\n1 spot_light\n0\n6 0.07 0.07 0.07  1 1 1\n\n** note that now the albedo values are set to 1, to provide a neutral\nbase, the final albedo will result out of a multiplication by this base\nvalue and the factor provided by the pattern function.**\n\nLast but most important step:\nplay around with the example, the fractal noise function 'fnoise(..)'\ncan be replaced by the normal 'noise(..)' for creating a smoother pattern,\nand of course the scaling and intensity parameters A1-A5 can be adjusted\nas you like, also the values in the mist material. Usually,  the more\nrealistic the pattern shall look, the more complicated the mathematical\nfunction has to be :-), so experiment with all sorts of weird\ncombinations...\n\nThis of course is just  a simple demo, you soon might run into other\ndifficulties in complicated scenes, i.e. how to set the enclosing mist\nvolume to avoid visible artifacts (think e.g of a normal point light\nsource instead of a spotlight like above, in this case the light output\nisn't restricted to certain directions so the cone approach doesn't work\nanymore. If all else fails, you also can set extinction and albedo\nglobally for the whole scene with the render parameters -me and -ma ..\n\nhope that this gets you started,\nand be prepared, the mist stuff is tricky... :-)\n\n-Carsten\n\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] how to start it using participating media", "tags": [], "sender": "Carsten Bauer", "datetime": "Tue Jul 12 02:12:34 2005"}