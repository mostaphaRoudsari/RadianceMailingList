{"refs": [], "id": "", "subject": "[Radiance-general] animationReferences: <3CD284B0.72EB180C@iebele.nl> <3CDACAE9.3E60F54B@pab-opto.de>", "email": "adiance-general@radiance-online.org", "body": "Message-ID: <3CD7A43B.F83F2FE9@iebele.nl>\n\n--------------74D1507D3B1A95F2484367A5\nContent-Type: text/plain; charset=us-ascii\nContent-Transfer-Encoding: 7bit\n\nThanks Greg and Peter for your replies,\n\nI tried your suggestions, while some already were taken into account. The\nresults are better, but not that good that my problem is solved (put it in\nother words: it does not fit my application yet). Also rendering times are\nvery long now.\nThat is why I like to ask you something that is in my mind for over a year.\n\nThe general purpose I use Radiance for is presentation and design of\narchitecture and public exterior lighting. There is no other rendering tool\nthat offers me the flexibility and kind of images that Radiance produces. What\nI also need from Radiance is the photometric correctness of the images, but I\nalways use the images in a sequence, comparing one image with the other, to\ndisccuss design issues. That means that the numerical representation of\nlighting is less important for me as the 'look'. This allows me to work on\nimages with image processing tools, this actually destroys some of the\nRadiance data, but makes the design better to communicate (for my purposes).\n\nBack to the animation-issue. It takes too much time to render animations for\nour application, because we use very large geometry, we use a lot of light\nsources,  we have to render several minutes, we only (?) have 4 cpu's\navailable on Linux and we have to produce very good looking images for our\ncustomers (they expect images like they have seen on tv/dvd : sharp sharper\nsharpest).\nTo survive the competition using Radiance (we are using Radiance daily, so we\nreally don't want to work with something else) we need another approach, and\nwe are willing to spent our time to get it work.\n\nTaken the above into account, I and my partner are thinking about an image\nformat like the radiance .pic, that is rendered without ambient bounces (-ab\n0). In this (or additional) image format we also like to have the following\ndata per pixel (ok, these images take lots of diskspace...):\n\n\n* name of the modifier for the object this pixel represent (as a string)\n* normal orientation of this object (float float float)\n* position of the pixel in XYZ space (float float float)\n\nWith this information per pixel (maybe I need more info in te future) we think\nwe can produce an automated proces in enhancing radiance pictures that are\nrendered without radiosity. This process is 2D image processing, using some 3d\ndata that is 'stored' with the pixel.\nAlso this kind of image data allows us to separate objects in one image, to\nprocess them individually in 2D.\n\nWe think we can speed up animation times using a combination of 3d and 2d (\nrendering my scene with -ab 0 takes about 9 minutes on 4 times PAL res.\nagainst 3 hours with a nice radiosity as you suggested.\nProbably far more to achieve the results we really want. 2d/3d image\nprocessing will take about 5 minutes or less per frame ).\n\nI already looked at rtrace, which seems to produce the kind of information I\nneed. Two problems arose when I looked at rtrace:\n\n1. I don't know where to start\n2. I think I prefer changing code in rpict (to use the -S option and -vf\noption )\n3. I think I prefer changing code in rpict.c (to have a all in one executable,\ninstead of using scripts)\n\nAs you understand, some hints are very much appreciated.\nI think about these kind of hints:\n-where in rpict.c are pixels stored into a file (or stdout)?\n-Is it possible at that point to write the mentioned data to stdout also?\n-What are the variables/pointers that hold these data?\n\nThe 2D processing of the resulting files will be my work (although I don't\nknow what kind of project I start here) and I like to share the results with\nthe 'community', when it finally works as we want.\n\nI hope my questions are not to difficult or time consuming to answer. I would\nbe really _happy_  to experiment with this. I think it will result in a really\nnice tool for video production environments (again, we will work on these\ntools, I only need a good starting point for them).\n\nOk, this starts to get a long email, I hope you believe with me that the above\nis worth trying, although it might have a very expiremental character in the\nbeginning.\n\n\nIebele\n\n\n\n\n\n--------------74D1507D3B1A95F2484367A5\nContent-Type: text/html; charset=us-ascii\nContent-Transfer-Encoding: 7bit\n\n<!doctype html public \"-//w3c//dtd html 4.0 transitional//en\">\n<html>\nThanks Greg and Peter for your replies,\n<p>I tried your suggestions, while some already were taken into account.\nThe results are better, but not that good that my problem is solved (put\nit in other words: it does not fit my application yet). Also rendering\ntimes are very long now.\n<br>That is why I like to ask you something that is in my mind for over\na year.\n<p>The general purpose I use Radiance for is presentation and design of\narchitecture and public exterior lighting. There is no other rendering\ntool that offers me the flexibility and kind of images that Radiance produces.\nWhat I also need from Radiance is the photometric correctness of the images,\nbut I always use the images in a sequence, comparing one image with the\nother, to disccuss design issues. That means that the numerical representation\nof lighting is less important for me as the 'look'. This allows me to work\non images with image processing tools, this actually destroys some of the&nbsp;\nRadiance data, but makes the design better to communicate (for my purposes).\n<p>Back to the animation-issue. It takes too much time to render animations\nfor our application, because we use very large geometry, we use a lot of\nlight sources,&nbsp; we have to render several minutes, we only (?) have\n4 cpu's available on Linux and we have to produce very good looking images\nfor our customers (they expect images like they have seen on tv/dvd : sharp\nsharper sharpest).\n<br>To survive the competition using Radiance (we are using Radiance daily,\nso we really don't want to work with something else) we need another approach,\nand we are willing to spent our time to get it work.\n<p>Taken the above into account, I and my partner are thinking about an\nimage format like the radiance .pic, that is rendered without ambient bounces\n(-ab 0). In this (or additional) image format we also like to have the\nfollowing data per pixel (ok, these images take lots of diskspace...):\n<br>&nbsp;\n<ul>\n<li>\nname of the modifier for the object this pixel represent (as a string)</li>\n\n<li>\nnormal orientation of this object (float float float)</li>\n\n<li>\nposition of the pixel in XYZ space (float float float)</li>\n</ul>\n\n<p><br>With this information per pixel (maybe I need more info in te future)\nwe think we can produce an automated proces in enhancing radiance pictures\nthat are rendered without radiosity. This process is 2D image processing,\nusing some 3d data that is 'stored' with the pixel.&nbsp;\n<br>Also this kind of image data allows us to separate objects in one image,\nto process them individually in 2D.\n<p>We think we can speed up animation times using a combination of 3d and\n2d ( rendering my scene with -ab 0 takes about 9 minutes on 4 times PAL\nres. against 3 hours with a nice radiosity as you suggested.\n<br>Probably far more to achieve the results we really want. 2d/3d image\nprocessing will take about 5 minutes or less per frame ).\n<p>I already looked at rtrace, which seems to produce the kind of information\nI need. Two problems arose when I looked at rtrace:\n<p>1. I don't know where to start\n<br>2. I think I prefer changing code in rpict (to use the -S option and\n-vf option )\n<br>3. I think I prefer changing code in rpict.c (to have a all in one\nexecutable, instead of using scripts)\n<p>As you understand, some hints are very much appreciated.\n<br>I think about these kind of hints:\n<br>-where in rpict.c are pixels stored into a file (or stdout)?\n<br>-Is it possible at that point to write the mentioned data to stdout\nalso?\n<br>-What are the variables/pointers that hold these data?\n<p>The 2D processing of the resulting files will be my work (although I\ndon't know what kind of project I start here) and I like to share the results\nwith the 'community', when it finally works as we want.\n<p>I hope my questions are not to difficult or time consuming to answer.\nI would be really _happy_&nbsp; to experiment with this. I think it will\nresult in a really nice tool for video production environments (again,\nwe will work on these tools, I only need a good starting point for them).\n<p>Ok, this starts to get a long email, I hope you believe with me that\nthe above is worth trying, although it might have a very expiremental character\nin the beginning.\n<br>&nbsp;\n<p>Iebele\n<br>&nbsp;\n<br>&nbsp;\n<br>&nbsp;\n<br>&nbsp;</html>\n\n--------------74D1507D3B1A95F2484367A5--\n\n\n", "isquestion": true, "replyTo": "", "tags": [], "sender": "atelier iebele abel", "datetime": "Tue, 07 May 2002 11:54:03 +0200"}