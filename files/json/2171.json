{"refs": ["<20b7f559db0e093ad73930afa5babe40@gmx.net>", "<43F7B4F9.2030104@visarc.com>"], "id": "<20857D59-57E3-4170-A2B2-B4824D1C7318@gmail.com>", "subject": "[Radiance-general] ranimate, recovering from broken rpicts?", "email": "gregoryjward at gmail.com", "body": "\nHi Lars,\n\nJack is correct.  Ranimate recovers frames using the following method:\n\n1) Checks \"STATUS\" file to see where it left off with filtered frames.\n2) Starts batch of filtering processes (in parallel according to your\nranimate input file).\n3) For each filtering process that fails (presumably due to\nunfinished rpict output), ranimate starts serial rpict recovery\nprocesses, one after the other, using local node so it can be sure of\nnew rpict exit status.\n4) If these rpict runs fail, or pfilt fails afterwards, ranimate\ngives it up as a bad job.\n\nIn your case, it might be better to manually start rpict -ro on each\nof the failed frames on separate nodes in your cluster, so the\nprocesses are not run in serial.\n\nUsing ranimate to break up the rendering of large images rather than\nrpiece is a clever idea I had not heard before.  Rpiece has the same\nproblem as ranimate with recovering aborted processes, forcing it to\ngo through and find the redo the pieces one by one in a serial fashion.\n\n-Greg\n\n\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] ranimate, recovering from broken rpicts?", "tags": [], "sender": "Greg Ward", "datetime": "Sun Feb 19 08:01:04 2006"}