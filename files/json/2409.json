{"body": "\nHi Zack,\n\nWe use multiple replmark calls on all kinds of object including lights\nand fixture geometry. Typically we define the fixture geometry and\ncompile it into an octree that can be instanced around. Any lights\n(illum/light/glow and associated distribution data) are managed\nindependantly althoughf generally using the same markers used to locate\nthe fixture geometry. In general, the thing to remember is that anything\nthat is a light (eg has the following material types applied: light,\nillum  and glow) must be compiled into the final top level scene octree.\n\nLet's try to back up and consider in a more generic manner what you are\ntrying to do: build a scene that has multiple instances of the campo\nfixture deployed. To do this, you could do the following (note there are\na few different ways and this is just what is coming out as I write):\n\nNote I will assume mats.lib that defines your materials.\n\nBUILD the LIGHT FIXTURE GEOMETRY (no lights, illums or glows) for 1\nCAMPO FIXTURE\n\ncamp_full_geometry.rad:\n\n!xform -m grey_090 scene/l_reflector.rad\n!xform -m stainless_steel scene/l_metal.rad\n\noconv mats.lib campo_full_geometry.rad > campo_full_geometry.oct\n\nBUILD the LIGHT SOURCES for 1 CAMPO FIXTURE\n\ncampo_light.rad\n\n!xform -m campo_glow scene/l_glow.rad\n!replmarks -x luminaire/hessamerica+++ca45-71r+++6500.rfl\nl_ies    scene/l_ies.rad\n\nBUILD the SCENE\n\ntest_room.rad\n\n!xform -m grey_090 scene/l_room.rad\n!replmarks -i campo_full_geometry.oct    l_test_oct\nscene/l_test_oct.rad     #gives you x instanced octrees of the\nfixture in the scene\n!replmarks -x campo_light.rad    l_test_oct\nscene/l_test_oct.rad                  #gives you x xformed light\nsource groupings in the scene\n\noconv mats.lib test_room.rad > test_room.oct\nrview -ab 1 -av 0 0 0 -vf myview.vf test_room.oct\n\nIt looks like the way you have things broken down should be fine, so it\nis not clear why it is not working the way you expect. My example\norganizes things a little differently and I think it should work.\n\nRegarding the large illum geometry for the ies data. I think that this\nshould not be a problem, but really depends on whether this is the\ngeometry that gets spit out by ies2rad or is it geometry that you have\nbuilt yourself. If it is the latter then you need to make sure that the\nbrightdata definition for the ies data includes the proper measure\n(METERS!) for the box geometry, and also that it uses boxcorr/lboxcorr.\n\nIt looks like you have a glow also. You may want to assign the glow a\nlocal radius (argument 4) to make sure that things inside the illum\ngeometry get some local lighting.\n\nHope this helps.\n\n-Jack\n\n\nZack Rogers wrote:\n\n\n--\n#\tJohn E. de Valpine\n#\tpresident\n#\n#\tvisarc incorporated\n#\thttp://www.visarc.com\n#\n#\tchanneling technology for superior design and construction\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: http://radiance-online.org/pipermail/radiance-general/attachments/20050623/6a34df91/attachment.htm\n", "replyTo": "Subject: [Radiance-general] RE: Luminaire octree", "sender": "Jack de Valpine", "isquestion": false, "tags": [], "id": "<42BB07CB.4020706@visarc.com>", "refs": ["<42BADDB8.6080104@archenergy.com> <42BAE81A.6030804@visarc.com>", "<42BAFC30.8050602@archenergy.com>"], "datetime": "Thu Jun 23 21:05:39 2005", "email": "jedev at visarc.com", "subject": "[Radiance-general] RE: Luminaire octree"}