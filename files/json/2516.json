{"body": "\nHi Carsten,\n\nMany thanks for your reply, I am happy to hear that at least the problem\nI am facing is something that is recognized.\nAlhough you clearly described why  the material I work on is hard (or\neven impossible) to model in Radiance, I continued searching for a solution.\n\nFirst let me list all the 'requirements' for the material of the floor:\n1. Distant objects seem to reflect more as nearby objects, in term of\nrenderings: the reflection changes as a funtion of the angle between ray\ndirection ad surface normal\n2. Some roughness/noise is visible at a distance, while nearby the\nsurface is just dull.\n3. The color changes somehow as a funtion of the distance to a bit more\nblue/less saturation\n4. Specular highlights are very soft and relative to the 'eye-position'\n\nI tried to put these requirements in a BRTDfunc. This is my first(!)\nBRTDfunc and my first .cal file I ever wrote from scratch, and I have\nsome questions about it.\n\n1.\nThe first question of all is how I could possibly find the ray-direction\nand value of incident light within  a  brtdf. Are there globally defined\nvariables for these (like Dx, Dy, Dz) ?\n\nOk, I clearly can't solve the specular highlight thing yet, so I forgot\nabout specular highlights for a moment and figured out the brtdf and\n.cal file like below, for the 'requirements' 1, 2 and 3.\n\n2.\nMy general question is: are there any smart remarks on this brtdf an cal\nfile, is there anything very stupid in this material that I should\nknow?  ( I am not a real math guru )\n\n3.\nThe last question is: can I change the line below in a more elegant way,\nlike the pow(base,exp) function in c: :\nrefl  =\n(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)\n;\n\n\n{\n\nreflection.cal\n\nadd reflection relative of angle between ray direction and\nsurface normal\narg10 red reflection value\narg11 green reflection value\narg12 blue reflection value\narg13 noise grain\narg14 noise value\n\n}\n\n{ RGB values for the reflection  }\nvalr  = arg(10);\nvalg  = arg(11);\nvalb  = arg(12);\nnoisegrain= arg(13);\nnoisevalue= arg(14);\n\n{ dot product of ray direction and normal }\nDdN = (-Dx*Nx)+(-Dy*Ny)+(-Dz*Nz);\n\n{ always return a positive value }\nmulti = if(DdN, DdN, -DdN) ;\n\n{ replace with a pow( base, exp ) alike function }\nrefl  =\n(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)\n;\n\n{  noise  }\nnoise =  1 - ( noisevalue * fnoise3(Px/noisegrain, Py/noisegrain, Pz,\nnoisegrain ) );\n\n{ add noise to reflection value }\nmult = refl + (refl*noise) ;\n\nreflr = CrP * mult * valr * noise ;\nreflg = CgP * mult * valg * noise ;\nreflb = CbP * mult * valb * noise ;\n\n\n\n{\n{ bfloor is the name of a pattern }\nusage:\nbfloor BRTDfunc LAYER114\n10\nreflr reflg reflb\n0 0 0\n0 0 0\nreflection.cal\n0\n12\n1 1 1\n1 1 1\n0 0 0\nR_REFLVALUE G_REFLRVALUE B_REFLVALUE\nNOISE_SIZE   NOISE_VALUE\n\n\n}\n\n\n\nCarsten Bauer wrote:\n\n\n", "replyTo": "Subject: [Radiance-general] Reflection vs specularity", "sender": "atelier iebele abel", "isquestion": false, "tags": [], "id": "<42E12170.40700@iebele.nl>", "refs": ["<CC0B19F4C6132F4D9FDDEBF194200FB5234C6E@ldcexc02.global.arup.com>\t<42DE83A4.7090608@iebele.nl>", "<42DF3EE8.8010106@t-online.de>"], "datetime": "Fri Jul 22 18:38:20 2005", "email": "atelier at iebele.nl", "subject": "[Radiance-general] Reflection vs specularity"}