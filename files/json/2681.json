{"refs": [], "id": "<MIEGJHPGNNLIEIOJNMMAKEKECEAA.cristiano@lightonweb.com>", "subject": "[Radiance-general] Carsten Bauer marble cal fil", "email": "cristiano at lightonweb.com", "body": "\n\nHello all\nTime ago I've downloaded from RadZilla Project web pages marvellous Radiance\nMaterials wrote by Cartsen Bauer\n(patterns and cal files).\nOnly now I've found the time to check and test them, and even if they are\nall incredibles,\nI think that marbles are...almost real.\nI'm trying to study them to find the way to manage them to have different\ncolors etc,\nand I post this 2 questions hope that someone could help me to understand:\n\n1- changing colors in marbles.\nI've understand that the main color of the \"dark brown marble\" (For\nexample) is managed  by\n\nvoid colorfunc marble2up\n4 red grn blu c-stone3tilxy.cal\n0\n42  0.5  0.16 0.05 0.03\n0.6   0.19 0.08 0.06\n0.65   0.15 0.085 0.045\n0.9   0.155 0.043 0.025\n0.165 0.09  0.05\n0.2 0.25 0.15\n0.2   4.2 7.3 11.6\n1.0 1.0 1.0\n0.11 0.46 4\n2 1.8 0.13\n-0.1 0.12 1\n90.0 0.5 0.5 0.25\n\nwhere the 42 parameters are the 42 ones of the c-stone3tilxy.cal file:\n\narg(1)  arg(2)  arg(3)  arg(4)     color at  0<  x <arg(1)\narg(5)  arg(6)  arg(7)  arg(8)     color at  arg(1)< x <arg(5)\narg(9)  arg(10) arg(11) arg(12)    color at  arg(5)< x <arg(9)\narg(13) arg(14) arg(15) arg(16)    color at  arg(9)< x <arg(13)\narg(17) arg(18) arg(19)    color at  arg(13)<x <1\narg(20)        turbulence\narg(21)        turb scale\narg(22)        unsharp borders\n\narg(23) arg(24) arg(25) arg(26)  crack color at arg(23)\narg(27) arg(28) arg(29)  crack color at border\n\narg(30)  crack left border  {( < arg(23) )}\narg(31)  crack right border {( > arg(23) )}\narg(32)  crack  period\n\narg(33)  crack  noise-func selector (1- perl. 2- fract. 3- rand.\n4-perl*rand)\narg(34)  crack  turb  intensity\narg(35)  crack scale\n\narg(36)  crack occurrence threshhold (-1 < arg(36) < 1)\narg(37)    \" scale\narg(38) -\n\narg(39)  tiling rot. angle (degrees)\narg(40)  tiling xstep\narg(41)  tiling ystep\narg(42)  tiling xoffset\n\nFirst 19 parmeters are related to the marble color.\nMy question is: is there a way to \"calculate/Define\" those 19 paremters\nfor the desired color?\nthey are not \"triple values\" (r g b), they are 4 values for each \"row\",\nand what means \"color at  arg(1)< x <arg(5)\"\n\n\n2- marble tiles.\nMarble tiles are defined with args 39-40-41-42 or also in the marble\nmat file?\nIs it possible to use the marble pattern without tiles?\n\nAny help is welcome\n\nCristiano\n\nHere the dark brown marble mat file and calc files.\n\n################################################################\n#################  dark brown marble, white cracks #############\n################################################################\n\n#\n#  x y plane, tiles x 0.5 y 0.5 (args 40 & 41)\n#\n\nvoid colorfunc marble2up\n4 red grn blu c-stone3tilxy.cal\n0\n42  0.5  0.16 0.05 0.03\n0.6   0.19 0.08 0.06\n0.65   0.15 0.085 0.045\n0.9   0.155 0.043 0.025\n0.165 0.09  0.05\n0.2 0.25 0.15\n0.2   4.2 7.3 11.6\n1.0 1.0 1.0\n0.11 0.46 4\n2 1.8 0.13\n-0.1 0.12 1\n90.0 0.5 0.5 0.25\n\n\nvoid plastic marble2base\n0\n0\n5  0.17 0.065 0.04 0 0.03\n\nvoid colorfunc grouts2\n4 red grn blu c-1c.cal\n0\n3 0.51 0.505 0.5\n\n\nvoid texfunc fugen\n6 xpert ypert zpert t-brickptxz.cal -rx -90\n0\n14 0.5 0.5 0.25 1\n0.01 0.01 1\n0.28 0.15 0.32\n1 0 1 1\n\n\nfugen mixfunc marble2tex\n6 marble2up grouts2 fore m-brickptxz.cal -rx -90\n0\n14  0.5 0.5  0.25\n1 0.006 0.006 1\n0.002 0.002 1\n1 0.0 20 20\n\nmarble2tex plastic marble2\n1 marble2base\n0\n5  1  1  1  0.3  0.03\n\n################################################################\n\n\n################################################################\n#################  c-stone3tilxy.cal #############\n################################################################\n\n{ (c)-20.08.2002-C.Bauer(Berlin)\n\nc-stone3tilxy.cal\n\n5 color fractal noise (softened) crack x tiling xy\n\noutput: red, grn, blu (names to list as colorfunc string args)\n\n\n42 parameters:\n\narg(1)  arg(2)  arg(3)  arg(4)     color at  0<  x <arg(1)\narg(5)  arg(6)  arg(7)  arg(8)     color at  arg(1)< x <arg(5)\narg(9)  arg(10) arg(11) arg(12)    color at  arg(5)< x <arg(9)\narg(13) arg(14) arg(15) arg(16)    color at  arg(9)< x <arg(13)\narg(17) arg(18) arg(19)    color at  arg(13)<x <1\narg(20)        turbulence\narg(21)        turb scale\narg(22)        unsharp borders\n\narg(23) arg(24) arg(25) arg(26)  crack color at arg(23)\narg(27) arg(28) arg(29)  crack color at border\n\narg(30)  crack left border  {( < arg(23) )}\narg(31)  crack right border {( > arg(23) )}\narg(32)  crack  period\n\narg(33)  crack  noise-func selector (1- perl. 2- fract. 3- rand.\n4-perl*rand)\narg(34)  crack  turb  intensity\narg(35)  crack scale\n\narg(36)  crack occurrence threshhold (-1 < arg(36) < 1)\narg(37)    \" scale\narg(38) -\n\narg(39)  tiling rot. angle (degrees)\narg(40)  tiling xstep\narg(41)  tiling ystep\narg(42)  tiling xoffset\n\n}\n\nshifty = floor(Py/arg(41));\nshiftx = floor((Px-shifty*arg(42))/arg(40));\n\nrotang = DEGREE*arg(39)*(shiftx+shifty);\n\nPPx = Px*cos(rotang) + Py*sin(rotang);\nPPy = Py*cos(rotang) - Px*sin(rotang);\nPPz = Pz;\n\ndist = arg(20)*fnoise3(PPx,PPy,PPz);\n\nxev = (PPx + dist)/arg(21);\nyev = (PPy + dist)/arg(21);\nzev = (PPz + dist)/arg(21);\n\nselector = if(arg(22), 0.5*(1-fnoise3(xev,\nyev,zev))+arg(22)*(0.5-rand((PPx+PPy+PPz)/3)),\n0.5*(1-fnoise3(xev, yev, zev)));\n\ndelfa13 = selector-arg(13);\ndelfa9  = selector-arg(9);\ndelfa5  = selector-arg(5);\ndelfa1  = selector-arg(1);\n\nfnorm = if(delfa13, delfa13/(1-arg(13)), if(delfa9, delfa9/(arg(13)-arg(9)),\nif(delfa5, delfa5/(arg(9)-arg(5)), if(delfa1, delfa1/(arg(5)-arg(1)),\nselector/arg(1)))));\n\n\nbasenoise = select(floor(arg(33)), arg(34)*noise3(PPx,PPy,PPz),\narg(34)*fnoise3(PPx,PPy,PPz),\n\narg(34)*rand((PPx+PPy+PPz)/3),arg(34)*(noise3(PPx,PPy,PPz)*rand((PPx+PPy+PPz\n)/3)));\n\nxfilt = (PPx+basenoise)/arg(35);\n\nfildec = mod(floor(xfilt), arg(32));\n\nfdl = frac(xfilt);\n\nfilfa = if(fildec, 0, if(fdl-arg(31), 0 , if(fdl-arg(30), if(fdl-arg(23),\n1 - (fdl-arg(23))/(arg(31)-arg(23)),\n1-\n(arg(23)-fdl)/(arg(23)-arg(30))), 0)));\nfilfa2 = if(noise3(PPx/arg(37),PPy/arg(37),PPz/arg(37))-arg(36), filfa, 0);\n\nfred = arg(27) + filfa2*(arg(24)-arg(27));\nfgrn = arg(28) + filfa2*(arg(25)-arg(28));\nfblu = arg(29) + filfa2*(arg(26)-arg(29));\n\n\nRl = if(delfa13, arg(14), if(delfa9, arg(10), if(delfa5, arg(6), if(delfa1,\narg(2), arg(17)))));\nGl = if(delfa13, arg(15), if(delfa9, arg(11), if(delfa5, arg(7), if(delfa1,\narg(3), arg(18)))));\nBl = if(delfa13, arg(16), if(delfa9, arg(12), if(delfa5, arg(8), if(delfa1,\narg(4), arg(19)))));\n\nRu = if(delfa13, arg(17), if(delfa9, arg(14), if(delfa5, arg(10), if(delfa1,\narg(6), arg(2)))));\nGu = if(delfa13, arg(18), if(delfa9, arg(15), if(delfa5, arg(11), if(delfa1,\narg(7), arg(3)))));\nBu = if(delfa13, arg(19), if(delfa9, arg(16), if(delfa5, arg(12), if(delfa1,\narg(8), arg(4)))));\n\n\nred = (Rl+(Ru-Rl)*fnorm)*fred;\ngrn = (Gl+(Gu-Gl)*fnorm)*fgrn;\nblu = (Bl+(Bu-Bl)*fnorm)*fblu;\n################################################################\n\n################################################################\n#################  c-1c.cal #############\n################################################################\n\n{ (c)-20.08.2002-C.Bauer(Berlin)\n\nc-1c.cal\n\n1 color cal file (workaround for mixing)\n\noutput red, grn, blu\n\narg(1) = red color val\narg(2) = green  \"\narg(3) = blue   \"\n}\n\nred = arg(1);\ngrn = arg(2);\nblu = arg(3);\n\n################################################################\n\n\n################################################################\n#################  t-brickptxz.cal #############\n################################################################\n{ (c)-20.08.2002-C.Bauer(Berlin)\n\nt-brickptxz.cal\n\nbrick normal-pattern xz-plane, x-offset\n\noutput: xpert, ypert, zpert (texfunc-string args)\n\n14 parameters\n\narg(1)   zstep\narg(2)   xstep\narg(3)   xoffset\narg(4)   -\narg(5)   grout size z\narg(6)   grout size x\narg(7)   -\narg(8)   grout effect ampl.\narg(9)   -\narg(10)  -\narg(11)  noise-func selector (1 - perlin, 2 - fractal)\narg(12)  turb. amplitude\narg(13)  turb. scale x\narg(14)  turb. scale z\n}\nPPz = Pz +  arg(12)*select(arg(11),\nnoise3(Px/arg(13),Py/arg(13),Pz/arg(14)), fnoise3(Px/arg(13), Py/arg(13),\nPz/arg(14)));\n\nPPx = Px +  arg(12)*select(arg(11),\nnoise3(Px/arg(13),Py/arg(13),Pz/arg(14)), fnoise3(Px/arg(13), Py/arg(13),\nPz/arg(14)));\n\npr = PPz/arg(1);\n\nevpt = frac(pr)*arg(1);               {eval points}\n\nstp = floor(pr);\nevx = arg(2)*frac((PPx-stp*arg(3))/arg(2));\ndelmfal = evx-arg(3);\ndelmfau = evx-(arg(3)+arg(6));\ndelmf6 = if(delmfal, if(delmfau,0,1),0);\ndelfa5 = evpt-arg(5);\ndelfa5h = evpt-(arg(5)/2);\ndelfa6  = evx-arg(6);\ndelfa6h = evx - (arg(6)/2);\nxpert = if(delfa5,if(delfa6,0,if(delfa6h, -arg(8), arg(8))),0);\nypert = 0;\nzpert =  if(delfa5, 0 , if(delfa5h, if(delfa6,-arg(8),0), if(delmf6, 0,\narg(8))));\n\n################################################################\n\n\n################################################################\n#################  t-brickptxz.cal #############\n################################################################\n{ (c)-20.08.2002-C.Bauer(Berlin)\n\nm-brickptxz.cal\n\nbrick mix pattern, foreground = brick-material, background = grout\nmaterial\noutput: fore\n\n14 parameters\n\narg(1)   zstep\narg(2)   xstep\narg(3)   xoffset\narg(4)   -\narg(5)   grout size z\narg(6)   grout size x\narg(7)   -\narg(8)   z-trans\narg(9)   x-trans\narg(10)  -\narg(11)  noise-func selector (1 - perlin, 2 - fractal)\narg(12)  turb. amplitude\narg(13)  turb. scale x\narg(14)  turb. scale z\n\n}\n\nPtx = Px-arg(8);\nPtz = Pz-arg(9);\n\nPPz = Ptz +  arg(12)*select(arg(11),\nnoise3(Ptx/arg(13),Py/arg(13),Ptz/arg(14)), fnoise3(Ptx/arg(13), Py/arg(13),\nPtz/arg(14)));\nPPx = Ptx +  arg(12)*select(arg(11),\nnoise3(Ptx/arg(13),Py/arg(13),Ptz/arg(14)), fnoise3(Ptx/arg(13), Py/arg(13),\nPtz/arg(14)));\n\npr = PPz/arg(1);\nevpt = frac(pr)*arg(1);               {eval points}\nstp = floor(pr);\n\nevx = arg(2)*frac((PPx-stp*arg(3))/arg(2));\n\ndelfa5 = evpt-arg(5);\n\ndelfa6  = evx-arg(6);\n\nfore = if(delfa5, if(delfa6, 1,0),0);\n\n################################################################\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: http://radiance-online.org/pipermail/radiance-general/attachments/20060901/5fea5136/attachment-0001.html\n", "isquestion": true, "replyTo": "", "tags": [], "sender": "Dr. Cristiano Guarnaschelli", "datetime": "Fri Sep  1 01:13:40 2006"}