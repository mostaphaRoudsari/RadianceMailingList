{"body": "\n\nOn 20.02.2006, at 10:39, Francesco Anselmo wrote:\n\n\nThanks for the hint. I mad a few tests with different images\nand found that the exported UV coords are always in the range\n(0,1) for _both_ dimensions. I think this is the common range\nfor UVs in all CG applications except Radiance. Here we have\ncoords range (0,1) for the smaller dimension and (0,l/s) for\nthe larger, so above 1 for all non-square images.\n\nAs a result the texture image area is croped to the lower left\nsquare of the image. Your code multiplies the coords for the\nlarger side with the image aspect (>1!) to cover the whole\nimage in Radiance texture space. I'll have to go that way, too,\n(no big thing for a dedicated Radiance exporter) but I wish\nthere was a way to define the texture with the right image aspect\nso any uv enabled *.obj file could be mapped correctly without\nrewriting the coords.\n\n\nJust checked the meaning of 'frac()' and I think Lu/Lv is in\nfact the better choice for uv coord mapping than frac(Lu/Lv).\nThe vertices do not have to cover the whole image after all.\n\n\nYes. Another step closer to Blender world domination.\n\nThomas\n\n", "replyTo": "Subject: [Radiance-general] obj2mesh, UV coordinates and image aspect", "sender": "Thomas Bleicher", "isquestion": false, "tags": [], "id": "<A22E9EEA-7920-44A8-836D-0DFCE7225045@arcor.de>", "refs": ["<2C0020B9EB71CE4281B292F0E16A6DDE7FC869@ldcexc02.global.arup.com>"], "datetime": "Mon Feb 20 13:23:26 2006", "email": "tbleicher at arcor.de", "subject": "[Radiance-general] obj2mesh, UV coordinates and image aspect"}