{"refs": ["<d5d7d3120807261524n5522585dp218c832d7078ec67@mail.gmail.com>\t<756BE29B-A4B1-4BA5-91DF-990D0184E698@lmi.net>\t<9C75DB7C51A54E9DAC5A99A13B174083@PC4Core>", "<29549F7B-CA89-4677-9D3A-CD22C652DAE3@lmi.net>", "<488D8421.7030406@gmx.net>"], "id": "<5464A32D-02AB-49C1-892C-44610E89346C@lmi.net>", "subject": "[Radiance-general] Slow rendering with transparant textures", "email": "gregoryjward at gmail.com", "body": "\nHi Lars,\n\nAlthough it helps up to a point to reduce the complexity of the .cal\nexpressions, it's more important to minimize the total number of such\nmodifiers in your rendering, since it's the overhead of the call\nitself that's most significant.  For example, adding a functional\npattern to another functional pattern that uses a functional texture\nand surface normal interpolation and a mapped picture with its own\n(admittedly unavoidable) coordinate transformation, that's going to\nbe a lot slower than combining all the patterns into a single\nprecomputed image and having just one functional texture.\n\nSince Iebele had many mixfunc calls, most of which rendered\ntransparent, this cost quite a bit in overhead.  In many cases it's\nunavoidable, but bear in mind that any calculations using the\nfunction files, while wonderfully programmable, cost quite a bit in\noverhead (i.e., a few times the cost of a ray intersection) plus 2x\nor more longer than the equivalent compiled math calls.\n\nDoes this make sense?\n\n-Greg\n\n\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] Slow rendering with transparant textures", "tags": [], "sender": "Greg Ward", "datetime": "Tue Jul 29 14:56:01 2008"}