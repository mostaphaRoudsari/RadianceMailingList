{"refs": [], "id": "", "subject": "[Radiance-general] New rtrace -n option", "email": "Robert.Guglielmetti at nrel.gov", "body": "Message-ID: <C74D5D85.1894%robert.guglielmetti@nrel.gov>\n\nOn 12/15/09 1:56 PM, \"Robert Guglielmetti\" <robert.guglielmetti@nrel.gov>\nwrote:\n\n\nIn what should come as no surprise to anyone on this list, this was a user\nerror situation. Sorry.\n\n$ ls -l /usr/local/bin/rtrace\n$ -rwxr-xr-x  1 root  wheel  397736 Dec 15 13:09 /usr/local/bin/rtrace\n$ which rtrace\n$ /usr/local/bin/RAY/rtrace (you idiot)\n\nOK, so that's sorted. But in testing out the -n option, I do notice a\nstrange behavior. If you have a bogus material definition in your scene\nfiles -- even if it is not referenced in the octree -- using rtrace with the\n-n option will throw a fatal error about the material definition and quit.\nAgain, this is not a material that is actually used in the octree, no ray\nwould ever need to evaluate the definition; it's an unassigned material that\nhappens to reference a .cal file that's not on my system. But I compiled an\noctree and I ran rpict twice on the same octree. Once without the -n, and\nthat ran fine. Then I ran the same exact command adding \"-n 10\" and I got\nthis error:\n\nrtrace: fatal - cannot find function file \"glaz.cal\"\n\nI went back and deleted the bogus material from my material file completely,\nrecompiled, and now rtrace -n works. Not sure what's going on there.\n\nThank you for this addition, Greg! It's nice to feed rtrace one grid and\nwatch top automatically fill up with all these rtrace processes!\n\n- Rob G.\n\n\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] New rtrace -n opti", "tags": [], "sender": "Guglielmetti, Robert", "datetime": "Tue Dec 15 14:36:43 2009"}