{"refs": [], "id": "<715312c108d6af125ff10df12de723e0.squirrel@calmail.berkeley.edu>", "subject": "[Radiance-general] vignetting correction on a fish-eye imag", "email": "kkonis at berkeley.edu", "body": "\nDear list,\n\nI am trying to implement a vignetting correction on a fish-eye image\ntaken with a rather inexpensive lens (Opteka 0.20 for Canon A570).\n\nThis is for a Post Occupancy Evaluation of an open plan workspace\nusing HDR at a number of workstations (n = ~15), paired with subjective\nmeasures. (Thus the inexpensive camera + lens).\n\nI am using Mehlika Inanici and Jim Galvin's method to derive a\npolynomial from experimentation\nto characterize the vignetting effect of my camera+lens at a given f-stop.\n\n(EVALUATION OF HIGH DYNAMIC RANGE PHOTOGRAPHY\nAS A LUMINANCE MAPPING TECHNIQUE, 2004)\n\n\"The vignetting effect is calculated as a polynomial function as\nfollows (x corresponds the pixel location):\"\ny = -1.28E -12 * x 4 + 3.43E - 09 * x3 - 3.38E - 06 * x2 +1.45E - 03 *\nx + 7.70E - 01\n\nAssuming the function that i derive is similar to the one above:\n\n***I am curious how to develop a Radiance-based post-process from\nthis polynomial function to arrive at a script that will take a HDR\nimage and apply a vignette correction.\n\n\nBelow is Greg's implementation, but i am confused as to where to\napply/insert the polynomial function. (Or if an entirely different method is\nbeing used here, since to me this is pretty cryptic).\n\n#####################################################\n# From NY Times acquisition cart (Sigma lens)\n\npcomb -e 'sq(x):x*x' -e \\\n'SigmaVig5_6(deg) : 0.97 + (0.5 + atan(0.1*deg - 4)/PI)*(0.38 -\n0.0134*deg)' \\\n-e 'xne = x/xmax - .5; yne = y/ymax - .5' \\\n-e \"deg_cent = 90*sqrt(sq(2/$vfrac*xne) + sq(2/$vfrac*yne))\" \\\n-e 'corr = if(deg_cent-95, 0, 1.0/SigmaVig5_6(deg_cent))' \\\n-e 'ro=corr*ri(1);go=corr*gi(1);bo=corr*bi(1)' \\\n-o $hdrf \\\n| pcompos -x $new_res[1] -y $new_res[2] \\=00 - \\\n`ev \"floor($new_res[1]/2)\" \"floor($new_res[2]/2)\"` \\\n\n\n#####################################################\n\nI would appreciate any guidance that anyone may have!\n\nOne suggestion that I have received is to create a \"filter\" image with\nthe same resolution as my uncorrected image. The filter image will have\nnumbers 1 in the middle (meaning no vignetting) and the numbers drop\ntowards the periphery as measured and recorded.\n\nThen I would use pcomb to divide the original image with the \"filter\"\nto correct for the light loss.\n\nAny suggestions (sample code!) to create this filter image in Radiance\nfrom the above polynomial\nfunction would also be appreciated!\n\nbest,\n\nKyle Konis\nPh.D Student\nUC Berkeley\n\n\n", "isquestion": true, "replyTo": "", "tags": [], "sender": "kkonis@berkeley.edu", "datetime": "Mon Apr  5 18:24:28 2010"}