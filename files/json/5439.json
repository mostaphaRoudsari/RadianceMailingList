{"refs": ["<p2p3ccbd68d1004281131hcd6a5dfftfb839edbe988f8a5@mail.gmail.com>", "<4BD87F88.8010604@visarc.com>", "<w2l3ccbd68d1004281150q2ca5d05dn17206cdf22d97a1b@mail.gmail.com>", "<4BD884D0.8000100@visarc.com>", "<g2g3ccbd68d1004281304n81879f21p87bb63ff78c87074@mail.gmail.com>", "<000f01cae872$e3f991a0$abecb4e0$@com>", "<000601cae874$77155ea0$65401be0$@com>", "<m2m3ccbd68d1004301849x668ef078s98ec1407d667601d@mail.gmail.com>"], "id": "<s2u89355c0f1005010057j58112907la572e6b8f39f2f36@mail.gmail.com>", "subject": "[Radiance-general] import from other softwar", "email": "tbleicher at googlemail.com", "body": "\nJia.\n\nI don't have any experience with a Revit based process. Below are just\na few general remarks to obj2rad (and CAD import in general).\n\nOn Sat, May 1, 2010 at 2:49 AM, Jia Hu <hujia06@gmail.com> wrote:\n\n\nThat is not necessarily a bad thing. The RGB values would almost\ncertainly be based on screen RGB values which have to be converted for\nRadiance. It's better to define a set of materials for Radiance and\nassign colors/materials with the same name in your CAD application.\nAfter you have converted the geometry (material data not necessary)\nyou add your Radiance materials file to the scene and all polygons\nwill pick up the assigned materials with correct definition.\n\n\nThe idea of the -n option is to give you an understanding of the\nobjfile structure. You can use the output to define a mapping file\nwhich, for example, assigns a new material to each group in the file.\nIf there are any useful groups or objects in the file depends on the\nway the converter works.\n\n\nNo. The mapping file contains rules that define something along the lines of:\n\n\"for any face in the group 'tree' that has the texture 'bark' use the\nRadiance material 'brown'\"\n\nThere is no definition of the material 'brown'. You have to provide\nthat only when you compile your octree at a later stage.\n\nThe above rule in the mapfile would look like:\n\nbrown (Group \"tree\") (Map \"bark\") ;\n\nYou can find out which objects and groups are used in the objfile with\nthe -n option.\n\n\nYou have to write the map file yourself because it depends on the\ndefinitions in your obj file. If the man page and the above example\nare not clear enough you can export the geometry into different obj\nfiles based on their material (all \"wall\" polygons go in one file, all\n\"floor\" polygons in another). Then you use a single line with the\nmaterial name you wish to use for each object. So the mapping file\n\"floor.map\" contains only the line\n\nfloor ;\n\nand would be use in the obj2rad command:\n\nobj2rad -m floor.map floor.obj > floor.rad\n\n\nRadiance does not care about the surface normals. The obj file can\nonly contain 3- and 4-vertex polygons which Radiance can handle. If\nRevit produces surface normals for all polygons and you have only flat\nobjects you can use the \"-f\" option of obj2rad to ignore this\ninformation. This will make your *.rad file much smaller.\n\nCaveat: Yesterday I tried to import a *.obj file created by 3D Max.\nThe file was not a valid file and obj2rad (or rather obj2mesh in my\ncase) stopped with an error. This is obviously not the fault of\nobj2rad but the usability of this work flow depends on the quality of\nthe *.obj files you can create.\n\n\nGeorge also has a stand alone application available for download:\n\nhttp://www.schorsch.com/download/dxf2rad/\n\nI'm not sure about the Linux version with all the glib versions out\nthere but the Windows version should still run on a typical Windows\nmachine.\n\n\nWow. Easier than obj2rad, eh? Please note that su2rad will also covert\nyour RGB colors to the Radiance RGB values. You can use your existing\nRadiance materials if you want, though.\n\nRegards,\nThomas\n\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] import from other softwar", "tags": [], "sender": "Thomas Bleicher", "datetime": "Sat May  1 00:57:49 2010"}