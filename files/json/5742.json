{"refs": ["<73C6A5C4.797@mail.wmtao.com>"], "id": "<4C5A7E1702000049000126EA@mail.wmtao.com>", "subject": "[Radiance-general] Rado", "email": "MdelaFuente at wmtao.com", "body": "\nHind,\n\nI still use the old torad program when going from AutoCAD to Radiance. (From what I remember it is slower than radout) Unfortunately there was an autocad version check that kept it from working right on newer AutoCADs.  We fixed a layer bug and changed the autocad version to work on 2007.  If you are running 2010, you will have to find the comments we added and change from version 17 to whatever version 2010 is (18?).\n\nBelow are the contents of torad.lsp.  You will have to replace the contents of your file with the following text. Sorry this is long, but I don't think you can attach files.\n\nI believe torad is available from the official radiance website.\n\nHope that helps.\n\nMark de la Fuente\n\n\n;;; ***************************************************************************\n;;;        torad.lsp\n;;;        export RADIANCE scene description files from Autocad.\n;;;\n;;;        Copyright (C) 1993 by Georg Mischler / Lehrstuhl\n;;;                              fuer Bauphysik ETH Zurich.\n;;;\n;;;        Permission to use, copy, modify, and distribute this software\n;;;        for any purpose and without fee is hereby granted, provided\n;;;        that the above copyright notice appears in all copies and that\n;;;        both that copyright notice and this permission notice appear in\n;;;        all supporting documentation.\n;;;\n;;;        THIS SOFTWARE IS PROVIDED \"AS IS\" WITHOUT EXPRESS OR IMPLIED\n;;;        WARRANTY.  ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR\n;;;        PURPOSE AND OF MERCHANTABILITY ARE HEREBY DISCLAIMED.\n;;;\n;;;        Acknowlegdements:\n;;;        Final developement of this program has been sponsored by Prof. Dr.\n;;;        B. Keller, Building Physics, Dep. for Architekture ETH Zurich.\n;;;        The developement environment has been provided by Prof. Dr.\n;;;        G. Schmitt, Architecture & CAAD ETH Zurich.\n;;;\n;;; Edited by AKS on 9/12/06 to get it to work right. Some errors and\n;;; updating were required.\n;;;\n;;; ***************************************************************************\n\n;;; general environment setup.\n;;; load compiled files if possible or else sources.\n\n(progn\n(setq *torad_preverr* *error*\n*error* '((msg)\n(setq *error* *torad_preverr*)\n(prompt \"Load failed for torad.lsp!\\n\")\n(if (null BD4A)\n(prompt \"Extended Lisp compiler not supported on this platform!\\n\"))\n(princ) ) )\n(if (null *col*) (setq *col* 10))\n(if (null  *toradtypelist*) (setq *toradtypelist*\n'(\"3DFACE\"\"TRACE\"\"SOLID\"\"LINE\"\"PLINE\"\"WPLINE\"\"CIRCLE\"\"ARC\"\"PMESH\"\"PFACE\")) )\n(if (null *exportsmode*) (setq *exportsmode* \"Color\" ))\n(if (null *exportnsegs*) (setq *exportnsegs*  16     ))\n(if (null *toraddlgpos*) (setq *toraddlgpos* '(-1 -1)))\n(cond ( (null (or (and BD4A (load \"esample.bi4\" NIL)) (load \"esample\" NIL)))\n(prompt \"Can't load sampling functions from \\\"esample.lsp\\\"!\\007\\n\")\n(exit) )\n(T NIL) )\n(cond ( (null (or (and BD4A (load \"vector.bi4\"  NIL)) (load \"vector\"  NIL)))\n(prompt \"Can't load vector functions from \\\"vector.lsp\\\"!\\007\\n\")\n(exit) )\n(T NIL) )\n)\n\n\n;;; ***************************************************************************\n\n(defun *torad_error* (msg)\n;; error handling for torad.lsp.\n(cond ( (and (/= \"console break\" msg)\n(/= \"Function cancelled\" msg))\n(terpri)\n(princ msg) ))\n(torad_reset) )\n\n\n(defun torad_setup ()\n;; global setup for torad.lsp.\n(regapp \"MKVOL_LSP_01\")\n(setq *Exportentlist* NIL\n*exportblocklist* NIL\n*FILE* NIL\n*torad_preverr* *error*\n*error* *torad_error*\n))\n\n(defun torad_reset ()\n;; global reset for torad.lsp.\n(if *FILE* (close *FILE*))\n(setq *error* *torad_preverr*\n*error* *torad_preverr*\n*FILE* NIL\n*exportentlist* NIL\n*exportblocklist* NIL\n*valuablepolylist* NIL )\n(princ) )\n\n\n;;; ***************************************************************************\n(defun c:torad (/ stat fname selset blocklevel home dwg\nfilelist matlist erot sun view)\n;; main control.\n(torad_setup)\n(setq *exporttruelays* (vislaylist)) ; collect names of visible layers.\n\n; It is here where the original torad.lsp was loading the dialog only\n; if the version was 12.\n;  original was (if (and (wcmatch (getvar \"acadver\") \"12*\")\n; This changes it to 16.\n; Changed the 16 to 17 for ACAD 2007.\n(if (and (wcmatch (getvar \"acadver\") \"17*\")\n(findfile \"torad.dcl\") )\n(setq stat (torad_dlg)\nfilelist *toradfilelist* )\n(setq stat -1) )\n(if (> 0 stat)\n(setq filelist (setradparams)\n*toradfilelist* filelist\nstat 1) )\n(cond ( (< 0 stat)\n(setq  blocklevel 1)\n(setq fname (strcase (cdr (assoc \"prefix\" filelist)) T))\n(cond ( (and (assoc \"files\" filelist)\n(setq selset (ssget)) )\n(makeentlist )\n(setq *valuablepolylist* *toradtypelist*)\n(sampleents selset )\n(while *exportblocklist*\n(sampleblocks blocklevel )\n(setq blocklevel (1+ blocklevel)) )\n(setq matlist (writerad fname))\n(if (assoc \"mat\" filelist)\n(writeradmatlist fname matlist) )\n(if (setq erot (cdr (assoc \"master\" filelist)))\n(writeradtot fname erot matlist) )\n(if (assoc \"make\" filelist)\n(writeradmake fname matlist) ) )\n(T NIL) )\n(if (setq view (cdr (assoc \"view\" filelist)))\n(writeradview fname view) )\n(if (setq sun (cdr (assoc \"light\" filelist)))\n(writeradsun fname sun) )\n)\n(T NIL) )\n(torad_reset ) )\n\n\n\n;;; GENERAL SETUP **********************************************************\n\n;;; currently supported entity types for torad.\n(setq *toradetypes* '(\n(\"3DFACE\"   \"\\n    Planarized faces of 3DFACEs\" )\n(\"TRACE\"    \"\\n       Extruded and flat TRACEs\" )\n(\"SOLID\"    \"\\n       Extruded and flat SOLIDs\" )\n(\"CIRCLE\"   \"\\n      Extruded and flat CIRCLEs\" )\n(\"ARC\"      \"\\n         Extruded faces of ARCs\" )\n(\"LINE\"     \"\\n        Extruded faces of LINEs\" )\n(\"PLINE\"    \"\\n    Extruded faces of 2D-PLINEs\" )\n(\"WPLINE\"   \"\\n    Constant width of 2D-PLINES\" )\n(\"POLYGON\"  \"\\nClosed 2d-polylines as POLYGONs\" )\n(\"PMESH\"    \"\\n             Faces of 3D-MESHes\" )\n(\"PFACE\"    \"\\n             Faces if POLYFACEs\" )\n(\"POINT\"    \"\\n   Points as SPHEREs or BUBBLEs\" )\n))\n\n\n\n(defun setradparams (/ filelist typelist types wcsrot dwg home fname)\n;; setup on older versions than 12.\n(toradshowitems nil)\n(prompt                 \"\\n\\n       Entity data collected by:  \")\n(princ *exportsmode*)\n(prompt                   \"\\n Number of segments for circles:  \")\n(princ *exportnsegs*)\n(initget \"Yes No\")\n(cond ( (= \"Yes\"\n(getkword \"\\n\\n        Do you want to change anything? <No>: \"))\n(terpri)\n(foreach item *toradetypes*\n(toradsetitem (car item) nil))\n;; It is here where the original torad.lsp was using the wrong proceedure names\n;; for setradsamplemode and setradnumsegs. The \"rad\" was left out of the names\n;; as if there had been a last min. edit to change names. AKS 9/12/06\n(setradsamplemode nil)\n(setradnumsegs nil)\n)\n( T NIL) )\n(initget \"Yes No\")\n(cond ( (/= \"No\" (getkword   \"\\n       Write geometry data to file <Yes>?: \"))\n(setq filelist '((\"files\")))\n(initget \"Yes No\")\n(cond ( (= \"Yes\"\n(getkword \"\\n      Write organizing control-file <No>?: \"))\n(setq wcsrot\n(getreal \"\\n WCS rotation from East to X <0.0>: \")\nfilelist (cons (cons \"master\" (if wcsrot wcsrot 0.0))\nfilelist) )\n(initget \"Yes No\")\n(if (= \"Yes\"\n(getkword \"\\n  Write execution rules to makefile <No>?: \"))\n(setq filelist (cons '(\"make\") filelist)) ) ) )\n(initget \"Yes No\")\n(if (= \"Yes\"\n(getkword \"\\n Write materials (all same) to file <No>?: \"))\n(setq filelist (cons '(\"mat\") filelist)) ) )\n(T NIL) )\n(initget \"Yes No\")\n(if (= \"Yes\"\n(getkword \"\\n            Write view to view-file <No>?: \"))\n(setq filelist (cons (cons \"view\" (askview)) filelist)) )\n(initget \"Yes No\")\n(if (= \"Yes\"\n(getkword \"\\n       Write sun definition to file <No>?: \"))\n(setq filelist (cons (cons \"light\" (asksun)) filelist)) )\n(setq dwg (getvar \"DWGNAME\")\nfname (getstring\n(strcat \"\\n\\nprefix for output-file <\" dwg \">: \")))\n(if (= 0 (strlen fname)) (setq fname dwg))\n(if (and (= \"~\" (substr fname 1 1))\n(setq home (getenv \"HOME\")) )\n(setq fname (strcat home (substr fname 2) )) )\n(cons (cons \"prefix\" fname) filelist) )\n\n\n\n(defun toradshowitems (stdalone / types typelist)\n;; display setting of sampled entity types.\n(textpage)\n(if stdalone (torad_setup))\n(setq types *toradetypes*\ntypelist *toradtypelist* )\n(prompt         \"\\n\\n           TORAD sampling modes:\")\n(prompt                   \"\\n -------------------------------\")\n(prompt \"\\n\\n             Collected entities:\\n\")\n(foreach item  types\n(princ (strcat (cadr item) \":  \"))\n(princ (if (member (car item) typelist) \"Y\" \"N\")) )\n(if stdalone (torad_reset)) )\n\n\n\n(defun toradsetitem (item stdalone / types old new tstr oldl newl)\n;; set sampled entity types.\n(if stdalone (torad_setup))\n(initget \"Yes No\")\n(setq oldl *toradtypelist*\ntypes *toradetypes*\ntstr (assoc item types)\nold (if (member (car tstr) oldl) \"Y\" \"N\")\nnew (getkword (strcat (cadr tstr) \" <\" old \">: \")) )\n(cond ( (and new (/= 0 (strlen new))\n(/= old (setq new (substr new 1 1))))\n(setq newl (if (= New \"Y\")\n(cons item oldl)\n(append (cdr (member item oldl))\n(cdr (member item (reverse oldl))) ) ) )\n(setq *toradtypelist* newl) )\n(T NIL) )\n(if stdalone (torad_reset)) )\n\n\n(defun askview (/ vlist num view res)\n;; set view number to export.\n(setq vlist (list (cons 0 \"Current\"))\nnum 0\nres -1)\n(while (setq view (tblnext \"VIEW\" (not view)))\n(setq num (1+ num)\nvlist (cons (cons num (cdr (assoc 2 view))) vlist) ) )\n(prompt \"\\nNUMBER  VIEW\")\n(prompt \"\\n------------\\n\")\n(foreach item (reverse vlist)\n(princ (car item))(princ (strcat \"    \" (cdr item) \"\\n\")) )\n(while (and res (or (> 0 res)(< num res)))\n(setq res (getint \"\\n View Number <0>: \")) )\n(if res res 0) )\n\n\n(defun asksun (/ vlist val)\n;; set lighting parameters.\n(foreach item '((\"\\n     Hour <16.5>: \" 16.5 T   )\n(\"\\n      Day   <01>: \" 01   NIL )\n(\"\\n    Month   <08>: \" 08   NIL )\n(\"\\n Timezone   <-1>: \" -1   NIL )\n(\"\\n Latitude <47.5>: \" 47.5 T   )\n(\"\\nLongitude <-8.5>: \" -8.5 T   ) )\n(if (null (setq val (if (last item)\n(getreal (car item))\n(getint (car item)) )))\n(setq val (cadr item)) )\n(setq vlist (cons (if (last item)(rtos val)(itoa val)) vlist)) )\nvlist )\n\n\n;;; SAMPLING SETUP ***********************************************************\n\n(defun setradsamplemode (stdalone / samplemode)\n;; set sorting criteria.\n(if stdalone (torad_setup))\n(initget \"Layer Toplayer Color\")\n(setq samplemode *exportsmode*\nsamplemode (getkword (strcat \"\\n\\ncollect data by Color/Layer/Toplayer <\"                                     samplemode \">: \") ) )\n(if samplemode (setq *exportsmode* samplemode))\n(if stdalone (torad_reset)) )\n\n\n\n(defun setradnumsegs (stdalone / numsegs)\n;; set arc smoothing.\n(if stdalone (torad_setup))\n(setq numsegs *exportnsegs*\nnumsegs (getint (strcat \"\\nNumber of segments for circles (arcs) <\"\n(itoa numsegs) \">: \") ) )\n(if numsegs (setq *exportnsegs* numsegs))\n(if stdalone (torad_reset)) )\n\n\n;;; DIALOG BOX CALL FOR TORAD *************************************************\n\n(defun torad_dlg (/ dcl_id typelist dwgname dwgprefix num view viewlist stat)\n;; dialog box control for Autocad 12 and later (?).\n(setq dwgname (getvar \"dwgname\")\ndwgprefix (strcat (getvar \"dwgprefix\") \"*\")\nnum 0 )\n(if (wcmatch dwgname dwgprefix)\n(setq dwgname (strcat \"./\" (substr dwgname (strlen dwgprefix)))) )\n;; load and execute dialog if possible.\n(setq dcl_id (load_dialog \"torad.dcl\"))\n(cond ( (> 0 dcl_id)\n(alert \"\\nCouldn't load dialog!\")\n(setq stat -1))\n( (not (new_dialog \"radiance\" dcl_id \"\" *toraddlgpos*))\n(alert \"\\nCouldn't open dialog!\")\n(setq stat -1) )\n(T\n;; setup view list.\n(start_list \"viewlist\" 3)\n(add_list \"current\")\n(while (setq view (tblnext \"VIEW\" (not view)))\n(setq viewlist (cons (cons num view) viewlist)\nnum (1+ num) )\n(add_list (cdadr view)) )\n(end_list)\n;; setup entity types\n(mapcar '(lambda (item)\n(set_tile (car item)\n(if (member (car item) *toradtypelist*)\n\"1\" \"0\" ) ) )\n*toradetypes*)\n;; setup filetypes section.\n(mode_tile \"viewlist\"    1)\n(mode_tile \"sunvals\"     1)\n(mode_tile \"masterblock\" 1)\n(mode_tile \"prefix\"      2)\n;; setup default values.\n(set_tile \"prefix\"  dwgname)\n(set_tile \"make\"    \"1\")\n(set_tile \"nsegs\"   (itoa *exportnsegs*))\n(set_tile \"sample\"  *exportsmode*)\n;; initialize callback functions.\n(action_tile \"files\"  \"(toggle_files)\")\n(action_tile \"master\" \"(toggle_master)\")\n(action_tile \"light\"  \"(toggle_light)\")\n(action_tile \"view\"   \"(toggle_view)\")\n(action_tile \"prefix\" \"(torad_enddlg)\")\n(action_tile \"accept\" \"(torad_enddlg)\")\n(action_tile \"cancel\" \"(torad_candlg)\")\n;; go for it.\n(setq stat (start_dialog))\n(unload_dialog dcl_id)\n))\nstat )\n\n\n\n(defun toggle_light ()\n;; callback for sunlight toggle.\n(cond ( (= \"1\" (get_tile \"light\"))\n(mode_tile \"sunvals\" 0)\n(mode_tile \"long\" 2) )\n(T  (mode_tile \"sunvals\" 1)\n(mode_tile \"prefix\" 2) ) ) )\n\n\n\n(defun toggle_master ()\n;; calback for masterfile toggle.\n(if (= \"1\" (get_tile \"master\"))\n(mode_tile \"masterblock\" 0)\n(mode_tile \"masterblock\" 1) ) )\n\n\n\n(defun toggle_view ()\n;; callback for viewfile toggle.\n(if (= \"1\" (get_tile \"view\"))\n(mode_tile \"viewlist\" 0)\n(mode_tile \"viewlist\" 1) ) )\n\n\n\n(defun toggle_files ()\n;; callback for geometry files toggle.\n(cond ( (= \"1\" (get_tile \"files\"))\n(mode_tile \"filelist\" 0)\n(mode_tile \"modes\" 0)\n(mode_tile \"auxf\" 0)\n(toggle_master) )\n(T\n(mode_tile \"filelist\" 1)\n(mode_tile \"modes\" 1)\n(mode_tile \"auxf\" 1) ) ) )\n\n\n\n(defun torad_enddlg ()\n;; callback for accepting dialog.\n;; accepted if 'ok' or return in prefix field.\n(cond ( (= 2 $reason) nil)\n( T (getraddlgvalues)) ) )\n\n\n\n(defun getraddlgvalues (/ home filelist lightlist typelist nmodl samplebase\nprefix errval make lightval radtypelist samplemode east numsegs)\n;; extract data if possible and close dialog box.\n;; else give alert and stay.\n(cond ( (= \"1\" (get_tile \"files\"))\n(setq typelist *toradetypes*)\n(mapcar '(lambda (item)\n(if (= \"1\" (get_tile (car item)))\n(setq nmodl (cons (car item) nmodl)) ) )\ntypelist )\n(setq radtypelist nmodl\nsamplemode (get_tile \"sample\")\nnumsegs (read (get_tile \"nsegs\"))\nfilelist '((\"files\"))\nsamplebase '((\"mat\")(\"master\")(\"make\")(\"view\")(\"light\") ) ) )\n(T (setq samplebase '((\"view\")(\"light\"))) ) )\n(mapcar '(lambda (item)\n(if (= \"1\" (get_tile (car item)))\n(setq filelist (cons item filelist)) ) )\nsamplebase )\n(cond ( (assoc \"master\" filelist)\n(setq east (read (get_tile \"WCS rotation\")))\n(if (numberp east)\n(setq filelist (subst (cons \"master\" east) '(\"master\") filelist))\n(setq errval \"WCS rotation\") ) )\n(T (if (setq make (member '(\"make\") filelist))\n(setq filelist (append (cdr make)\n(cdr (member '(\"make\")\n(reverse filelist))))) ) ) )\n(cond ( (assoc \"light\" filelist)\n(mapcar '(lambda (item)\n(setq lightval (read (get_tile item)))\n(if (numberp lightval)\n(setq lightlist (cons (get_tile item) lightlist))\n(setq errval item) ) )\n'(\"Hour\"\"Day\"\"Month\"\"TZ\"\"Latitude\"\"Longitude\") )\n(setq filelist (subst (cons \"light\" lightlist) '(\"light\") filelist)) )\n(T NIL) )\n(if (assoc \"view\" filelist)\n(setq filelist (subst (cons \"view\" (read (get_tile \"viewlist\")))\n'(\"view\") filelist) ) )\n(setq prefix (get_tile \"prefix\"))\n(if (and (= \"~\" (substr prefix 1 1))\n(setq home (getenv \"HOME\")) )\n(setq prefix (strcat home (substr prefix 2))) )\n(setq filelist (cons (cons \"prefix\" prefix) filelist))\n(cond ( (and numsegs (not (numberp numsegs)))\n(mode_tile \"nsegs\" 2)\n(mode_tile \"nsegs\" 3)\n(alert \"Please enter a NUMBER for \\\"Number of Segments\\\" !\") )\n( errval\n(mode_tile errval 2)\n(mode_tile errval 3)\n(alert (strcat \"Please enter a NUMBER for \\\"\" errval \"\\\" !\")) )\n(T (if numsegs (setq *exportnsegs*  numsegs))\n(if samplemode (setq *exportsmode* samplemode))\n(if filelist (setq *toradfilelist* filelist))\n(if radtypelist (setq *toradtypelist* radtypelist))\n(setq *toraddlgpos* (done_dialog 1)) ) ) )\n\n\n\n(defun torad_candlg ()\n;; cancel button selected.\n(setq *toraddlgpos* (done_dialog 0)) )\n\n\n\n;;; WRITES ******************************************************************\n\n(defun writerad (fname / lplist lay radname radfname radfile ename matlist)\n;; open files for radiance geometry description.\n(prompt \"\\nwriting out radiance-files:\\n\")\n(foreach lplist *exportentlist*\n(cond ( (cdr lplist)\n(setq lay (strcase (strcat (if (= \"Color\" *exportsmode*)\n\"c_\" \"l_\") (regulatename (car lplist)) ) T )\nradname (strcat (noprefix fname) \"_\" lay)\nradfname (strcat fname \"_\" lay \".rad\") )\n(cond ( (setq radfile (setq *FILE* (open radfname \"w\")))\n(writeradlist fname lplist lay radname radfname radfile)\n(setq matlist (cons (list lay radname radfname) matlist))\n(close radfile)\n(setq *FILE* NIL) )\n( T (prompt \"\\nCan't open file \\\"\" radfname\n\"\\\" for write! \") ) ) )\n(T NIL) ) )\nmatlist )\n\n\n\n(defun writeradlist (fname lplist lay radname radfname radfile\n/ ename contele num numstep numtot polylist)\n;; write radiance geometry description.\n(princ (strcat \"### Radiance scene-file:  \" radfname) radfile)\n(princ (strcat \"\\n### Created: \" (datestring)) radfile)\n(princ \"\\n### TORAD.LSP  by Georg Mischler\\n\\n\" radfile)\n(princ \"### make sure material \" radfile) (princ radname radfile)\n(princ \" is defined in a previous file!\\n\" radfile)\n(princ \"\\n### polygons for object \" radfile)\n(princ  radname radfile) (princ \"\\n\" radfile)\n(setq num 0\nnumtot (length lplist)\nnumstep 0 )\n(while (> numtot numstep)\n(prompt (strcat \"  file: \" radfname \"   \"\n(itoa numstep) \"/\" (itoa numtot) \" \\r\"))\n(setq numstep (min (+ numstep 10) numtot))\n(while (< num  numstep)\n(setq lplist (cdr lplist)\nename (car lplist)\nnum (1+ num) )\n(if (listp ename)\n(setq contele (reverse (cdr ename))\nename (car ename))\n(setq contele nil) )\n(writeradents ename contele radfile radname num) ) )\n(prompt (strcat \"  file: \" radfname \"   \" (itoa numstep) \"       \\n\")) )\n\n\n\n(defun writeradents (ename conte rfile radname num / typ data)\n;; dispatch entities to extraction and write functions.\n(if ename (setq data (entget ename)\nTYP (getetype data) ))\n(cond ( (valuablepoly typ)\n(cond ( (equal typ    \"LINE\")\n(writeradpoly conte rfile radname num (linetopoly data)) )\n( (equal typ   \"PLINE\")\n(writeradpoly conte rfile radname num\n(plinetopoly data 1 *exportnsegs*)) )\n( (equal typ \"POLYGON\")\n(writeradpoly conte rfile radname num\n(plinetopoly data 2 *exportnsegs*)) )\n( (equal typ  \"WPLINE\")\n(writeradpoly conte rfile radname num\n(plinetopoly data 3 *exportnsegs*)) )\n( (equal typ   \"PMESH\")\n(writeradpoly conte rfile radname num (meshtopoly data)) )\n( (equal typ   \"PFACE\")\n(writeradpoly conte rfile radname num (pfacetopoly data)) )\n( (equal typ  \"3DFACE\")\n(writeradpoly conte rfile radname num (facetopoly  data)) )\n( (equal typ   \"TRACE\")\n(writeradpoly conte rfile radname num (tracetopoly data)) )\n( (equal typ   \"SOLID\")\n(writeradpoly conte rfile radname num (tracetopoly data)) )\n( (equal typ  \"CIRCLE\")\n(writeradcircle conte rfile radname num (circletorad data)) )\n( (equal typ     \"ARC\")\n(writeradpoly conte rfile radname num\n(arctopoly data *exportnsegs*)) )\n( (equal typ   \"POINT\")\n(writeradpoint conte rfile radname num (pointtorad data)) )\n(T NIL) ) )\n( T NIL) ) )\n\n\n\n(defun writeradpoly (contele radfile radname num polylist / len polnum)\n;; write polygon lists to file.\n(if contele (setq polylist (trans_back polylist contele)))\n;(showpolylist polylist) ; visual debugging.\n(setq polnum 0)\n(foreach poly polylist\n(cond ( (and poly (< 2 (setq len (length poly))))\n(setq polnum (1+ polnum))\n(princ (strcat \"\\n\" radname \" polygon \" radname \".\"\n(itoa num) \".\" (itoa polnum)) radfile )\n(princ \"\\n0\\n0\\n\" radfile)\n(princ (* len 3) radfile)\n(foreach pt poly (printradpoint pt radfile))\n(princ \"\\n\" radfile) )\n(T nil) ) ) )\n\n\n\n(defun writeradcircle (contele radfile radname num polylist / len rad typ xname)\n;; write circles as rings cylinders or tubes.\n(setq len (car polylist)\nrad (cadr polylist)\nxname (strcat radname \".\" (itoa num))\npolylist (if contele (car (trans_back (caddr polylist) contele))\n(caaddr polylist) ) )\n(cond ( (= 0.0 len)\n(princ (strcat \"\\n\" radname \" ring \" xname \"\\n0\\n0\\n8\") radfile)\n(printradpoint (car polylist) radfile)\n(printradpoint (vector (car polylist)(cadr polylist)) radfile)\n(princ (strcat \"     0     \" (rtos rad) \"\\n\" ) radfile) )\n( T\n(cond ( (> 0.0 len) (setq typ \"tube\"))\n( T (setq typ \"cylinder\")) )\n(princ (strcat \"\\n\" radname \" \" typ \" \" xname \".1\\n0\\n0\\n7\") radfile)\n(printradpoint (car polylist) radfile)\n(printradpoint (cadr polylist) radfile)\n(princ (strcat \"     \" (rtos rad) \"\\n\") radfile)\n(princ (strcat \"\\n\" radname \" ring \" xname \".2\\n0\\n0\\n8\") radfile)\n(printradpoint (cadr polylist) radfile)\n(printradpoint (vector (car polylist)(cadr polylist)) radfile)\n(princ (strcat \"     0     \" (rtos rad) \"\\n\" ) radfile)\n(princ (strcat \"\\n\" radname \" ring \" xname \".3\\n0\\n0\\n8\") radfile)\n(printradpoint (car polylist) radfile)\n(printradpoint (vector (cadr polylist)(car polylist)) radfile)\n(princ (strcat \"     0     \" (rtos rad) \"\\n\" ) radfile) ) ) )\n\n\n\n(defun writeradpoint (conte rfile rname num polylist / center radius typ xname)\n;; write point entities to file as spheres or bubbles.\n(setq radius (car polylist))\n(if (= 0.0 radius) (setq radius (getvar \"PDSIZE\")))\n(cond ( (= 0.0 radius) NIL)\n( (< 0.0 radius) (setq typ \"sphere\"))\n( (> 0.0 radius) (setq typ \"bubble\")) )\n(cond ( typ\n(setq xname (strcat rname \".\" (itoa num))\ncenter (caar (if conte\n(trans_back (cadr polylist) conte)\n(cadr polylist) ))\n)\n(princ (strcat \"\\n\" rname \" \" typ \" \" xname \"\\n0\\n0\\n4\") rfile)\n(printradpoint center rfile)\n(princ (strcat \"     \" (rtos radius) \"\\n\") rfile) ) ) )\n\n\n\n(defun printradpoint (point radfile)\n;; write a single vertex to file.\n(foreach number point\n(princ \"     \" radfile)\n(princ (shortnumstr number 11) radfile) )\n(princ \"\\n\" radfile) )\n\n\n\n;;; WRITE ADDITIONAL CONTROL INFORMATION ************************************\n\n(defun writeradsun (fname sun / sunfname sfname sunfile)\n;; write a file containing a description of natural lighting.\n;; generate a call to gensky and the source for the sky for time and place.\n(setq sunfname (strcat fname \".sun\")\nsfname (noprefix sunfname) )\n(cond ( (setq sunfile (setq *FILE* (open sunfname \"w\")))\n(princ (strcat \"\\nCreating sun-file: \" sunfname))\n(princ (strcat \"### Radiance Sun-definition-file: \" sfname) sunfile)\n(princ (strcat \"\\n### Created: \" (datestring)) sunfile)\n(princ \"\\n### TORAD.LSP  by Georg Mischler\\n\" sunfile)\n(princ \"\\n### Sun and sky definition at:\" sunfile)\n(princ (strcat \"\\n###     Longitude: \" (nth 0 sun)) sunfile)\n(princ (strcat \"\\n###      Latitude: \" (nth 1 sun)) sunfile)\n(princ (strcat \"\\n###      Timezone: \" (nth 2 sun)) sunfile)\n(princ (strcat \"\\n###         Month: \" (nth 3 sun)) sunfile)\n(princ (strcat \"\\n###           Day: \" (nth 4 sun)) sunfile)\n(princ (strcat \"\\n###          Hour: \" (nth 5 sun)) sunfile)\n(princ \"\\n\\n!gensky \" sunfile)\n(princ (strcat (nth 3 sun) \" \" (nth 4 sun) \" \" (nth 5 sun)) sunfile)\n(princ (strcat \" -o \" (car sun) \" -a \" (cadr sun)) sunfile)\n(princ (strcat \" -m \" (rtos (* 15 (read (caddr sun)))) \"\\n\") sunfile)\n(princ \"\\nskyfunc glow skyglow\\n0\\n0\\n4 0.9 0.9 1 0\\n\" sunfile)\n(princ \"\\nskyglow source sky\\n0\\n0\\n4 0 0 1 180\\n\" sunfile) )\n(T (princ (strcat \"\\nCan't open material-file \" sunfname\n\" for write.\"))) ) )\n\n\n\n(defun writeradmatlist (fname matlist / matfname matfile sfname)\n;; write a list of materials from the used modifier names.\n;; materials are all plastic of a constant grey.\n(setq matfname (strcat fname \".mat\")\nsfname (noprefix fname) )\n(cond ( (setq matfile (setq *FILE* (open matfname \"w\")))\n(princ (strcat \"\\nCreating material-file: \" matfname))\n(princ (strcat \"### Radiance material-file:  \" sfname \".mat\") matfile)\n(princ (strcat \"\\n### Created: \" (datestring)) matfile)\n(princ \"\\n### TORAD.LSP  by Georg Mischler\\n\\n\" matfile)\n\n(foreach mat matlist\n(princ (strcat \"\\nvoid plastic \" (cadr mat)) matfile)\n(princ \"\\n0\\n0\\n5 0.65 0.65 0.65 0.0 0.0\\n\" matfile)\n)\n(close matfile)\n(setq *FILE* NIL) )\n(T (princ (strcat \"\\nCan't open material-file \" matfname\n\" for write.\" ))) ) )\n\n\n\n(defun writeradtot (fname erot matlist / totfname totfile sfname infunc)\n;; write a controlling master file to combine all the written data\n;; into a complete RADIANCE scene description.\n(setq totfname (strcat fname \".rad\")\nsfname (noprefix fname)\ninfunc (if (/= 0.0 erot)\n(strcat \"\\n!xform -rz \" (rtos erot) \" \")\n\"\\n!cat \" ) )\n(cond ( (setq totfile (setq *FILE* (open totfname \"w\")))\n(princ (strcat \"\\nCreating Master-file: \" totfname))\n(princ (strcat \"### Radiance Master-file: \" sfname \".rad\") totfile)\n(princ (strcat \"\\n### Created: \" (datestring)) totfile)\n(princ \"\\n### TORAD.LSP  by Georg Mischler\\n\\n\" totfile)\n(if (assoc \"light\" *toradfilelist*)\n(princ (strcat infunc sfname \".sun\\n\\n\") totfile) )\n(if (assoc \"mat\" *toradfilelist*)\n(princ (strcat \"!cat \" sfname \".mat\\n\\n\") totfile) )\n(foreach mat matlist\n(princ (strcat \"!cat \" (cadr mat) \".rad\\n\" ) totfile) )\n(close totfile)\n(setq *FILE* NIL) )\n(T (princ (strcat \"\\nCan't open Master-file \"\ntotfname \" for write.\") )) ) )\n\n\n\n(defun writeradview (fname viewnum / viewfname vdir vpoint vmode target\nlensl twist zvect vsize vlist viewfile)\n;; write a RADIANCE viewfile either from the current view or\n;; from a named view from the view table.\n(setq viewfname (strcat fname \".view\"))\n(cond ( (= 0 viewnum)\n(setq vdir (trans (getvar \"VIEWDIR\") 1 0 T)\nvmode (getvar \"VIEWMODE\")\ntarget (if (= 0 vmode)(getvar \"VIEWCTR\")(getvar \"TARGET\"))\nvpoint (transl-p (trans target 1 0 T)  vdir 1.0)\nlensl (getvar \"LENSLENGTH\")\ntwist (getvar \"VIEWTWIST\")\nzvect (trans '(0.0 1.0 0.0) 2 0 T) ) )\n(T\n(repeat viewnum (setq vlist (tblnext \"VIEW\" (not vlist))) )\n(setq vdir (cdr (assoc 11 vlist))\nvmode (cdr (assoc 71 vlist))\ntarget (cdr (if (= 0 vmode) ; keep it simple...\n(append (mapcar '+ (assoc 10 vlist)\n(assoc 12 vlist) )'(0.0))\n(assoc 12 vlist) ))\nvpoint (transl-p target vdir 1.0)\nlensl (cdr (assoc 42 vlist))\ntwist (cdr (assoc 50 vlist))\nzvect (vect-prod '(0.0 0.0 1.0) vdir)\nzvect (if (equal '(0.0 0.0 0.0) zvect 0.0000001)\n'(0.0 0.1 0.0)\n(vect-prod vdir zvect) ) ) ) )\n(if (= 0 vmode)\n(setq vsize (rtos (getvar \"VIEWSIZE\")))\n(setq vsize (rtos (/ (* 360 (atan (/ 12.0 lensl))) pi))) )\n(setq vdir (mapcar '- vdir))\n(if (and (< 0 viewnum) (/= 0.0 twist))\n(setq zvect (transf-p zvect (rot-3d-matrix (normalize vdir) twist))) )\n(if (and (< 0.7 (caddr zvect))(= 0.0 twist))\n(setq zvect '(0.0 0.0 1.0)) )\n(cond ( (setq viewfile (setq *FILE* (open viewfname \"w\")))\n(princ (strcat \"\\nCreating View-file: \" fname \".view\"))\n(princ \"rview -vt\" viewfile)\n(princ (if (= 1 vmode) \"v -vp \" \"l -vp \") viewfile)\n(mapcar '(lambda (pt) (princ (strcat (rtos pt) \" \") viewfile)) vpoint )\n(princ \" -vd \" viewfile)\n(mapcar '(lambda (pt) (princ (strcat (rtos pt) \" \") viewfile)) vdir)\n(princ \" -vu \" viewfile)\n(mapcar '(lambda (pt) (princ (strcat (rtos pt) \" \") viewfile)) zvect )\n(princ (strcat \" -vh \" vsize \" -vv \" vsize \" -vs 0 -vl 0\\n\") viewfile)\n(close viewfile)\n(setq *FILE* NIL) )\n(T (princ (strcat \"\\nCan't open view-file \"\nviewfname \" for write.\" ))) ) )\n\n\n\n(defun writeradmake (fname matlist / makefname makefile sfname)\n;; write a makefile for the UNIX utility make containing rules for\n;; octree conversion, previewing with rview and batch rendering with rpict.\n(setq sfname (noprefix fname)\nmakefname (strcat (substr fname 1 (- (strlen fname)\n(strlen sfname))) \"makefile\" ) )\n(cond ( (setq makefile (setq *FILE* (open makefname \"w\")))\n(princ (strcat \"\\nCreating makefile: \" makefname))\n(princ (strcat \"### makefile for Radiance-file: \"sfname\".rad\")makefile)          (princ (strcat \"\\n### Created: \" (datestring)) makefile)\n(princ \"\\n### TORAD.LSP  by Georg Mischler\\n\\n\" makefile)\n(princ \"\\nall:\\n\\t@echo \\\"  make what?\\\"\" makefile)\n(princ \"\\n\\t@echo \\\"  enter \\\\\\\"make view\\\\\\\" or \\\\\\\"make pict\\\\\\\"\\\"\\n\" makefile)\n(princ (strcat \"\\nview:\" sfname \".oct\") makefile)\n(princ (strcat \"\\n\\trview -ab 2 -vf \" sfname\".view \"\nsfname\".oct &\\n\")makefile)\n(princ (strcat \"\\npict:\" sfname \".oct\") makefile)\n(princ (strcat \"\\n\\trpict -ab 2 -vf \" sfname\".view \"\nsfname\".oct > \" sfname \".pic &\\n\")makefile)\n(princ (strcat \"\\n\" sfname \".oct: \") makefile)\n(princ (strcat \" \\\\\\n         \" sfname \".rad \") makefile)\n(foreach mat matlist\n(princ (strcat \" \\\\\\n         \" (cadr mat) \".rad\") makefile))\n(princ (strcat \"\\n\\toconv \"sfname\".rad > \"sfname\".oct\\n\") makefile)\n(princ (strcat \"\\nclean:\\n\\t @rm \" sfname\".oct\\n\") makefile)\n(close makefile)\n(setq *FILE* NIL) )\n(T (princ (strcat \"\\nCan't open makefile \"\nmakefname \" for write.\" ))) ) )\n\n\n;;; ***************************************************************************\n(defun regulatename (name / pos char)\n;; eliminate illegal characters in filenames.\n(setq pos 1)\n(repeat (strlen name)\n(setq char (substr name pos 1))\n(if (or (= char \"|\")(= char \"$\"))\n(setq name (strcat (substr name 1 (1- pos))\n\"_\"\n(substr name (1+ pos)))))\n(setq pos (1+ pos)) )\nname )\n\n\n;;;-----------------------------------------------------------------------------\n(defun circletorad (data / center1 center2 radius dist plist)\n;; extract a description of a circle for 'writeradcircle'.\n(setq center1 (cdr (assoc 10 data))\nradius (cdr (assoc 40 data))\ndist (cdr (assoc 39 data))\ncenter2 (list (car center1)(cadr center1)\n(+ (caddr center1) (if dist dist 1.0)) )\nplist (trans_back (list (List center2 center1))\n(list (cdr (assoc -1 data)))) )\n(list (if dist dist 0.0) radius plist) )\n\n\n;;;-----------------------------------------------------------------------------\n(defun pointtorad (data / center rad)\n;; extract a description of a point for 'writeradpoint'.\n(setq center (cdr (assoc 10 data))\nrad (cdr (assoc 39 data))\nrad (if (and rad (/= 0.0 rad)) rad 0.0) )\n(list rad (list (list center))) )\n\n\n;;; ***************************************************************************\n\n(progn\n(prompt   \"\\n-- TORAD.LSP  -  1993 by Georg Mischler --\\n\")\n(prompt   \"\\n Enter \\\"TORAD\\\" for writing Radiance files.\")\n(torad_reset) )\n\n;;; ***************************************************************************\n;;; end of torad.lsp.\n;;; ***************************************************************************\n\n\n[{--Wm. Tao & Associates, Inc.--}] This message and content is privileged, intended only for recipients named and/or addressed.  If the receiver/reader is not a representative of the intended recipient, any review, forwarding, dissemination or copying of this message or its content, in part or in whole, is prohibited. If you have received this message in error, please notify the sender immediately by Reply email, and Delete the original message and attachments.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: http://radiance-online.org/pipermail/radiance-general/attachments/20100805/1c1586ff/attachment-0001.html\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] Radout", "tags": [], "sender": "Mark de la Fuente", "datetime": "Thu Aug  5 07:03:26 2010"}