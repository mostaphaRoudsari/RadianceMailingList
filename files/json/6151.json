{"refs": ["<loom.20101228T160819-777@post.gmane.org>"], "id": "<4D1A321A.9090809@gmx.net>", "subject": "[Radiance-general] window glass modeling", "email": "grobe at gmx.net", "body": "\nHi Milan!\n\nWelcome onboard!\n\n\nHm, a lot of work. A first hint, think about how to organize that, so\nthat you can later repeat the renderings when you have to change\nsomething. People have been using Makefiles, bash scripts, rad as a\nspecialized tool, ...\n\n\nIt will still be useful to render some views (plan view, perspectives)\nto understand what is going on. Artefacts due to ambient settings not\nadapted to e.g. you fenestration become evident when you look at a\nsplotchy image, but may be difficult to understand from some few\nilluminances.\n\n\nAs far as I understand, for clear glass this is all you need.\n\n\nYou need the transmissivity for a material definition of a glass\nmodifier. Calculating the transmissivity from visual light transmittance\nis discussed in Axel's Radiance tutorial, p. 47. The material properties\nof you glass pane are not depending on the shading system or incident light.\n\n\nThe glass object is not only affecting the transmission through the\nwindow opening by simply multiplying, it is also reflective and depends\non the angle of incidence. The sun close to the zenith would lead to\nlarge portions of irradiance on the glass pane be reflected for example.\n\n\nYou can (if it makes sense) scale the brightness of the sky either by\nchanging the return value or the glow material that is modified by the\nbrightfunc. Scaling the zenith and ground plane brightnesses should\nwork, but is little transparent (and in fact you change the input values\nhere for the skybright.cal script). Instead, it would be better to scale\nthe glow. Of course, if you scale by smaller then 1, you will find\n0.265*R + 0.670*G + 0.065*B < 1 . Still I think you will need a glass\npane in your model to care for angular dependance and reflection.\n\n\nYou need only one glass pane. Same as in real. The only pitfall is that,\nwithout mkillum, you would get a lot of noise at acceptable ambient\nsettings, or never ending rendering times. So just use a mkillum surface\nat your glass pane, and on the inner side of the blinds.\n\n\nNo. Radiance uses a built-in material model for glass. There is a file\ncalled materials.pdf as part of the Radiance distribution explaining how\nmaterials are modeled in Radiance.\n\n\nYou do not need all that. Try to model the scene as the real world is -\nand avoid scaling the universe just as you would not have this option in\nreal life neither ;-) The only cheat here is that you can use a single\nsurface in place of the window glass, which in fact consists of two\nglass bodies separated by air. This is the only optimization you need,\ntogether with helping out Radiance by pre-calculating the distribution\nbehind the shading using mkillum.\n\nI'd propose that you just start with a simple case, e.g. the glazing\nwithout blinds, set up the rendering procedure (e.g. a script or\nMakefile), render illuminance on a work plane (maybe you put a desk\nsurface into your model) using rpict -i and get the sensor points'\nilluminances using rtrace -I. Once you have completed that, there will\nbe a better understanding of the more complicated tasks, and you will\nknow how Radiance works in your case. It is difficult to solve all\nquestions in advance, better get the hands on this nice simulation\ntoolbox and your model :-)\n\nAnd always feel free to ask if you face unexpected behaviour by the\nsoftware.\n\nCheers, Lars.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 3740 bytes\nDesc: S/MIME Cryptographic Signature\nURL: <http://www.radiance-online.org/pipermail/radiance-general/attachments/20101228/08a67d57/attachment.bin>\n\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] window glass modeling", "tags": [], "sender": "Lars O. Grobe", "datetime": "Tue, 28 Dec 2010 19:53:14 +0100"}