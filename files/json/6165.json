{"refs": [], "id": "<E35477F1A321144D897D44CCAAFF202C091DE75D43@AD-MAILBOX01.aau.dk>", "subject": "[Radiance-general] Noisy irradiance rendering from glow materials", "email": "cbm at create.aau.dk", "body": "\n\n\nDear list,\n\nWith a lot of inspiration from Thomas Bleicher's tutorial (http://sites.google.com/site/tbleicher/radiance/stencil) which he pointed me to back in August (yes, it took me a while to gather the courage to go down that path) I have managed to devise a small script (or rather a command line) which allows me to render the irradiances received at any point in a scene with all glow materials (the standard -i irradiance option for rpict does not work for glow materials).\n\nI attach (not so sure about list rules regarding attachments) the scene rendered where pixel values represent the outgoing radiance of the glow materials (radiance.jpg) and the scene rendered such that every pixel represents the incident irradiance in the same scene (irradiance.jpg). There are no other light sources than the glow materials.\n\nMy question is simply: how to reduce the significant amount of rendering noise for the (near) vertical surfaces? The irradiance on those surfaces is dominated by energy coming from the horizontal ground plane, which is a single box object (genbox).\n\nI feel I have tried \"everything\" with the render options (see my setting below) but have seen no improvement in render noise ... hope to get some pointers/ideas from the list.\n\n\nI use the following command line command to render the irradiance:\n\nvwrays -ff -x $XRES -y $YRES -vf $NAME.vp \\\n|rtrace -ffa -opN $NAME.oct \\\n|sed '1,8d' \\\n|rcalc -ia6 -of \\\n-e '$1=$1 + 0.001*$4;$2=$2 + 0.001*$5;$3=$3 + 0.001*$6' \\\n-e 'out(v)=if(sqrt($4*$4 + $5*$5 + $6*$6) - 0.9,v,-1)' \\\n-e '$4=out($4);$5=out($5);$6=out($6)'  \\\n|rtrace -ffc -x $XRES -y $YRES -I -ab 0  -aw 1 -ad 4096 -ar 4096 -dt 0.0 -dp 8192 -ds 0.01 -dj 0.9 $NAME.oct > $NAME.irradiance.hdr\n\nIn short: use vwrays to generate the primary rays needed to render the scene, pipe into rtrace to get intersection points and normals, pipe into sed to get rid of header generated by rtrace and leave only lines with intersection point and normal, pipe through rcalc to \"lift\" intersection points 1/1000 of a unit in the direction of the normal (to avoid surface self-intersection problems later when using intersection point and normal as the start point for an incident irradiance computation) ... and rcalc also sets a (-1, -1, -1) direction vector if the original surface normal from rtrace is close to zero length, finally pipe through rtrace, this time with -I option to gather incident irradiance at the \"lifted\" surface point.\n\n\nBest,\nClaus\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://www.radiance-online.org/pipermail/radiance-general/attachments/20101229/7099b0f5/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: radiance.jpg\nType: image/jpeg\nSize: 6400 bytes\nDesc: radiance.jpg\nURL: <http://www.radiance-online.org/pipermail/radiance-general/attachments/20101229/7099b0f5/attachment-0002.jpg>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: irradiance.jpg\nType: image/jpeg\nSize: 24585 bytes\nDesc: irradiance.jpg\nURL: <http://www.radiance-online.org/pipermail/radiance-general/attachments/20101229/7099b0f5/attachment-0003.jpg>\n\n", "isquestion": true, "replyTo": "", "tags": [], "sender": "=?iso-8859-1?Q?Claus_Br=F8ndgaard_Madsen?=", "datetime": "Wed, 29 Dec 2010 22:59:30 +0100"}