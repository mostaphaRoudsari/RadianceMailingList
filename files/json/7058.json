{"refs": ["<4F7B82E0.2070206@gmail.com>", "<81CEA7EA-0D5B-489B-BEAB-2652E4803395@iebele.nl>", "<0602B923-AD59-4806-AD2D-48AFDA0843EB@iebele.nl>"], "id": "<4F8B016C.7040102@gmx.net>", "subject": "[Radiance-general] Optimizing Radiance for cluster rendering", "email": "grobe at gmx.net", "body": "\nHi,\n\nI never compiled using icc, but on the cluster topic I have some comments.\n\nFirst, I would make sure that you use frozen octrees. Compiling the same\nscene from scratch on each node does not make sense.\n\nAs you say, copying the scene to the computing nodes before running the\nprocesses does not make much difference, though that may depend on the\ncluster archicecture you are building up on. I had an Openmosix cluster,\nwhere I could start all processes on one node, which were then\nautomatically \"migrated away\" to other available nodes (no shared\nmemory, each process had a full set of scene data in that case). As\nrpict/rtrace processes typically load the scene data once before\nspawning sub-processes (by copying the process data), there is not\nreally more io involved then copying the data separately before starting\nthe processes. If you start processes over ssh, sharing data by nfs\nmounts, it may help to have some delays so that not all nodes try to\nfetch the data at the same moment.\n\nMy guess is that the one critical point in sharing data is access to\nambient cache and image data. You are probably aware of this.\n\nCheers, Lars.\n\n\n", "isquestion": false, "replyTo": "Subject: [Radiance-general] Optimizing Radiance for cluster rendering", "tags": [], "sender": "Lars O. Grobe", "datetime": "Sun, 15 Apr 2012 19:12:12 +0200"}