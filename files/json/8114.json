{"refs": [], "id": "<CAF-iH4+CAZ1CanJvKdq0vM0_Xmw0uCh-a5y3tp3ODbQX90J9Uw@mail.gmail.com>", "subject": "[Radiance-general] Radiosity method implementation on Radian", "email": "gmolina1 at uc.cl", "body": "\nDear everyone,\n\nI am thinking on implementing a hybrid methodology between Radiosity method\nand Ray-tracing, for accelerating some calculations (by giving up accuracy,\nmaybe)\n\nAs everyone here knows, Radiance ray-tracing works awesome; however, I\ncould not find anything related to any Radiosity implementation.\n\nI think I can make algorythms to subdivide polygons into meshes, however,\nwhat I do not know how to do is:\n\n*1.- Calculation of View (Form) Factors:* I guess a straitforward way is to\ncalculate them by randomly sending rays from one surface to the rest of\nthem, but I do not know how to do that (or use octrees). (k/N would be the\nview factor Fij... where k is the number of rays that falled into j from i,\nand N the total number of rays sent)\n\n*2.- Render:* After I have the Radiosities of every polygon. How can I make\na render? I guess I can use *vwrays *somehow, but I am not sure how to\ncheck which polygon am I \"seeing\", in order to use the calculated values.\n\nAny information is useful,\n\nTHANKS\n\nGerman\n\nPS: I know people here might like Ray-tracing more than anything else, but\nstill... This implementation might help\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://www.radiance-online.org/pipermail/radiance-general/attachments/20130618/7e3af0cb/attachment.html>\n\n", "isquestion": true, "replyTo": "", "tags": [], "sender": "=?ISO-8859-1?Q?Germ=E1n_Molina_Larrain?=", "datetime": "Tue, 18 Jun 2013 10:10:55 -0400"}