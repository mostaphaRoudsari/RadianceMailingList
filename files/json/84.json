{"body": "\nThis is a multi-part message in MIME format.\n--------------F2F6EFC25830270349AF3F12\nContent-Type: text/plain; charset=us-ascii\nContent-Transfer-Encoding: 7bit\n\nRon wrote:\n\nI would like to recover the surface normals of the surfaces visible in\nevery pixel of a Radiance scene.  In other words, I want to trace the\ninitial ray cast for each pixel, and find the surface normal of the first\nsurface that ray hits.  I figured out that I could do this using rtrace\n-on, if I feed rtrace the rays corresponding to each pixel in my\nimage.  Is there an easy way to compute all of these rays automatically\nusing an existing Radiance program, or will I need to write a special .cal\nfile for rcalc?  I have the feeling that some Radiance gurus could\naccomplish this task in one or two lines.\n\n------------\nThere are two solutions to this problem.  As you say, it is a very handy\nthing to be able to do, so I wrote a C program to do just that.  It is\npart of the Unix distribution I've been working on and plan to release\nas soon as I figure out how.  In the meantime, I am attaching the C file\nand manual page to this message, which are fairly short.  The nice thing\nabout this solution is that it will work with any Radiance view type,\nand will generate the exact rays corresponding to the center of each\npixel.  (If you want an absolute guarantee that these correspond to\nthe pixels sampled with rpict, you will need to set the -pj 0 option\nin your rendering.)\n\nThe second solution is to apply the following .cal script with rcalc,\nwhich works only for perspective views, found in ray/lib/lib:\n\n{\nproj.cal - calculate image projection vector\n}\n{ View Point }\nVPx = 0; VPy = 0; VPz = 0;\n{ View Up }\nVUx = 0; VUy = 0; VUz = 1;\n{ View Direction }\nVDx = 0; VDy = 1; VDz = 0;\n{ View Horizontal and Vertical angles }\nVH = 45; VV = 45;\n{ X and Y resolution }\nX = 512; Y = 512;\n{ Projected Direction (computed) }\nPDx = NVDx + h*IHx + v*IVx;\nPDy = NVDy + h*IHy + v*IVy;\nPDz = NVDz + h*IHz + v*IVz;\nh = x - (X-1)/2; v = y - (Y-1)/2;\n{ Normalized View Direction }\nNVDx = VDx/VDl; NVDy = VDy/VDl; NVDz = VDz/VDl;\nVDl = sqrt(VDx*VDx + VDy*VDy + VDz*VDz);\n{ Increment Horizontal }\nIHx = IHF*NTIHx; IHy = IHF*NTIHy; IHz = IHF*NTIHz;\nNTIHx = TIHx/TIHl; NTIHy = TIHy/TIHl; NTIHz = TIHz/TIHl;\nTIHx = VDy*VUz-VDz*VUy; TIHy = VDz*VUx-VDx*VUz; TIHz = VDx*VUy-VDy*VUx;\nTIHl = sqrt(TIHx*TIHx + TIHy*TIHy + TIHz*TIHz);\nIHF = 2*tan(PI/180/2*VH)/X;\n{ Increment Vertical }\nIVx = IVF*(NTIHy*NVDz-NTIHz*NVDy);\nIVy = IVF*(NTIHz*NVDx-NTIHx*NVDz);\nIVz = IVF*(NTIHx*NVDy-NTIHy*NVDx);\nIVF = 2*tan(PI/180/2*VV)/Y;\n\nPI = 3.14159265358979323846\n\n--------------\nThe horizontal and vertical increment vectors get added to a unit\ndirection vector to get the final view direction computed in PDx,\nPDy, and PDz.  The view point (origin) remains the same for a\nperspective view.  An example application of the above file with\na specific view origin, direction, and angle might be:\n\ncnt 512 512 | rcalc -f proj.cal -e 'VPx=15.3;VPy=10.1;VPz=-3.3;' \\\n-e 'VDx=.394;VDy=-.731;VDz=-.053;' \\\n-e 'VH=30;VV=30;' -e '$1=VPx;$2=VPy;$3=VPz;' \\\n-e '$4=PDx;$5=PDy;$6=PDz;' | rtrace [rtrace options]\n\nHope this helps.\n-Greg\n--------------F2F6EFC25830270349AF3F12\nContent-Type: text/plain; charset=us-ascii; x-mac-type=\"54455854\"; x-mac-creator=\"522A6368\";\nname=\"vwrays.1\"\nContent-Transfer-Encoding: 7bit\nContent-Description: Unknown Document\nContent-Disposition: inline;\nfilename=\"vwrays.1\"\n\n.\\\" SCCSid \"@(#)vwrays.1 3.5 1/15/99 SGI\"\n.TH VWRAYS 1 1/15/99 RADIANCE\n.SH NAME\nvwrays - compute rays for a given picture or view\n.SH SYNOPSIS\n.B vwrays\n.B \"[ -i -f{a|f|d} | -d ]\"\n{\n.B \"view opts ..\"\n|\n.B picture\n.B [zbuf]\n}\n.SH DESCRIPTION\n.I Vwrays\ntakes a picture or view specification and computes the ray origin and\ndirection corresponding to each pixel in the image.\nThis information may then be passed to\n.I rtrace(1)\nto perform other calculations.\nIf a given pixel has no corresponding ray (because it is outside the\nlegal view boundaries), then six zero values are sent instead.\n.PP\nThe\n.I -i\noption may be used to specify desired pixel positions on the standard\ninput rather than generating all the pixels for a given view.\n.PP\nThe\n.I -f\noption may be used to set the record format to something other than the\ndefault ASCII.\nUsing raw float or double records for example can reduce the time\nrequirements of transferring and interpreting information in\n.I rtrace.\n.PP\nView options may be any combination of standard view parameters described\nin the\n.I rpict(1)\nmanual page, including input from a view file with the\n.I \\-vf\noption.\nAdditionally, the target X and Y dimensions may be specified with\n.I -x\nand\n.I -y\noptions, and the pixel aspect ratio may be given with\n.I -p.\nThe default dimensions are 512x512, with a pixel aspect ratio of 1.0.\nJust as in\n.I rpict,\nthe X or the Y dimension will be reduced if necessary\nto best match the specified pixel\naspect ratio, unless this ratio is set to zero.\n.PP\nIf the\n.I -d\noption is given, then\n.I vwrays\njust prints the computed image dimensions, which are based on the view\naspect and the pixel aspect ratio just described.\nThe\n.I -ld\nswitch will also be printed, with\n.I -ld+\nif the view file has an aft clipping plane, and\n.I -ld-\notherwise.\nThis is useful for passing options to the\n.I rtrace\ncommand line.\n(See below.)\n.PP\nIf the view contains an aft clipping plane\n.I (-va\noption), then the magnitudes of the ray directions will\nequal the maximum distance for each pixel, which will be interpreted\ncorrectly by\n.I rtrace\nwith the\n.I -ld+\noption.\nNote that this option should not be given unless there is an aft\nclipping plane, since the ray direction vectors will be normalized\notherwise, which would produce a uniform clipping distance of 1.\n.PP\nIf a picture is given on the command line rather than a set of view options,\nthen the view and image dimensions are taken from the picture file, and\nthe reported ray origins and directions will exactly match the center of each\npixel in the picture.\n.PP\nIf a depth buffer file is given as well, then\n.I vwrays\ncomputes the intersection point of each pixel ray (equal to the ray origin\nplus the depth times the ray direction), and reports this instead of the\nray origin.\nThe reported ray direction will also be reversed.\nThe interpretation of this data is an image of origins and directions\nfor light rays leaving the scene surfaces to strike each pixel.\n.SH EXAMPLES\nTo compute the ray intersection points and returned directions corresponding\nto a picture and its depth buffer:\n.IP \"\" .2i\nvwrays scene_v2.pic scene_v2.zbf > scene_v2.pts\n.PP\nTo determine what the dimensions of a given view would be:\n.IP \"\" .2i\nvwrays -d -vf myview.vf -x 2048 -y 2048\n.PP\nTo generate a RADIANCE picture using\n.I rtrace\ninstead of\n.I rpict:\n.IP \"\" .2i\nvwrays -ff -vf view1.vf -x 1024 -y 1024 |\nrtrace `vwrays -d -vf view1.vf -x 1024 -y 1024` -ffc scene.oct > view1.pic\n.SH AUTHOR\nGreg Ward Larson\n.SH ACKNOWLEDGMENT\nThis work was supported by Silicon Graphics, Inc.\n.SH BUGS\nAlthough\n.I vwrays\ncan reproduce any pixel ordering (i.e., any image orientation) when given\na rendered picture, it will only produce standard scanline-ordered rays when\ngiven a set of view parameters.\n.SH \"SEE ALSO\"\nrcalc(1), rpict(1), rtrace(1)\n\n--------------F2F6EFC25830270349AF3F12\nContent-Type: text/plain; charset=us-ascii; x-mac-type=\"54455854\"; x-mac-creator=\"522A6368\";\nname=\"vwrays.c\"\nContent-Transfer-Encoding: 7bit\nContent-Description: Unknown Document\nContent-Disposition: inline;\nfilename=\"vwrays.c\"\n\n/* Copyright (c) 1997 Silicon Graphics, Inc. */\n\n#ifndef lint\nstatic char SCCSid[] = \"@(#)vwrays.c 3.3 10/17/97 SGI\";\n#endif\n\n/*\n* Compute rays corresponding to a given picture or view.\n*/\n\n\n#include \"standard.h\"\n\n#include \"view.h\"\n\n#include \"resolu.h\"\n\nextern int\tputf(), putd(), puta();\n\nint\t(*putr)() = puta;\n\nVIEW\tvw = STDVIEW;\n\nRESOLU\trs = {PIXSTANDARD, 512, 512};\n\ndouble\tpa = 1.;\n\nint\tzfd = -1;\n\nint\tfromstdin = 0;\n\nchar\t*progname;\n\n\nmain(argc, argv)\nint\targc;\nchar\t*argv[];\n{\nchar\t*err;\nint\trval, getdim = 0;\nregister int\ti;\n\nprogname = argv[0];\nif (argc < 2)\ngoto userr;\nfor (i = 1; i < argc && argv[i][0] == '-'; i++)\nswitch (argv[i][1]) {\ncase 'f':\t\t\t/* output format */\nswitch (argv[i][2]) {\ncase 'a':\t\t\t/* ASCII */\nputr = puta;\nbreak;\ncase 'f':\t\t\t/* float */\nputr = putf;\nbreak;\ncase 'd':\t\t\t/* double */\nputr = putd;\nbreak;\ndefault:\ngoto userr;\n}\nbreak;\ncase 'v':\t\t\t/* view file or option */\nif (argv[i][2] == 'f') {\nrval = viewfile(argv[++i], &vw, NULL);\nif (rval <= 0) {\nfprintf(stderr,\n\"%s: no view in file\\n\",\nargv[i]);\nexit(1);\n}\nbreak;\n}\nrval = getviewopt(&vw, argc-i, argv+i);\nif (rval < 0)\ngoto userr;\ni += rval;\nbreak;\ncase 'd':\t\t\t/* report dimensions only */\ngetdim++;\nbreak;\ncase 'x':\t\t\t/* x resolution */\nrs.xr = atoi(argv[++i]);\nif (rs.xr <= 0) {\nfprintf(stderr, \"%s: bad x resolution\\n\",\nprogname);\nexit(1);\n}\nbreak;\ncase 'y':\t\t\t/* y resolution */\nrs.yr = atoi(argv[++i]);\nif (rs.yr <= 0) {\nfprintf(stderr, \"%s: bad y resolution\\n\",\nprogname);\nexit(1);\n}\nbreak;\ncase 'p':\t\t\t/* pixel aspect ratio */\npa = atof(argv[++i]);\nbreak;\ncase 'i':\t\t\t/* get pixels from stdin */\nfromstdin = 1;\nbreak;\ndefault:\ngoto userr;\n}\nif (i > argc | i+2 < argc)\ngoto userr;\nif (i < argc) {\nrval = viewfile(argv[i], &vw, &rs);\nif (rval <= 0) {\nfprintf(stderr, \"%s: no view in picture\\n\", argv[i]);\nexit(1);\n}\nif (i+1 < argc) {\nzfd = open(argv[i+1], O_RDONLY);\nif (zfd < 0) {\nfprintf(stderr,\n\"%s: cannot open depth buffer\\n\",\nargv[i+1]);\nexit(1);\n}\n}\n}\nif ((err = setview(&vw)) != NULL) {\nfprintf(stderr, \"%s: %s\\n\", progname, err);\nexit(1);\n}\nif (i == argc)\nnormaspect(viewaspect(&vw), &pa, &rs.xr, &rs.yr);\nif (getdim) {\nprintf(\"-x %d -y %d -ld%c\\n\", rs.xr, rs.yr,\nvw.vaft > FTINY ? '+' : '-');\nexit(0);\n}\nif (fromstdin)\npix2rays(stdin);\nelse\nputrays();\nexit(0);\nuserr:\nfprintf(stderr,\n\"Usage: %s [ -i -f{a|f|d} | -d ] { view opts .. | picture [zbuf] }\\n\",\nprogname);\nexit(1);\n}\n\n\npix2rays(FILE *fp)\n{\nstatic FVECT\trorg, rdir;\nfloat\tzval;\ndouble\tpx, py;\nint\tpp[2];\ndouble\td;\nregister int\ti;\n\nwhile (fscanf(fp, \"%lf %lf\", &px, &py) == 2) {\nif (px < 0 || px >= rs.xr ||\npy < 0 || py >= rs.yr) {\nfprintf(stderr,\n\"%s: (x,y) pair (%.0f,%.0f) out of range\\n\",\npx, py);\nexit(1);\n}\nif (zfd >= 0) {\nloc2pix(pp, &rs, px/rs.xr, py/rs.yr);\nif (lseek(zfd,\n(pp[1]*scanlen(&rs)+pp[0])*sizeof(float), 0)\n< 0 ||\nread(zfd, &zval, sizeof(float))\n< sizeof(float)) {\nfprintf(stderr, \"%s: depth buffer read error\\n\",\nprogname);\nexit(1);\n}\n}\nd = viewray(rorg, rdir, &vw, px/rs.xr, py/rs.yr);\nif (d < -FTINY)\nrorg[0] = rorg[1] = rorg[2] =\nrdir[0] = rdir[1] = rdir[2] = 0.;\nelse if (zfd >= 0)\nfor (i = 0; i < 3; i++) {\nrorg[i] += rdir[i]*zval;\nrdir[i] = -rdir[i];\n}\nelse if (d > FTINY) {\nrdir[0] *= d; rdir[1] *= d; rdir[2] *= d;\n}\n(*putr)(rorg, rdir);\n}\nif (!feof(fp)) {\nfprintf(stderr, \"%s: expected px py on input\\n\", progname);\nexit(1);\n}\n}\n\n\nputrays()\n{\nstatic FLOAT\tloc[2];\nstatic FVECT\trorg, rdir;\nfloat\t*zbuf;\nint\tsc;\ndouble\td;\nregister int\tsi, i;\n\nif (zfd >= 0) {\nzbuf = (float *)malloc(scanlen(&rs)*sizeof(float));\nif (zbuf == NULL) {\nfprintf(stderr, \"%s: not enough memory\\n\", progname);\nexit(1);\n}\n}\nfor (sc = 0; sc < numscans(&rs); sc++) {\nif (zfd >= 0) {\nif (read(zfd, zbuf, scanlen(&rs)*sizeof(float)) <\nscanlen(&rs)*sizeof(float)) {\nfprintf(stderr, \"%s: depth buffer read error\\n\",\nprogname);\nexit(1);\n}\n}\nfor (si = 0; si < scanlen(&rs); si++) {\npix2loc(loc, &rs, si, sc);\nd = viewray(rorg, rdir, &vw, loc[0], loc[1]);\nif (d < -FTINY)\nrorg[0] = rorg[1] = rorg[2] =\nrdir[0] = rdir[1] = rdir[2] = 0.;\nelse if (zfd >= 0)\nfor (i = 0; i < 3; i++) {\nrorg[i] += rdir[i]*zbuf[si];\nrdir[i] = -rdir[i];\n}\nelse if (d > FTINY) {\nrdir[0] *= d; rdir[1] *= d; rdir[2] *= d;\n}\n(*putr)(rorg, rdir);\n}\n}\nif (zfd >= 0)\nfree((char *)zbuf);\n}\n\n\nputa(ro, rd)\t\t/* put out ray in ASCII format */\nFVECT\tro, rd;\n{\nprintf(\"%.5e %.5e %.5e %.5e %.5e %.5e\\n\",\nro[0], ro[1], ro[2],\nrd[0], rd[1], rd[2]);\n}\n\n\nputf(ro, rd)\t\t/* put out ray in float format */\nFVECT\tro, rd;\n{\nfloat v[6];\n\nv[0] = ro[0]; v[1] = ro[1]; v[2] = ro[2];\nv[3] = rd[0]; v[4] = rd[1]; v[5] = rd[2];\nfwrite(v, sizeof(float), 6, stdout);\n}\n\n\nputd(ro, rd)\t\t/* put out ray in double format */\nFVECT\tro, rd;\n{\ndouble v[6];\n\nv[0] = ro[0]; v[1] = ro[1]; v[2] = ro[2];\nv[3] = rd[0]; v[4] = rd[1]; v[5] = rd[2];\nfwrite(v, sizeof(double), 6, stdout);\n}\n\n--------------F2F6EFC25830270349AF3F12--\n\n\n", "replyTo": "", "sender": "Greg Ward", "isquestion": true, "tags": [], "id": "<3BC719D3.60CB12E7@lmi.net>", "refs": [], "datetime": "Fri, 12 Oct 2001 09:27:00 -0700", "email": "radiance-general@radiance-online.org", "subject": "[Radiance-general] Re: Radiance-general digest, Vol 1 #22 - 2 msgsReferences: <200110121000.f9CA07k01887@darkside-animation.com>"}