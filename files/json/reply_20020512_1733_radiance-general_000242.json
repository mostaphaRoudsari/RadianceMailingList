{"body": "Greg Ward wrote:\n\n\n> An octree should have a few hundred geometric primitives to make it\n> worthwhile in terms of rendering time.  Given such a constraint, it is\n> usually\n> possible to partition geometry so it is roughly cubical in terms of\n> volume,\n> though I agree this is an inconvenience. \nGeometry exported from CAD is often complex and uses Radiance primitives\nnot very efficiently, e.g. everything is tesselated into polygons, even\nif the surface could be described as sphere, cone etc. Mostly\nhierarchical structures are left intact, e.g. a line of complex carved\nposts is known to the exporting routine as \"instances\" of the same\nelement.\nThen, IMHO, there's no generaly sound way to reorganize geometry to fill\nRADIANCE instances with cube like geometry.\n\n\n> One could have an octree with a non-cubical bounding box, but the\n> efficiency of tracing rays through long, thin subcubes would be awful.\nIf I get this right, the penalty for non-cubical bounding boxes with\nnon-thin geometry distribution would be nil, with the advantage that it\nwould allow placing \"thinny\" instances next to another without\noverlapping bounding cubes. \nCode for checking ray intersections with non-cubical boxes would be as\nefficient as checking cubical boxes ? If not, would that be\ncounterweight by the speedup as rays close to the bounding box miss the\nnon-cubical box completely whereas they hit (and trigger at least one\noctree lookup) a cubical now ?\n\n\nAs always, any insights very much welcome\n-Peter\n\n\n pab-opto, Freiburg, Germany, www.pab-opto.de\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2002-May/000242.html).</sup>", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "May 12, 2002 at 05:33PM", "created_by": "Peter_Apian-Bennewitz", "parent_id": "radiance-general_000241", "id": "radiance-general_000242"}