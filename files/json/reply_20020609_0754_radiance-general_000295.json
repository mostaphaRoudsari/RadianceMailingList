{"body": "I like what Randolph had to say about code conversion.  There is a lot \nof accumulated fluff in Radiance, such as the various printer drivers.  \nI never bothered to take them out because they still seem to compile, \nand they don't affect anything (other than taking up a bit of space on \neveryone's systems) since Radiance programs that are never run never \ninteract with the rest of the codebase...  This is traditional, \nold-style modularity in UNIX -- a bunch of separate tools that work \ntogether.  It works well for many of the subproblems in rendering, \nexcept for the rendering process itself, which requires a rather large \nprogram to do the job properly.  Thus, we have rpict, rview, and rtrace, \nwhich could definitely use a bit of ANSI-fication and (in an ideal \nworld) a major rewrite in C++.  I have had really good luck porting C++ \nbetween various platforms, even (shudder) Windows, though the tools \nthere are horrible in my opinion, at least the Microsoft offerings.\n\n\nI should mention that I am currently working on an image browser and \ncataloguer for JPEG and high dynamic-range images on Mac OS X, and I've \nbeen employing a combination of C++ (for new bits) with links to some \nold ANSI and non-ANSI C modules for reading and writing various \nformats.  I just put up with the compiler noise with the latter, but \nsince I know the code works and it requires almost no maintainence at \nthis stage, I just ignore it.  Perhaps I've gotten too used to ignoring \ncompiler warnings over the years, but I'm sorry, casting every float \nassignment is just so tedious and so ugly, that I just switch certain \nwarnings off even in my new efforts.\n\n\nRewriting oconv and the core renderers in C++ might be worthwhile, but \nit would take at least 6 months full-time, and would introduce many more \nbugs than it would eliminate.  In fact, I doubt it would eliminate any \nbugs.  I'm sure there are still a few lurking in there, and I'm always \namazed when I find something that's been wrong with the code for years \nand never surfaced or had a harmless manifestation, sort of like junk \nDNA in an organism that evolved over eons...  And, as much as I'm \ngetting comfortable with C++, which has to be the most overblown \nlanguage since ADA, I think such a rewrite would ultimately be slower \nthan the current C implementation, however carefully we approached it.\n\n\nHaving said that, if it started raining money over my house tomorrow, I \nwould leave my job and devote myself to some serious development work.  \nIn particular, I've had some ideas brewing for years on a radically \ndifferent approach to rendering, which eliminates explicit geometry \nthroughout most of the scene, and uses a mathematical construct (TBD) \nfor both geometry and light scattering.  I could see pursuing something \nlike this in a Ph.D. program, but my current financial constraints don't \npermit me the luxury of enrolling in one.  Such a renderer, even if it \nworked, would probably be an adjunct rather than a replacement for \nRadiance, which has been carefully tuned for architectural rendering \napplications.\n\n\nGetting back to ANSI-fication, the main problem I have in modifying the \nRadiance codebase is a lack of knowledge of what works on various \nplatforms.  The portability fixes that have accumulated over the years \nare still functioning and useful, many of them, and some are useless.  \nSeparating one from the other is difficult for me, since I have limited \naccess these days to different systems, though the proliferation of UNIX \nflavors seems to have slowed down at least, thankfully.  As long as we \noffer solid support of Linux, FreeBSD (including Mac OS X, my current \nfave) and Solaris, we should do pretty well.  Perhaps the thing to do is \nfor each of you who has experience in the relevant systems to put \ntogether a list of compile problems you've noticed.  We could scour the \ncode for #ifdef's and identify ones that can be eliminated or aren't \nworking properly.  I have kept these to a minimum, so that shouldn't \ntake long.  Third, we could identify useless programs that don't need to \nbe supported in the main distribution.  Finally, we can begin on \nfunction prototypes and header inclusion for ANSI-C, making sure our \ncalls are to supported system and library functions, rather than ones \nthat may become obsolete.\n\n\nWe're probably looking at a week or two of one programmer's time, and a \nfew hours from each volunteer.  Who wants to step forward?\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2002-June/000295.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "June 09, 2002 at 07:54AM", "created_by": "Greg_Ward", "parent_id": "radiance-general_000292", "id": "radiance-general_000295"}