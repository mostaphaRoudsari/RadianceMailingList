{"body": "Georg Mischler wrote:\n> \n> *phew*, what have I started here?\n... a rather fruitful and long awaited discussion.\n> I really hope we're not scaring any non-developers away from this\n> general purpose list with such a highly technical discussion!\n--admin mode on\nradiance-online just got the mailing list \"radiance-dev\" added, to serve\nfurther discussions amongst those so inclined.\n--admin mode off\n\n\nI happily back Georg's comments on C++ being slower (at compile time\nand, apparently, running), non reciprocal to ANSI-C and not as\nstandardized as ANSI-C is, plus the fact that \"object oriented\"\nprogramming is possible with, yet not inforced by ANSI-C.\nAs example, system dependancy in a job distributing system for\nHP-UX,Linux,IRIX and SUN-OS was, thanks to Posix, limited to a small\nnumber of system calls. Approx 200 lines total out of 4500 are ifdefed\nand fit into two seperate files (file locking and getting system\nparameters like load, swap space, physical ram etc.).\nCompared with compiling stuff like the URT kit a decade ago, systems\nhave become more standardized. Is GNU's autoconf really needed for a\nraytracer, which is supposedly not close to the system ? (fork&flock\naside)\n\n\nThoughts on a rewrite were founded on the limited and cumbersome\n\"interface\" for extending the core rendering. My line of thought runs\nweirdly like this: \n\n\nRadiance has been used to solve light problems other programs can't\nhandle (in the early days its arbitrary geometry was better than the\nthan solely available box-oriented illumination programs, it's surface\ndescription is more realistic than _todays_ Lightscape, the ambient\ncache was a big step forward, etc. ). That top-notch position is one\nreason people use it.\n\n\nAs much as I appreciate a broad use of it in daily usage for problems\nwhich aren't driving the algorithms to its limits (and my highest\nrespect to those using it for that, the lighted world would be a much\nbetter place if people use 20% of Radiance capabilites early enough in\nthe architectural planning process), is the rest of the\nrendering/light-calculating software industry in a non-dormant state.\n\n\nAlgorithms for global illumination have been progressing since Greg\nintroduced the ambient cache into Radiance, and it would be quite nice\nto extend Radiance more easily. Validation is of top priority (that's\nwhat I help Roland Schregle to do at FhG-ISE), and the number of\nextensions ideas is less than a handful (given we find people to do it).\nYet without a clearer interface not only is the effort reproduced for\neach project, but different projects potentially cludge (as happens with\nRoland Schregle's photon-map and Christopher Reinhart's yearly\nsimulations). Furthermore, not without reason we may expect advances in\ncommercial programs, which may (I have to grasp for the heart pills...)\nforce us someday to use a closed-software, non-tracable package just\nbecause Radiance can't do what the client expects and gets from other\npackages.\n\n\nHowever, that interface is not changed solely by prototyping functions.\nDoing more than that risks new bugs- well, we'll get them out. Maybe\nthere's a core structure between just-prototypes and a full rewrite ?\n\n\n\n\n- Moving 'legacy' programs into a seperate package- fine.\n- step-by-step conversion- yeap. \n\n\n-Peter\n\n\n\n\n pab-opto, Freiburg, Germany, www.pab-opto.de\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2002-June/000299.html).</sup>", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "June 09, 2002 at 11:52PM", "created_by": "Peter_Apian-Bennewitz", "parent_id": "radiance-general_000298", "id": "radiance-general_000299"}