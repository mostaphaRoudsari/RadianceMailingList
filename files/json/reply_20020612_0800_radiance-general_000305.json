{"body": "Randolph Fritz wrote:\n\n\n> [Copied to both lists.  Until a few more people--including Greg\n> Ward!--sign up for radiance-dev I don't feel right about using it\n> exclusively for this discussion.]\n\n\nI din't even know that list existed. When was it created?\nI'm also posting to both for the moment, but I'd suggest that we\nmove this discussion over completely from now on.\n\n\n\n\n> How do people feel about Cygwin/gcc\n> <http://sources.redhat.com/cygwin/> under Windows?  I don't know the\n> package, and it probably still needs an MS compiler for the header\n> files, but otherwise we can use the familiar Unix tools on Windows.  I\n> have, however, only a bit of experience with cygwin, and don't how\n> well it works for a large project.\n\n\nCygwin is a wonderful hacker's tool, but I wouldn't recommend it\nto the typical Windows user. I think the MS header files can be\ndownloaded somewhere, so that wouldn't necessarily be a problem.\nBut there are still a lot of issues that require custom coding\nfor Windows, as cygwin doesn't support all the unix APIs, and\nsome are only supported in relatively hackish ways. Apart from\nthat, as much as I hate to admit it, the MS compilers still\noptimize a lot better than any gcc version I have seen so far.\n\n\nThis just reminds me of another problem that we'll have to solve\nin this context. Since Windows doesn't support NFS file locking\n(and neither did cygwin, last time I looked), we'll need to find\na better solution for concurrent access to ambient files. I can\nthink of two portable ways to do this: Either we invent a file\nbased locking mechanism, or we establish a seperate server\nprocess that accepts network store and retreival requests by the\nactual simulation processes. The latter would be more technicall\ninvolved, but probably a lot more robust. Any thoughts?\n\n\n\n\n> Georg Mischler wrote:\n> > It could also be interesting to consider another implementation\n> > framework for all the helper programs circulating around the actual\n> > Radiance core. Some of the csh scripts have been rewritten in C for\n> > Windows, with limited flexibility and robustness. My personal\n> > favourite language for this kind of task would be Python (with some\n> > parts already existing).\n>\n> I like this very much, but am a bit concerned about requiring all\n> users to install Python libraries.  Also, some users will want other\n> scripting languages; TCL, Perl, and (gack!) Visual Basic are likely\n> candidates.  Ummm...probably Mathematica.\n\n\nPython is trivial to install on every supported platform (which\nare a lot more than even Radiance supports). Most unix systems\nnowadays come with a preinstalled Python interpreter, (plus Tcl\nand Perl, of course). The reason why I prefer Python in this\ncontext is that it can be easily understood even by normal users\n(in contrast to Perl), and that it has a very robust and stable\nfeature set, so that programs usually don't break with the next\nrelease (in contrast to Tcl, as Gregs heroic efforts with trad\nhave demonstrated).\n\n\nOn top of that, a large body of related code in Python already\nexists, parts of which may eventually be released as Open Source\nas well (tough I can't make any promises just yet). In any case,\nthis is more a general thought for the future than an immediate\nrequirement. The basic core of Radiance should probably continue\nto work without too many external dependencies. But a second\nlayer of tools could profit a lot of some improved flexibility\nand portability.\n\n\nAnyone who wants to use proprietary stuff like VB is always free\nto do so, but I'm not sure about the chances of such code to be\nincluded in the core distribution of Radiance even in the long run.\n\n\n\n\n> Autoconf...scares me.  It's one of the most difficult scripting\n> languages and it actively encourages #ifdef-laden code.  Personally, I\n> favor the Kernighan and Pike (*The Practice of Programming*) approach\n> to portability; write the base code portably, and bottle up the OS\n> dependencies in separate libraries and APIs.\n\n\nI don't think that those two approaches are mutually exclusive.\nSome more complex dependencies certainly belong into seperate\nmodules with a thick layer of barbed wire around them. But there\nare also many other small variations and bugs among different\nsystems with no clear borderlines between vendors, kernel and\nlibrary versions, etc. Keeping track of those without a tool like\nautoconf is a real pain for both developers and users.\n\n\nHave you had a look at the makeall script lately? This is\ncomplexity that the user has to handle when something goes wrong.\nAutoconf is generally a one-time effort, that only needs to be\nhandled by one or two of the developers. Once that is done, the\ntrusty mantra of \"./configure; make; make install\" just magically\nworks on pretty much any system, whether its specific quirks have\nbeen cataloged before or not. Not every user can grant Greg ssh\naccess to solve compile problems, and Greg probably wouldn't have\nthe time to do this for every user anyway.\n\n\nThe Radiance sources are currently littered with hundreds of\ninstances of preprocessor symbols referencing more than a dozen\nindividual operating systems. This has almost worked yesterday,\nit's already breaking today with very current systems, and it's\ngaranteed to break in the future, unless someone constantly keeps\na list of all the systems out there and their specific bugs and\nother nonstandard behaviour. I will chose #ifdefs of the form\n\"HAS_<feature>\" any time, against the alternative of multiple\nnested OS specific conditionals in the same place.\n\n\n\n\n> Peter Apian-Bennewitz wrote:\n> > However, that interface is not changed solely by prototyping functions.\n> > Doing more than that risks new bugs- well, we'll get them out. Maybe\n> > there's a core structure between just-prototypes and a full rewrite ?\n>\n> Hmmmm...Radiance plug-ins.  Most Unices support some version of\n> dynamic loading these days.  Windows does.  I don't think Plan 9 does...\n\n\nPrototypes and the elimination of global variables will make the\n*internal* interfaces of Radiance a lot clearer and more obvious\nthan they are right now. After that, it will be much easier to\nisolate those parts that need to be changed to better accomodate\nany present or future extensions, and the risk of breaking all\nthe rest when doing so will become much smaller.\n\n\nThe default compile and installation should probably be designed\nfor static linking, but on most systems it will be relatively\neasy to generate dynamic options from there. Creating dynamically\nloadable extension modules for Python from existing C libraries\nis almost trivial, btw. (the image converter module in Rayfront\nis just one practical example involving Radiance code).\n\n\n\n\n> Now, I'm interested in ways to standardize the GUI API.  In my\n> opinion, it would be useful if we could customize ximage and rview to\n> native OS conventions easily, perhaps by providing an OS specific\n> library.  It might also be useful to embed the core rendering tools in\n> a dynamic loading environment.  But, again, I don't know what it would\n> take.\n\n\nYou're not the first one to think that thought.\n\n\nIn the end it won't really take a lot of effort, but only after\nthe above steps have been taken. Despite all its shortcomings,\nthe Windows version of rview already points into the right\ndirection here, by demonstrating approximately where the\ninterfaces between the simulation core and a display framework\nshould be placed. Unfortunately, the existing implementation is a\nhorrible mess, due to the difficulties of integrating the current\nRadiance code on one hand, and some other obstacles the original\ndevelopers were facing on the other. I realize that most of you\nhaven't seen those sources yet, so you'll simply have to take my\nword for it... ;)\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch.com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2002-June/000305.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "June 12, 2002 at 08:00AM", "created_by": "Georg_Mischler", "parent_id": "radiance-general_000303", "id": "radiance-general_000305"}