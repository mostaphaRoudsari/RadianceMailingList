{"body": "Charles Ehrlich wrote:\n\n\n> Samba works multi-directionally from Unix client\n> to Windows server, Unix client to Unix Samba server, Windows client to Unix\n> Samba server, and of course, Windows client to Windows server. We tested\n> each of these configurations. The kernel of the server cpu will know about\n> the file lock. You ask a good question about what happens when an NFS lock\n> tries to get ahold of the file? I dunno. I presume the lock fails or hangs\n> the client CPU like NFS usually does. :-)\n\n\nI have been using Samba for years, and know it's a reliable and\nrobust piece of software. In fact, Samba is one of the main reasons\nwhy Microsoft started to run PR campaigns against Linux (and unix\nin general), after it could be shown that the \"fastest Windows\nserver in existence\" was actually an sgi box...\n\n\n\n\n> If we're going to implement a custom file locking mechanism, then why\n> reinvent the wheel? There have got to be several different open source file\n> locking systems. What about PovRay? They've stolen enough from\n> Radiance...perhaps it our turn to collect. :-) The Samba mods are just a\n> no-brainer. About 30 lines of code max.\n\n\nI would like to avoid reinventing the wheel just as much as the\nnext guy, but I also don't want to install a monster truck wheel\non a Ferrari (nor the other way round). Most portable locking\nimplementations in Open Source software seem to be file based,\nwhich is enough reason for checking out why. It's also clear that\nlocks that are managed by the OS have the potential to be more\nreliable, but that generally comes at the price of portability.\n\n\nIf it turns out that Samba really bridges that portability gap,\nthen I'll be the last one to stand in its way. I just want to\nmake sure that it does so beyond any doubt, even by looking at\nthe code, if I have to. If we're lucky, then we can change Gregs\n\"if you want to do parallel rendering, you need to install unix\"\ninto a \"if you want to do parallel rendering on both unix and\nWindows at the same time, use Samba\". Since Samba aleady is the\nmost popular connectivity solution between the two, I think we\ncould live with this restriction.\n\n\nIf I understand the principle correctly, then that would mean\nto simply use the standard Windows locking APIs, which are\nimplemented by the OS for local files, and by Samba when\naccessing unix based drives. This would also mean that locking\nwithin either world alone would work by default.\n\n\nSpeaking of that, can anyone authoritatively confirm or reject\nthe theory that current Linux systems still make problems sharing\nlocks with Irix? I think that there has gone some work into the\nlocking code of the more current Linux kernels, but I don't know\nfor sure if that really fixed all the issues.\n\n\n\n\n-schorsch\n\n\nPS:\nChas (and possibly others), could you try to make a habit of not\nincluding *all* of the messages you're replying to? Just so we\ndon't clog the archives with multiple full copies of everything.\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch.com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2002-June/000012.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "June 14, 2002 at 06:49PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000000", "id": "radiance-dev_000012"}