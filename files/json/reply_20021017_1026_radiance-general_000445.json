{"body": "Lars O. Grobe wrote:\n>\n> I use a makefile to create a lot of frozen octrees using colorpict \n> modifiers\n> (via aliases). These octrees are than used as instances to build a \n> part of a\n> building, which is than transformed into a frozen octree. So  I want \n> to get\n> frozen octrees for all major parts of my scene which should be useable \n> on\n> their own, without dependencies on other files.\n>\n> My makefile than runs rpict on the octree, and I get a nice image.... \n> but I\n> don't see any image mappings.... I also don't get any error or \n> warnings (I\n> was used to get \"image xxx uses yyy kB\" when I used image map patterns \n> so\n> far).\n>\n> Are the image maps included in a frozen octree? Do I need any special \n> switch\n> in rpict to make colorpicts visible (I use just vp vd at the moment)? \n> Is\n> there anything special when using alias-modifiers in instances (i get \n> my\n> geometry from dxf2rad, so for each object, I define a file object.mat \n> which\n> contains just the aliases refering to material definitions in a global \n> file\n> project.mat).\n>\n> Thank You, CU, Lars.\n\n\nIn general, it is a good idea to make the picture references local when \nyou create your model (or in a local subdirectory), then move/copy the \npictures/subdirectories along with the frozen octree to a library \nlocation for convenient access.  As long as this library location is \nincluded in your RAYPATH environment variable, Radiance will be able to \nfind both the frozen octree and any pictures it refers to in that \ndirectory.\n\n\nThis same trick works for scene files -- you can refer to oft-used \nscene descriptions that exist in your private (or public) library \ndirectory, and these scene descriptions can include any geometry they \nneed in their local directory or subdirectories via !xform commands \nthey contain.  This was accomplished by a change that came out with \n3.0, where xform searches directories in the RAYPATH variable rather \nthan simply looking in the process' local directory.  It's actually a \nhuge advantage to the way it used to work, but you have to be aware of \nit!\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2002-October/000445.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "October 17, 2002 at 10:26AM", "created_by": "Greg_Ward", "parent_id": "radiance-general_000440", "id": "radiance-general_000445"}