{"body": "Hi Gurneet,\n\n\nThere really needs to be a FAQ on generating animation paths.  Peter \nApian-Bennewitz wrote a program called rshow that may be used to \ninteractively walk through a space using OpenGL rendering, and has \noptions for storing keyframes and generating view sequences, which may \nthen be rendered in batch mode or using ranimate.\n\n\nI often choose keyframes myself in rview (or the new rholo program), \nutilizing the \"view\" or 'V' commands to output views at desired points \nalong the animation path.  These may then be constructed into a path \nusing a spline generator or the spline.cal program that may be found in \nray/src/cal/cal in the radiance distribution.  You take the views \noutput by rview or rholo, which look like so (these are not commands -- \nthey are views stored by rview into a file):\n\n\nrview -vtv -vp 5.46 15.5 4.2 -vd 0.91674 0.347628 -0.196833 -vu 0 0 1 \n-vh 60 -vv 49 -vs 0 -vl 0 -t 1\nrview -vtv -vp 10.5 15.6 4.2 -vd 0.9896 -0.1408 -0.0294619 -vu 0 0 1 \n-vh 60 -vv 49 -vs 0 -vl 0 -t 2\nrview -vtv -vp 20.4 13.7 4.2 -vd 0.680414 -0.680414 -0.272166 -vu 0 0 1 \n-vh 60 -vv 49 -vs 0 -vl 0 -t 4\n\n\nThe -t options at the end were added manually, indicating the expected \ndistance (in seconds) between the previous frame and this one.  These \noptions may be added within rview may appending them to the view \ncommand, like so:\n\n\n: view key.vf -t 2\n\n\nOnce you have the above file (key.vf), you can create a format file for \nrcalc to extract the values you are interested in, and pass these to \nthe tabfunc program to get them into the form you need for spline.cal.  \nCreate a file called \"key.fmt\" that contains the following single line:\n\n\nrview -vtv -vp ${px} ${py} ${pz} -vd ${dx} ${dy} ${dz} -vu 0 0 1 -vh \n${vh} -vv ${vv} -vs 0 -vl 0 -t ${t}\n\n\nThen, run the following command to extract the desired values from your \nkeyframe file and put them into a form that may be passed to rcalc as a \n.cal file:\n\n\n% rcalc -i key.fmt -e \n'$1=recno;$2=px;$3=py;$4=pz;$5=dx;$6=dy;$7=dz;$8=vh;$9=vv;$10=t' key.vf \n\\\n\t| tabfunc Px Py Pz Dx Dy Dz H V T > key.cal\n\n\nThis new file, \"key.cal\", may then be used with rcalc to generate a set \nof desired inbetween views, spaced evenly in time.  If your total sum \nof times is 30 seconds, for example, and you want to render 10 \nframes/sec, you might use the following command to generate the \nindividual frame views for ranimate:\n\n\n% cnt 300 | rcalc -o key.fmt -f key.cal -f spline.cal -e 't=$1/10' \\\n\t-e \n'px=s(Px);py=s(Py);pz=s(Pz);dx=s(Dx);dy=s(Dy);dz=s(Dz);vh=s(H);vv=s(V)' \n > anim.vf\n\n\nIn this command, I have used the same \"key.fmt\" file to generate the \nanimation views, but you may want to produce something slightly \ndifferent, which had only the changing view point and direction, for \nexample.  The above sequence allows you to vary the view position, \ndirection, and zoom, but does not permit the up vector to change.  This \nis rarely needed, but if you do have a tilting camera, you can always \nmodify the commands to include this information.\n\n\nI hope this is enough to get you started.  Another excellent place to \nlook for tips is Peter's chapter on animation in \"Rendering with \nRadiance.\"\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2002-November/000496.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "November 27, 2002 at 10:04AM", "created_by": "Greg_Ward", "parent_id": "radiance-general_000491", "id": "radiance-general_000496"}