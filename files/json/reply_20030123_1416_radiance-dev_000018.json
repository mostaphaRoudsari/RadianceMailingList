{"body": "--------------040204060307080608010706\nContent-Type: text/plain; charset=us-ascii; format=flowed\nContent-Transfer-Encoding: 7bit\n\n\nHi Georg, Carsten, Peter, Greg and others,\n\n\nAs in my other post, sorry to be weighing in a week late. In any event, \nwhat is the current summary of  ways to develop distributed rendering \nfor Radiance? Based on my understanding of the topic, it seems that \nthere are several approaches that have been put on the table:\n\n\n    * file based locking:\n          * NFS - as currently implemented and with all the NFS related\n            issues\n          * Samba - I recall that Georg had mentioned this as a possibly\n            more reliable mechanism\n          * Custom - homegrown solution for locking files\n    * client/server - presumably a socket based client server mechanism\n      but not relying on pvm/mpi\n    * pvm/mpi:\n          * LBNL - is this pvm or mpi and is it available to the open\n            source development team?\n          * Carsten - has done something with pvm, is there more\n            information description?\n          * Roland Koholka, Heinz Mayer, Alois Goller (\"MPI-parallelized\n            Radiance on SGI CoW and SMP\" - Parallel Computation, 4th\n            International ACPC Conference, Salzburg, Austria, LNCS 1557,\n            pages 549- 558, February 1999.) - I do have the modified\n            code (ambient.c, rmain.c, and rpict.c) for this that I\n            downloaded at somepoint long ago if anyone is interested as\n            well as a pdf of the paper. \n\n\nI guess the very general question that I would have is what is the best \nsolution architecturally for Radiance:\n\n\n    * Is it easiest to develop a file based locking solution, possibly\n      around samba, which is a robust mechanism based on what I have read?\n    * What are the implementation issues relating to doing a\n      client/server model vs. something like pvm/mpi, how much of the\n      guts of radiance need to be worked on for either option, what is\n      most robust, extensible and os dependant/independant\n\n\nIf it is worth it to the development team, I would be happy to dig back \ninto the archives and try to put together a fuller summary of the \nvarious options that have been put on the table. Let me know.\n\n\nRegards,\n\n\n-Jack de Valpine\n\n\nGeorg Mischler wrote:\n\n\n>Carsten Bauer wrote:\n>\n>>there's one master distributing the blocks, the workers\n>>which do the tracing, a collector receiving finished scanlines (and in\n>>the end  puzzles everything together for the big picture) and of course\n>>the ambient slave, who receives amb. values and broadcasts them to all\n>>the other workers. This ambient slave alone has access to the file for\n>>storing them. Only at the beginning of a new run the workers can access\n>>an already existing ambfile for reading in values.\n>>\n>\n>\n>In a thread on the dev list from Wed, 12 Jun 2002\n>http://www.radiance-online.org/pipermail/radiance-dev/2002-June/000001.html\n>I said the following, which was received with quite a bit\n>of scepticism:\n>\n>   Since Windows doesn't support NFS file locking\n>  (and neither did cygwin, last time I looked), we'll need to find\n>  a better solution for concurrent access to ambient files. I can\n>  think of two portable ways to do this: Either we invent a file\n>  based locking mechanism, or we establish a seperate server\n>  process that accepts network store and retreival requests by the\n>  actual simulation processes. The latter would be more technicall\n>  involved, but probably a lot more robust. Any thoughts?\n>\n>And now, half a year later, you tell us that you already have such\n>a server implemented? Only that you call it \"slave\"... ;)\n>Does your \"slave\" require PVM? If yes, then that would probably make\n>it platform independent, otherwise you'd have to tell us some more\n>details. Personally, I think that this alone would be worth adding\n>to the ANSified Radiance core, with the management stuff up for\n>discussion.\n>\n>But maybe we can now really move the details to the dev list. I'm\n>cross-posting this, so there's no need to reply on the general list.\n>\n>\n>-schorsch\n>\n\n\n\n\n#\tJohn E. de Valpine\n#\tpresident\n#\n#\tvisarc incorporated\n#\thttp://www.visarc.com\n#\n#\tchanneling technology for superior design and construction\n\n\n\n\n\n\n--------------040204060307080608010706\nContent-Type: text/html; charset=us-ascii\nContent-Transfer-Encoding: 7bit\n\n\n<html>\n<head>\n</head>\n<body>\nHi Georg, Carsten, Peter, Greg and others,<br>\n<br>\nAs in my other post, sorry to be weighing in a week late. In any event, what\nis the current summary of&nbsp; ways to develop distributed rendering for Radiance?\nBased on my understanding of the topic, it seems that there are several approaches\nthat have been put on the table:<br>\n<ul>\n  <li>file based locking:</li>\n  <ul>\n    <li>NFS - as currently implemented and with all the NFS related issues</li>\n    <li>Samba - I recall that Georg had mentioned this as a possibly more\nreliable mechanism</li>\n    <li>Custom - homegrown solution for locking files <br>\n    </li>\n  </ul>\n  <li>client/server - presumably a socket based client server mechanism but\nnot relying on pvm/mpi</li>\n  <li>pvm/mpi:</li>\n  <ul>\n    <li>LBNL - is this pvm or mpi and is it available to the open source\ndevelopment team?</li>\n    <li>Carsten - has done something with pvm, is there more information\ndescription?</li>\n    <li>Roland Koholka, Heinz Mayer, Alois Goller (\"MPI-parallelized Radiance\non SGI CoW and SMP\" - Parallel Computation, 4th International ACPC Conference,\nSalzburg, Austria, LNCS 1557, pages 549- 558, February 1999.) - I do have\nthe modified code (ambient.c, rmain.c, and rpict.c) for this that I downloaded\nat somepoint long ago if anyone is interested as well as a pdf of the paper.&nbsp;</li>\n  </ul>\n</ul>\nI guess the very general question that I would have is what is the best solution\narchitecturally for Radiance:<br>\n<ul>\n  <li>Is it easiest to develop a file based locking solution, possibly around\nsamba, which is a robust mechanism based on what I have read?</li>\n  <li>What are the implementation issues relating to doing a client/server\nmodel vs. something like pvm/mpi, how much of the guts of radiance need to\nbe worked on for either option, what is most robust, extensible and os dependant/independant</li>\n</ul>\nIf it is worth it to the development team, I would be happy to dig back into\nthe archives and try to put together a fuller summary of the various options\nthat have been put on the table. Let me know.<br>\n<br>\nRegards,<br>\n<br>\n-Jack de Valpine<br>\n<br>\nGeorg Mischler wrote:<br>\n<blockquote type=\"cite\" cite=\"mid:Pine.BSF.4.44.0301180640540.90303-100000@emancholl.pair.com\">\n  <pre wrap=\"\">Carsten Bauer wrote:<br><br></pre>\n  <blockquote type=\"cite\">\n    <pre wrap=\"\">there's one master distributing the blocks, the workers<br>which do the tracing, a collector receiving finished scanlines (and in<br>the end  puzzles everything together for the big picture) and of course<br>the ambient slave, who receives amb. values and broadcasts them to all<br>the other workers. This ambient slave alone has access to the file for<br>storing them. Only at the beginning of a new run the workers can access<br>an already existing ambfile for reading in values.<br></pre>\n    </blockquote>\n    <pre wrap=\"\"><!----><br><br>In a thread on the dev list from Wed, 12 Jun 2002<br><a class=\"moz-txt-link-freetext\" href=\"http://www.radiance-online.org/pipermail/radiance-dev/2002-June/000001.html\">http://www.radiance-online.org/pipermail/radiance-dev/2002-June/000001.html</a><br>I said the following, which was received with quite a bit<br>of scepticism:<br><br>   Since Windows doesn't support NFS file locking<br>  (and neither did cygwin, last time I looked), we'll need to find<br>  a better solution for concurrent access to ambient files. I can<br>  think of two portable ways to do this: Either we invent a file<br>  based locking mechanism, or we establish a seperate server<br>  process that accepts network store and retreival requests by the<br>  actual simulation processes. The latter would be more technicall<br>  involved, but probably a lot more robust. Any thoughts?<br><br>And now, half a year later, you tell us that you already have such<br>a server implemented? O\nnly that you call it \"slave\"... ;)<br>Does your \"slave\" require PVM? If yes, then that would probably make<br>it platform independent, otherwise you'd have to tell us some more<br>details. Personally, I think that this alone would be worth adding<br>to the ANSified Radiance core, with the management stuff up for<br>discussion.<br><br>But maybe we can now really move the details to the dev list. I'm<br>cross-posting this, so there's no need to reply on the general list.<br><br><br>-schorsch<br><br></pre>\n    </blockquote>\n    <br>\n    <pre class=\"moz-signature\" cols=\"$mailwrapcol\">-- \n#\tJohn E. de Valpine\n#\tpresident\n#\n#\tvisarc incorporated\n#\t<a class=\"moz-txt-link-freetext\" href=\"http://www.visarc.com\">http://www.visarc.com</a>\n#\n#\tchanneling technology for superior design and construction</pre>\n    <br>\n    </body>\n    </html>\n\n\n--------------040204060307080608010706--\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-January/000018.html).</sup>", "attachments": [], "created_by_name": "Jack de Valpine", "created_at": "January 23, 2003 at 02:16PM", "created_by": "Jack_de_Valpine", "parent_id": "radiance-dev_000016", "id": "radiance-dev_000018"}