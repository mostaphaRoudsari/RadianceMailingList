{"body": "I'm a little confused as to which list to reply to on this subject, as \nthings have been sent to both lists.  So, I'll send my reply to both \nplaces...\n\n\nI have been working on an ANSI-C version of Radiance, which is mostly \nready at this point.  The library files in src/common and the rendering \ncode in src/rt now uses prototypes for all its functions, and I have \ncollected the rendering code into a new library that may be linked to \nother applications.  I have also added an interface to this library \nthat provides sequential and parallel (multiprocessor -- not \ndistributed) ray-tracing.  Using this interface, I have developed a new \nanimation program, called \"ranimove\", which in a single process \nperforms object and camera animation with image-based rendering \n(similar to pinterp but without interpolating frames) and optimized, \nprogressive rendering of animations with task focus.  All rendering, \nfiltering, etc. is handled in a single process.  Only xform and oconv \nare executed to update the scene octree at each frame.\n\n\nThat's mostly an aside, but I wanted to mention it as background for \nwhat I'm about to say on ambient value sharing.  The code in rholo \nworks similarly to the code in rpiece and ranimate, which use separate \ninvocations of rtrace or rpict to do their ray calculations.  The code \nin the new ranimove program is different in the sense that the \nrendering happens in the same process (or identical children of the \nsame process), but ambient value sharing is the same.\n\n\nThe main issue I have with using Samba or MPI or PVM or whatever you \nwant to use is the difficulty of requiring or including a third-party \nlibrary with Radiance.  If you require that the user have this software \nin order to install Radiance on their platform, that can be an \ninsurmountable burden for some people, and an inconvenience at the very \nleast for others.  If you include the library with Radiance, then you \ninvite at least three problems:\n\n\n\t1) The user may already have a version of the same library.\n\t2) The library may be updated asynchronously by its author, causing \nincompatibilities.\n\t3) The library may not be portable to all the systems Radiance is.\n\n\nFor this reason, I have only made rare exceptions to the \"no library \ndependencies\" rule in Radiance.  One is for TIFF import/export, where I \nhave the very well-established and stable TIFF library by Sam Leffler \nto rely on.  Another is X11, which is almost ubiquitous on Unix.  The \nthird is for OpenGL, which is supported on most platforms, and may be \nexcluded from compilation without too much difficulty.  I do not \ninclude an OpenGL library with Radiance.\n\n\nIf we want to share ambient values without using the NFS lock manager, \nwe either have to employ some third-party library (Samba, MPI, PVM, \nEIEIO, whatever), or we need to find a way to do it that is universally \nsupported on Unix.\n\n\nUnfortunately, the only universally supported interprocess \ncommunication call for Unix (as far as I know) is the socketpair(2) \ncall.  This is just about as nasty as any system call I've ever \nencountered, which is why I've avoided it.  It requires all sorts of \nknowledge about the network to link up with another process somewhere, \nand I've never been able to fathom the intracacies to making it work.  \n(If anyone has some simple example code, please share it with me.)  \nAlso, there is no hope of porting this to Windows.\n\n\nThis brings us back to my original question when this thread was \nstarted sometime last Spring (I think) -- is there a stable, portable \nlibrary for sharing process data across the network.  I thought the \nconsensus was that Samba was the best.  Can it be distributed and \ncompiled, or is it readily available for all platforms?  How much of a \nburden is it to users to install this along with Radiance?  Should we \noffer it only as an option for people who want to do parallel rendering \non platforms with unreliable NFS lock managers, or should we make it a \nrequirement for everyone on every platform?\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-January/000020.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "January 24, 2003 at 01:55PM", "created_by": "Greg_Ward", "parent_id": "radiance-dev_000016", "id": "radiance-dev_000020"}