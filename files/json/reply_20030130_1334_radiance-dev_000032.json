{"body": "On Thursday, January 30, 2003, at 12:34  PM, Georg Mischler wrote:\n\n\n> Randolph Fritz wrote:\n>\n>> Would a broadcast solution be better, perhaps?  Some small server that\n>> just repeatedly sends out the ambient file?  Or something a bit\n>> fancier that doesn't involve TCP connections?\n>\n>\n> In theory, that sounds like a nice idea, but would require the\n> clients to accept data asynchronously (eg. while they're busy\n> with other calculations).  I'd prefer to keep the tricky parts\n> concentrated on the server side, so that the clients are only\n> confronted with new data when they explicitly ask for it.\n\n\nHave a server app which makes broadcasts on a regular schedule--every \n100 ms or so and a very small client-side app which receives and stores \nthe broadcasts.\n\n\n> The other thing is that broadcasts are only possible with UDP,\n> which doesn't garantee that the data is actually received by\n> anyone. If we want to make sure that all processes really have\n> the full set at any time, then there's no way around TCP.\n\n\nYou're just not sufficiently devious...when a client broadcasts a new \nvalue it marks it \"new.\"  It waits to hear the value back from the \nwatching server.  If it doesn't hear it in, say, 500 ms, it sends it \nagain.\n\n\nI'd like to avoid TCP; it is a very heavy protocol, and its use will \nset a limit on the number of clients--that's why NFS is not primarily \nTCP-based.\n\n\nHow many clients are we talking about, and how much data?\n\n\nRandolph, knew that networking background had to be good for something\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-January/000032.html).</sup>", "attachments": [], "created_by_name": "Randolph Fritz", "created_at": "January 30, 2003 at 01:34PM", "created_by": "Randolph_Fritz", "parent_id": "radiance-dev_000016", "id": "radiance-dev_000032"}