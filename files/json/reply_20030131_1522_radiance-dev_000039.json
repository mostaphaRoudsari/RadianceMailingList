{"body": "Greg Ward wrote:\n\n\n> This whole conversation is getting way too complicated for my tastes.\n> Can't we find a simpler solution?  The whole client/server model sounds\n> really nasty --\n\n\nAt this time I'm still convinced that it's the most reliable and\nportable way to solve the problem at hand.\n\n\n\n\n> who starts the server?\n\n\nWho starts simulations on remote systems as it is now?\nAs long as your processes all run on the same machine, no ambient\nserver is necessary, and eg. rpiece will continue to work just\nfine. After all, we're not going to take the current file sharing\nfunctionality away. We'll just experiment with additional options\nthat are less vulnerable to OS bugs and other platform issues.\n\n\nOnce you run jobs on more than one machine, you need to start\nthem manually (or through scripts/other tools) anyway, even if\nyou use rpiece. So on that front, nothing will really change.\n\n\nThinking of it, the server might also be useful to coordinate\nthe rpiece processes, removing yet another NFS lock dependency.\n\n\n\n\n> What happens if the server dies or gets overwhelmed?\n\n\nProbably the same that happens now when the NFS server reboots\nor the network clogs. The individual simulation processes will\nstall, until the server is available again.\n\n\n\n\n> How portable will it be between architectures?\n> All these things make me nervous.\n\n\nSockets are fully portable across all platforms that Radiance\ncurrently supports, and then some.\n\n\n\n\n> What if we try to stay closer to the current model, just modifying it\n> so it doesn't depend on an NFS lock manager.  Here's what I suggest:\n>\n> 1) Instead of calling fcntl with F_SETLKW, each ambient process\n> periodically checks for the existence of a lock file on the NFS\n> filesystem (named after the ambient file perhaps with an added suffix\n> \".lok\").\n\n\nAnd you think sockets are nasty?\n\n\nOne of the few things that I know about lockfiles is that they're\nnot exactly simple to get right.\n\n\n- What happens if the lockfile owner gets killed?\n  Will the others be able to figure out that the lock file is\n  stale and override it? Or will that require human intervention?\n  I think that NFS locks get purged when the owner dies, so we\n  might lose quite some convenience here.\n\n\n- What happens process b checks for the file after process a\n  does, but before process a actually creates the new file?\n\n\nThere's no way to make checking and creating an atomic operation,\nso that this situation must be handled explicitly and gracefully.\nIn a big simulation, it may well be that a dozen processes are\ncompeting for the lock file several times a second for hours or\neven days. Race conditions *will* happen.\n\n\nI'm not saying that it can't be done. But in the best case, I'd\nexpect a foolprof solution to be similarly involved and complex,\nbut less portable as using a server process.\n\n\nSince I'm familiar with client/server concepts, I'm willing to\nimplement one. If anyone volunteers to design a reliable file\nbased solution, I'm certainly not objecting to having that\navailable as an alternative option. In fact, I'd be happy to see\nas many synchronization methods as possible implemented, so we\ncan test them all. And after we know what works, we can leave the\nbest two or three in the core distribution, for the user to\nselect the one that is most appropriate in their environment.\n\n\n\n\n> P.S.  I took some flack for my apparent lack of knowledge regarding C\n> pointer arithmetic after the last post.  So I screwed up!  At least I\n> eventually figured out that I screwed up -- don't I get some credit for\n> that?  I didn't think the error was so obvious, myself.\n\n\nIt was certainly one of a rare breed. Not many people dare to\njuggle with pointers as you do... ;)\n\n\n\n\n>   I didn't go into all\n> the various modules and programs and make sure that the local functions\n> all had prototypes as well.\n\n\nThat's probably the way I would have started as well. I didn't\nreally expect you to declare victory so soon. Good to know that\nyou're not superhuman either... ;)\n\n\n\n\n>  If someone wants to go in and add all the correct\n> parameter lists and casts everywhere, they're welcomed to do so once we\n> get CVS up and running.\n\n\nCompiling on Windows (at least with VC) is a pain without\nprototypes, as the real errors get drowned in all the warnings.\nSo I may end up converting them along the way when trying to\nestablish cross-platform compatibility.\n\n\n\n\n> I remember now, I did find one bug during ANSI-fication\n\n\nOne down, n to go... ;)\nIf I understand you correctly, then you only converted a few\npercent of the code, so that finding more than one or two would\nhave been quite a surprise.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-January/000039.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "January 31, 2003 at 03:22PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000016", "id": "radiance-dev_000039"}