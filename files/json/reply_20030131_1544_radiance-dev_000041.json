{"body": "On Fri, Jan 31, 2003 at 09:10:18AM -0800, Greg Ward wrote:\n> \n> This whole conversation is getting way too complicated for my tastes.  \n> Can't we find a simpler solution?  The whole client/server model sounds \n> really nasty -- who starts the server?  What happens if the server dies \n> or gets overwhelmed?  How portable will it be between architectures?  \n> All these things make me nervous.\n> \n\n\n1. The operator does have to start the server.\n\n\n2. The proposed servers are very very simple, and leverage existing\n   technology.  TCP and UDP are well-defined, and so are sockets.\n   There's some file sharing technology on every server.\n\n\n   In my proposal, I specified a watchdog process for the server\n   process; with fork()/exec() that's simple on any Unix-derived\n   system--I believe it will also work under Cygwin.  For MS-Windows\n   an alternate solution would have to be developed, but since the\n   proposed servers are very simple--they just replace the current\n   locking mechanism with a single writer process--I think most of the\n   code can be common.\n\n\n3. All the protcols we're discussing are very very very standard and\n   portable.\n\n\n> 1) Instead of calling fcntl with F_SETLKW, each ambient process \n> periodically checks for the existence of a lock file on the NFS \n> filesystem (named after the ambient file perhaps with an added suffix \n> \".lok\").\n\n\nI'm not sure that mechanism can be made atomic over NFS--need to\ncheck.  Bet it isn't on MS-Windows at all.  :-(\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-January/000041.html).</sup>", "attachments": [], "created_by_name": "Randolph Fritz", "created_at": "January 31, 2003 at 03:44PM", "created_by": "Randolph_Fritz", "parent_id": "radiance-dev_000016", "id": "radiance-dev_000041"}