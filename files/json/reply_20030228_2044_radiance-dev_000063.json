{"body": "Schorsch writes:\n\n\n> So you're simply splitting up the mesh at an arbitrary point,\n> into two or more individual meshes. The positive effect will be\n> smallest for meshes that have been converted from regular grids,\n> because the faces will appear in scanning order and you'll be\n> duplicating a relatively large number of vertices along the grid\n> lines. For grids with more than 128 columns, you'll actually be\n> duplicating almost all vertices (except for the top and bottom\n> rows).\n\n\nYou are right of course.  I thought about this a bit more, and some \nsorting of the data is desirable.  An octree would make this fairly \nsimple if we generated it first.  Even if the data were organized \nperfectly, 1/4 of the vertices would still have to be replicated if I \nsubdivide (as I planned) into blocks of 256 vertices.  Larger blocks \nwould have a smaller proportion of border vertices, but would require \nmore memory for references, to the point where I may as well give up \nand use 4 bytes/reference.  The other option is to have special ways to \nindex border vertices from another block, and this may solve the \nproblem if I can \"sort it out.\"  I'll have to think on it some more, \nthat much is clear.\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-March/000063.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "February 28, 2003 at 08:44PM", "created_by": "Greg_Ward", "parent_id": "radiance-dev_000056", "id": "radiance-dev_000063"}