{"body": "Greg Ward wrote:\n\n\n> There are a few problems with N-meshes.  First, the vertices can be\n> non-planar.  Even slight non-planarity can result in visible cracks\n> under certain conditions.\n\n\nThat's obvious, and comparable to what already happens with\nnon-planar polygons now.\n\n\n\n\n> The second\n> problem with quads and especially poly's with 5 sides or more is that\n> they don't succumb easily to coordinate interpolation for smoothing and\n> (u,v) lookups.\n\n\nAh, that's an aspect I didn't think about.\n\n\n\n\n>  break everything into\n> triangles, which is what I plan to do if a quad (or higher) is\n> delivered in the .OBJ file.\n\n\nWell, if you triangulize internally, that still means we'll\naccept non-triangles as input. This is a good thing, because\nwe'll be able to use a lot of existing data unchanged. Many such\nfiles will have been exported from regular (gridded) meshes, and\nare likely to contain quadrilaterals.\n\n\nThe data producer will only have to bother with the splitting in\nthose case where the direction of the split matters.\n\n\n\n\n> I came up with a fairly simple data structure for grouping vertices and\n> faces together so each triangle takes three bytes for the three vertex\n> references.  Reference locality is based on face order in the file, and\n> we solve the boundary problem by replicating vertices when we run out\n> of room in a given group.\n\n\nSo you're simply splitting up the mesh at an arbitrary point,\ninto two or more individual meshes. The positive effect will be\nsmallest for meshes that have been converted from regular grids,\nbecause the faces will appear in scanning order and you'll be\nduplicating a relatively large number of vertices along the grid\nlines. For grids with more than 128 columns, you'll actually be\nduplicating almost all vertices (except for the top and bottom\nrows).\n\n\n\n\n> would be sensitive to depth complexity, and in the worst case when\n> densly meshed faces are aligned with the coordinate axes, we could get\n> some really large sets (thousands of faces) that we'd have to intersect\n> in a few places.\n\n\nThat could happen quite often with topographical models, or with\ncertain styles of architecture. In fact, any massive facade with\nwindows could end up like that, if I should manage to turn ACIS\nsolid modelling entities from Autocad into meshes.\n\n\n\n\n> What packages actually output Wavefront's free-form extensions?\n\n\nI have no idea. I just checked the format specs to see what I\nwould need to do with Radout and dxf2rad, and saw that it's\npossible. Another positive point is that the format seems to be\nfairly popular, because it is simple and straightforward, and has\nbeen around for a long time.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-March/000062.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "February 28, 2003 at 09:20PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000056", "id": "radiance-dev_000062"}