{"body": "--------------000704030602090005040105\nContent-Type: text/plain; charset=us-ascii; format=flowed\nContent-Transfer-Encoding: 7bit\n\n\nHi Peter, Georg and Greg,\n\n\nI'll add in my two bits here from a user perspective. As Peter has \npointed out and depending on the export tools used the material name \nthat is applied to the exported geometry description may not make a lot \nof sense from the standpoint of defining/assigning useful materials. \nThus alias's are a very handy way to map between useful/identifiable \nradiance material definitions and the (equally useful) exported \ngeometry. For example (using radout):\n\n\nin file: abc_c101.rad\n\n\nabc_c101 polygon abc_c101.0.1\n0\n0\n12    168.09402    259.4408    86\n    168.09402    259.4408    82.416666\n    169.92021    268.62171    82.416666\n    169.92021    268.62171    86\n\n\nThis geometry is exported with a basename of 'abc' that tells us what \nbuilding or model the geometry is associated with while c101 tells us \nthe uniquely assigned color associated with the autocad layer that the \nparticular geometry resides on (why export by autocad color vs. layer \nname is another discussion if anyone wants to get into it).\n\n\nTo assign a material to this geometry we would 'map' via alias a \npredefined material residing or defined in a higher level library:\n\n\nin file: mats.generic.lib\n\n\nvoid plastic foo.white\n0\n0\n5 1 1 1 0 0\n\n\nand then in a separate file that 'maps' the materials from the library \nfor the geometry relating to 'abc' we would see:\n\n\nin file: mats.abc.rad\n\n\nvoid alias abc_c101 foo.white\n\n\nSo from the standpoint of identifying the geometry in a useful manner \n(via a trace in rview for example), this is a sufficient identifier. But \nit is not so useful if I am trying to query the material assigned the \ngeometry, since I have to work backward from the file that 'maps' the \nmaterials to the actual material name (not that this is that painful of \na task).\n\n\nNow, since the can of worms is open, the problem with using aliases in \nthis way is the use of compound or modified materials. Say in mats.lib \nwe had a brightfunc defined called foo.bf , in order to apply that \nmodifier it needs to occur in mats.abc.rad:\n\n\nfoo.bf alias abc_c101 foo.white\n\n\nI understand why this is the case, but it would be really nice to able \nto have fully defined compound material definitions that can just be \napplied in the fourth position of the alias. So instead, I could do the \nfollowing:\n\n\nin mats.generic.lib\n\n\nvoid brightfunc foo.bf\n2 .5 .\n0\n0\n\n\nfoo.bf plastic foo.white\n0\n0\n5 1 1 1 0 0\n\n\nin mats.abc.rad\n\n\nvoid alias abc_c101 foo.white\n\n\nwhere now abc_c101 'inherits' both modifier and material characteristics.\n\n\nWhy???\n\n\n    * easier management of complex material definitions\n    * easier assignment of complex material definitions\n    * user does not need to know as much to utilize complex materials,\n      i.e. they do not have to understand how modifiers and materials\n      relate to each other in order to assign/map/alias a valid\n      predefined material to their geometry\n\n\nI know that there a lot of strategies for how this could be handled in \nother ways, such as intermediate scripts/interfaces for assigning \nmaterials that could equally well mask this from the user. Again, merely \nmy observations on the subject.\n\n\nRegards,\n\n\n-Jack\n\n\nGeorg Mischler wrote:\n\n\n>Peter Apian-Bennewitz wrote:\n>\n>  \n>\n>> there wouldn't be a chance to change the handling of alias in 3.5 ?\n>> Like adding 'alias' as a primitive, so rview etc. can display the\n>> material name as it was before aliasing ?\n>> It means changing stuff at some places, but would help quite a bit\n>> during material editing or selection.\n>>    \n>>\n>\n>\n>Somehow I suspect that what you really want is to use\n>descriptive IDs for the geometry primitive. If I understand your\n>problem correctly, then you seem to have troubles in certain cases\n>to identify where an offending primitive actually came from.\n>That's exactly the purpose of the object ID.\n>\n>A CAD translator should include as mush useful information in\n>that ID as possible, as well as making it as unique as possible.\n>I haven't seen all of your argumentation, but I don't think\n>that it's a good idea to \"reverse engineer\" this information\n>later within Radiance, especially if that sould involve changing\n>the behaviour of modifiers and aliases even in subtle ways.\n>\n>The problems you have with rshow rather seem to be related to\n>the fact that you are using the octree when *modifiyng* the\n>scene. I can see some of the reasons for that, but I don't\n>think that's what the octree was designed for, so it may or\n>may not be a good idea in the long run. Especially frozen\n>octrees don't look like something that should be \"edited\".\n>\n>\n>-schorsch\n>\n>  \n>\n\n\n\n\n--------------000704030602090005040105\nContent-Type: text/html; charset=us-ascii\nContent-Transfer-Encoding: 7bit\n\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n  <title></title>\n</head>\n<body>\nHi Peter, Georg and Greg,<br>\n<br>\nI'll add in my two bits here from a user perspective. As Peter has pointed\nout and depending on the export tools used the material name that is applied\nto the exported geometry description may not make a lot of sense from the\nstandpoint of defining/assigning useful materials. Thus alias's are a very\nhandy way to map between useful/identifiable radiance material definitions\nand the (equally useful) exported geometry. For example (using radout):<br>\n<br>\nin file: abc_c101.rad<br>\n<br>\nabc_c101 polygon abc_c101.0.1<br>\n0<br>\n0<br>\n12&nbsp;&nbsp;&nbsp; 168.09402&nbsp;&nbsp;&nbsp; 259.4408&nbsp;&nbsp;&nbsp; 86<br>\n&nbsp;&nbsp;&nbsp; 168.09402&nbsp;&nbsp;&nbsp; 259.4408&nbsp;&nbsp;&nbsp; 82.416666<br>\n&nbsp;&nbsp;&nbsp; 169.92021&nbsp;&nbsp;&nbsp; 268.62171&nbsp;&nbsp;&nbsp; 82.416666<br>\n&nbsp;&nbsp;&nbsp; 169.92021&nbsp;&nbsp;&nbsp; 268.62171&nbsp;&nbsp;&nbsp; 86<br>\n<br>\nThis geometry is exported with a basename of 'abc' that tells us what building\nor model the geometry is associated with while c101 tells us the uniquely\nassigned color associated with the autocad layer that the particular geometry\nresides on (why export by autocad color vs. layer name is another discussion\nif anyone wants to get into it).<br>\n<br>\nTo assign a material to this geometry we would 'map' via alias a predefined\nmaterial residing or defined in a higher level library:<br>\n<br>\nin file: mats.generic.lib<br>\n<br>\nvoid plastic foo.white<br>\n0<br>\n0<br>\n5 1 1 1 0 0<br>\n<br>\nand then in a separate file that 'maps' the materials from the library for\nthe geometry relating to 'abc' we would see:<br>\n<br>\nin file: mats.abc.rad<br>\n<br>\nvoid alias abc_c101 foo.white<br>\n<br>\nSo from the standpoint of identifying the geometry in a useful manner (via\na trace in rview for example), this is a sufficient identifier. But it is\nnot so useful if I am trying to query the material assigned the geometry,\nsince I have to work backward from the file that 'maps' the materials to\nthe actual material name (not that this is that painful of a task).<br>\n<br>\nNow, since the can of worms is open, the problem with using aliases in this\nway is the use of compound or modified materials. Say in mats.lib we had\na brightfunc defined called foo.bf , in order to apply that modifier it needs\nto occur in mats.abc.rad:<br>\n<br>\nfoo.bf alias abc_c101 foo.white<br>\n<br>\nI understand why this is the case, but it would be really nice to able to\nhave fully defined compound material definitions that can just be applied\nin the fourth position of the alias. So instead, I could do the following:<br>\n<br>\nin mats.generic.lib<br>\n<br>\nvoid brightfunc foo.bf<br>\n2 .5 .<br>\n0<br>\n0<br>\n<br>\nfoo.bf plastic foo.white<br>\n 0<br>\n 0<br>\n 5 1 1 1 0 0<br>\n<br>\nin mats.abc.rad<br>\n<br>\nvoid alias abc_c101 foo.white<br>\n<br>\nwhere now abc_c101 'inherits' both modifier and material characteristics.<br>\n<br>\nWhy??? <br>\n<ul>\n  <li>easier management of complex material definitions</li>\n  <li>easier assignment of complex material definitions</li>\n  <li>user does not need to know as much to utilize complex materials, i.e.\nthey do not have to understand how modifiers and materials relate to each\nother in order to assign/map/alias a valid predefined material to their geometry<br>\n  </li>\n</ul>\nI know that there a lot of strategies for how this could be handled in other\nways, such as intermediate scripts/interfaces for assigning materials that\ncould equally well mask this from the user. Again, merely my observations\non the subject.<br>\n<br>\nRegards,<br>\n<br>\n-Jack<br>\n<br>\nGeorg Mischler wrote:<br>\n<blockquote type=\"cite\"\n cite=\"midPine.BSF.4.44.0303060525360.99893-100000@emancholl.pair.com\">\n  <pre wrap=\"\">Peter Apian-Bennewitz wrote:\n\n\n  </pre>\n  <blockquote type=\"cite\">\n    <pre wrap=\"\"> there wouldn't be a chance to change the handling of alias in 3.5 ?\n Like adding 'alias' as a primitive, so rview etc. can display the\n material name as it was before aliasing ?\n It means changing stuff at some places, but would help quite a bit\n during material editing or selection.\n    </pre>\n  </blockquote>\n  <pre wrap=\"\"><!---->\n\n\nSomehow I suspect that what you really want is to use\ndescriptive IDs for the geometry primitive. If I understand your\nproblem correctly, then you seem to have troubles in certain cases\nto identify where an offending primitive actually came from.\nThat's exactly the purpose of the object ID.\n\n\nA CAD translator should include as mush useful information in\nthat ID as possible, as well as making it as unique as possible.\nI haven't seen all of your argumentation, but I don't think\nthat it's a good idea to \"reverse engineer\" this information\nlater within Radiance, especially if that sould involve changing\nthe behaviour of modifiers and aliases even in subtle ways.\n\n\nThe problems you have with rshow rather seem to be related to\nthe fact that you are using the octree when *modifiyng* the\nscene. I can see some of the reasons for that, but I don't\nthink that's what the octree was designed for, so it may or\nmay not be a good idea in the long run. Especially frozen\noctrees don't look like something that should be \"edited\".\n\n\n\n\n-schorsch\n\n\n  </pre>\n</blockquote>\n<br>\n</body>\n</html>\n\n\n--------------000704030602090005040105--\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-March/000073.html).</sup>", "attachments": [], "created_by_name": "Jack de Valpine", "created_at": "March 06, 2003 at 09:57AM", "created_by": "Jack_de_Valpine", "parent_id": "radiance-dev_000072", "id": "radiance-dev_000073"}