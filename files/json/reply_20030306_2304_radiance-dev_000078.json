{"body": "Greg Ward wrote:\n\n\n> Peter A-B writes:\n> > Alias are treated quite asymmetric in Radiance, as they are\n> > \"primitives\"\n> > syntactically, but filtered out directly at the time the rad file is\n> > read.\n> > Treating them as primitives and thus preserving the information they\n> > contain wouldn't break anything. To the user they would be absolutely\n> > identical. Internally the price is following one additional object\n> > lookup,\n> > which would be neglectable, as far as I guess.\n>\n> Actually, an \"alias\" primitive does not fit with the syntax of standard\n> primitives at all, in that it doesn't have a variable list of\n> arguments.  It has just one argument, which is the alias target.\n\n\nSince the syntax decoding of 'alias' is done seperately now, one could\nstill put the data in the internal standard object structure.\n\n\n> I checked the code, and it seems I was confused about the current\n> behavior -- rview actually does record and report the ID of the alias,\n> rather than the alias target.  So, in my previous e-mail, rview would\n> in fact tell me that my wall was made of \"wall_material,\" rather than\n> \"beige870.\"\n\n\nAmidst the confusion, Jack, you and me agree on that.\n\n\n> Isn't this what you're requesting?  I'm more confused than\n> ever.  The only thing that's really lost when the scene is loaded, is\n> the fact that we had an alias, rather than a modifier that happened to\n> have the same type and arguments as the target.  Is this somehow a\n> problem for you?\n\n\nWell, - my point still holds: There's no way to get both information (alias\nand orginal).\nOnly getting the aliased name doesn't tell  what material from a library of\nmaterials was chosen. E.g. this makes debugging difficult.\n\n\n>    linked alias abc_c101 foo.white\n>\n> The \"linked\" modifier gets replaced with the \"foo.bf\" modifier from the\n> \"foo.white\" target.  The only problem for backward compatibility would\n> be the unlikely case where someone had chosen \"linked\" as their\n> modifier in some scene file somewhere.  I think we can live with that\n> possibility, or we could come up with an even more obscure but still\n> sensible keyword.  (Suggestions? -- \"full\" was the other keyword that\n> occurred to me.)\n\n\ncertainly useful, IMHO\n\n\n-Peter\n\n\n\n\n pab-opto, Freiburg, Germany, www.pab-opto.de\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-March/000078.html).</sup>", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "March 06, 2003 at 11:04PM", "created_by": "Peter_Apian-Bennewitz", "parent_id": "radiance-dev_000072", "id": "radiance-dev_000078"}