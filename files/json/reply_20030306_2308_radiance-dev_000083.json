{"body": "--0-1384575238-1047020939=:42769\nContent-Type: text/plain; charset=us-ascii\n\n\n\n\nIn the interest of backward compatibility, I suggest that whatever modifications to aliases happen with a new entity type, perhaps \"alias2\".\nConsider the way Desktop Radiance uses aliases:\nin glass_mat.rad:\nvoid glass gl_01\n0 0 3 1 1 1\nvoid glass gl_02\n0 0 3 1 1 1\nin window.rad\nvoid alias glass_mat gl_01\nglass_mat polygon gl_0.1\n0 0 12 x y z ...\nvoid alias glass_mat gl_02\nglass_mat polygon gl_0.2\n0 0 12 x y z ...\nvoid alias glass_mat gl_01\nglass_mat polygon gl_03\n0 0 12 x y z ...\n\n\nWe do this because the geometry coming from AutoCAD sometimes has the same identifier.  It works because the alias primitive always uses the latest definition of the material.   We switch the particular material to be applied to the next surface as it is read into the scene.\n\n\nIf \"alias\" must change, what about modifying the geometry's identifier with the id of the original material associated with that surface.  For example, a display of the object information for the above scene would show:\n\n\nhit gl_02_mat polygon glass_mat_gl_0.2\nWhere the underscore character was used to join the original modifier, \"glass_mat\" with the polygon's identifier, \"gl_0.2\".\n-Chas\n\n\n Greg Ward <gward@lmi.net> wrote:Maybe we should put it to a vote. It seems straightforward, but it's \nactually a fair bit of coding to promote aliases to first class \ncitizens in the object array. I guess I'd end up sticking the target \nID in a string argument and do a lookup each time the object function \nwas evaluated. This would result in some overhead that isn't currently \nthere, both in terms of memory (negligible) and execution speed (more \nsignificant -- see the lastmod() call). I might be able to get around \nthe execution overhead using the OBJREC os pointer, but I generally \ndon't use this for tiny bits of memory like object references. Is it \nworth it to be able to trace the list of modifiers in applications like \nrshow?\n\n\nJack's suggestion can be implemented using the current alias handling \nas well as an OBJREC structure.\n\n\n-Greg\n\n\n_______________________________________________\nRadiance-dev mailing list\nRadiance-dev@radiance-online.org\nhttp://www.radiance-online.org/mailman/listinfo/radiance-dev\n--0-1384575238-1047020939=:42769\nContent-Type: text/html; charset=us-ascii\n\n\n<P>In the interest of backward compatibility, I suggest that whatever modifications to aliases happen with a new entity type, perhaps \"alias2\".\n<P>Consider the way Desktop Radiance uses aliases:\n<P>in glass_mat.rad:<BR>void glass gl_01<BR>0 0 3 1 1 1<BR>void glass gl_02<BR>0 0 3 1 1 1\n<P>in window.rad<BR>void alias glass_mat gl_01<BR>glass_mat polygon gl_0.1<BR>0 0 12 x y z ...<BR>void alias glass_mat gl_02<BR>glass_mat polygon gl_0.2<BR>0 0 12&nbsp;x y z ...<BR>void alias glass_mat gl_01<BR>glass_mat polygon gl_03<BR>0 0 12 x y z ...</P>\n<P>We do this because the geometry coming from AutoCAD sometimes has the same identifier.&nbsp; It works&nbsp;because the alias primitive always uses the latest definition of the material.&nbsp;&nbsp; We switch the particular material&nbsp;to be applied to the next surface&nbsp;as it is read into the scene.</P>\n<P>If \"alias\" must change, what about modifying the geometry's identifier with the id of the&nbsp;original material associated with that surface.&nbsp; For example, a display of the object information for the above scene would show:</P>\n<P>hit gl_02_mat polygon glass_mat_gl_0.2\n<P>Where the underscore character was used to join the original modifier, \"glass_mat\" with the polygon's identifier, \"gl_0.2\".\n<P>-Chas\n<P>==============\n<P>&nbsp;<B><I>Greg Ward &lt;gward@lmi.net&gt;</I></B> wrote:\n<BLOCKQUOTE style=\"PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #1010ff 2px solid\">Maybe we should put it to a vote. It seems straightforward, but it's <BR>actually a fair bit of coding to promote aliases to first class <BR>citizens in the object array. I guess I'd end up sticking the target <BR>ID in a string argument and do a lookup each time the object function <BR>was evaluated. This would result in some overhead that isn't currently <BR>there, both in terms of memory (negligible) and execution speed (more <BR>significant -- see the lastmod() call). I might be able to get around <BR>the execution overhead using the OBJREC os pointer, but I generally <BR>don't use this for tiny bits of memory like object references. Is it <BR>worth it to be able to trace the list of modifiers in applications like <BR>rshow?<BR><BR>Jack's suggestion can be implemented using the current alias handling <BR>as well as an OBJREC structure.<BR><BR>-Greg<BR><BR>_______________________________________________<BR>Radiance-dev mailing list<BR>Radiance-dev@radiance-online.org<BR>http://www.radiance-online.org/mailman/listinfo/radiance-dev</BLOCKQUOTE>\n--0-1384575238-1047020939=:42769--\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-March/000083.html).</sup>", "attachments": [], "created_by_name": "Charles Ehrlich", "created_at": "March 06, 2003 at 11:08PM", "created_by": "Charles_Ehrlich", "parent_id": "radiance-dev_000072", "id": "radiance-dev_000083"}