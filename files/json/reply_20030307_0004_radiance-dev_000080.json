{"body": "> I must admit that I'm still not completely certain about what the\n> actual proposal really is. We just jumped into the middle of an\n> ongoing discussion here. Peter, could you give a short and\n> complete outline for everybody?\n\n\nok. I really should have been more lengthy at my first posting, sorry for\nthat. Maybe I'll start with internal bits (it's a developer list, after\nall. Please correct me if I'm astray) to sharpen my description ( \"use the\nsource, Luke!\" ) :\n\n\nAll Radiance objects are fed into an internal structure  defined in\ncommon/object.h :\n\n\n     typedef struct {\n             OBJECT  omod;                   /* modifier number */\n             short  otype;                   /* object type number */\n             char  *oname;                   /* object name */\n             FUNARGS  oargs;                 /* object specification\n     */\n             char  *os;                      /* object structure */\n     }  OBJREC;\n\n\nwhere an OBJECT is an integer, which is converted by the macro  objptr()\nto an OBJREC pointer.\nBy starting with the OBJREC struture of the geometric primitive and\nfollowing  omod   the material description is decoded. There may be\nbranches (mixfunc et al), and both leaves could be followed by\nmodifier(org->oargs.sarg[0])  . Of course it can,- that's what happens at\nrender time. Other programs can do that too, e.g. displaying the full tree\nof materials for one geometric primitive.\n\n\nAlias handling is exceptional, as \"alias\" is decoded only once while the\nrad file is read ( common/readobj.c , around line 117):\nIt looks up an existing primitive with the target name of the alias, and\nfills the already allocated OBJREC structure with the type and arguments of\nthe target primitive. The name of the target primitive is lost. Effectively\nwe have a copy of the target primitive in memory, under a new name.\nAssuming that's exactly what Greg wanted, I would call this a fairly well\nworking ,  flawless, solid tested, straight forward implementation. No\ndoubt.\nBut the information about the name of the target material for the alias is\ngone for good.\nWhich leaves us with an octree ready for rendering, but no way of telling\nwhat material had been used from a library of materials. Judging by Jack's\ncomments too, that is not an uncommon situation.\n\n\nIf we would have an alias primitive in the sense of  common/otypes.h  ,  we\ncould put the alias information itself in an OBJREC strcture and follow\nthe  omod  link as we do with other materials (e.g. textures and patterns).\nThat would work regardless of the different \"alias\" syntax in the rad file.\n\n\nAdvantage: full information of original rad file is conserved and clearity\nof what is used in the octree is gained.\nDisadvantage: One  omod  lookup more.  Contrary to my first posting, there\nwouldn't even be a memory increase.\n\n\nCurrently rtrace/rview return the first modifier of the modifier chain,\nwhich is the name of the alias as of now. With a new option to rtrace, it\ncould return the first non-alias modifier of the chain, in case there are\naliases. So the user could get both the alias name and the original name.\nThe above assumes that the material library doesn't use alias in itself and\nwould allow the user recursive aliases (for whatever reasons) in his scene\nfile. Alternatively, we could output the first modifier after the alias.\nWhatever we output, we have the chance of displaying the information since\nit would be in the octree. Whereas now, it isn't.\n\n\n-Peter\n\n\nPS: I'll sit back, have some wine and wait how many postings I've missed\nwhile typing this one.....\n\n\n\n\n pab-opto, Freiburg, Germany, www.pab-opto.de\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-March/000080.html).</sup>", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "March 07, 2003 at 12:04AM", "created_by": "Peter_Apian-Bennewitz", "parent_id": "radiance-dev_000081", "id": "radiance-dev_000080"}