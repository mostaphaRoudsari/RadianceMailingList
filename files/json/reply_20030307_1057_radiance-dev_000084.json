{"body": "Greg Ward wrote:\n\n\n> Peter A-B writes:\n> > If we would have an alias primitive in the sense of  common/otypes.h\n> > ,  we\n> > could put the alias information itself in an OBJREC strcture and follow\n> > the  omod  link as we do with other materials (e.g. textures and\n> > patterns).\n> > That would work regardless of the different \"alias\" syntax in the rad\n> > file.\n>\n> We would still have to store the target ID in a separate string\n> argument, or else we'd lose the ability to change the modifier chain,\n\n\nwhy not put the modifier number in iargs ?\n\n\n     oldmod_string  ALIAS  newmod_string  oldbase_string\n\n\nis converted to\n\n\n     newmod_orec->omod = oldbase_number\n     newmod_orec->oname = newmod_string\n     newmod_orec->oargs->iargs[0] = oldmod_id\n\n\nso in the common case of oldmod_string=\"void\" we set niargs=0 during octree\ngeneration and then, during rendering, there's just the test for niargs==0 .\n\n\nIf niargs==1, follow oldmod_id without string lookup.\n\n\nPeter\n\n\n\n\n pab-opto, Freiburg, Germany, www.pab-opto.de\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-March/000084.html).</sup>", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "March 07, 2003 at 10:57AM", "created_by": "Peter_Apian-Bennewitz", "parent_id": "radiance-dev_000081", "id": "radiance-dev_000084"}