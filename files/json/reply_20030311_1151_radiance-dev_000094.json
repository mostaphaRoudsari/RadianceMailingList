{"body": "I checked in a working version of the new obj2mesh program and the my \n\"mesh\" primitive implementation.  Obj2mesh lives in the src/ot \ndirectory, since it's really more of an octree compiler than a \ntranslator.  I left the possibility there for creating other \"mesh \ncompilers,\" perhaps building off the simple language I used for \ntmesh2rad or MGF.  The main problem with this sort of translation is \nthat there's no recovery of materials, since a mesh must be modified by \na single material.  I'll probably have to add an option to obj2mesh to \npull out geometry by group or material for that reason.\n\n\nAll the shenanigans to save mesh memory were quite successful.  In the \nsimple test I did on an unsmoothed 747 model at least, the memory \nrequired by the mesh was less than the memory of the octree \nscaffolding.  For a smoothed mesh with uv coordinates, I expect the \noctree and the mesh data structures to use about the same amount of \nmemory.  The rendering time is also about what it was with the original \nmodel, though I plan to do some more testing to confirm this.  I expect \nthe rendering of smoothed meshes to be substantially faster, and I'll \nadd a new .OBJ output option to gensurf to verify this.\n\n\nOnce I add an option to gensurf and do a little more testing, we can \nmake a 3.5 release on CVS!\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-March/000094.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "March 11, 2003 at 11:51AM", "created_by": "Greg_Ward", "parent_id": "radiance-dev_000056", "id": "radiance-dev_000094"}