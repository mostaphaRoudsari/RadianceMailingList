{"body": "I've been following this thread with interest.  I just wanted to add \nsome general comments and tips on using Radiance for accurate point \ncalculations.\n\n\nComment #1 is a caveat:\n\n\nRadiance has been honed to give reasonable renderings in a reasonable \ntime for most common architectural environments.  It is not a \nbullet-proof ray-tracer for any and all optical problems.  Sometimes, \nit takes too long, and sometimes it doesn't come up with the right \nanswer.  Usually, by carefully setting the parameters, you can tune the \ncalculation to work for your situation, but there are certain \nwell-known cases (such as curved specular reflectors and lenses) where \nno amount of tuning will give satisfactory results with the \"classic\" \nalgorithms.\n\n\nThere _are_ Monte Carlo ray-tracing techniques that can guarantee \ncorrect results within some error tolerance, but the time they take to \nget there for all but the simplest arrangements is measured on a \ngeological scale.  This has of course gotten better with the continuous \nimprovements in processing speed, but there will always be a need for \nshortcuts and optimizations in simulation rendering, and that is the \ntarget and purpose of Radiance, as opposed to point calculations.  That \nRadiance does point calculations at all is a plus, but it isn't what it \nwas designed for primarily.  This brings me to my second comment.\n\n\nComment #2:\n\n\nEven if your goal is point calculations, you should generate some \nrenderings to make sure that your light is getting around your model in \nthe way that you expect.  A fisheye perspective taken from the \nmeasurement point can tell you volumes about what is going on -- point \nout light leaks and major sources of illumination that may require \nincreased sampling rates.\n\n\nCreate an animation that goes through the times of day.  Even if you \nhave to reduce the number of ambient bounces to get through it, you'll \nat least be able to tell where your sun pathes are going and roughly \nhow light is penetrating the space.\n\n\nComment #3:\n\n\nIf you're still not certain of your parameter settings, do a \nsensitivity study.  Run through some parameter values and plot your \nresults to find the knee of convergence.  John Mardaljevic has a good \nexample of this strategy in his Ph.D. thesis, which he's made available \nin PDF from his website at <http://www.iesd.dmu.ac.uk/~jm/project.htm> \n(scroll to the bottom, but take some time to peruse his other pubs on \nyour way as many of them are also relevant).\n\n\nComment #4:\n\n\nI want to echo the advice Carsten gave Rob, which is to try increasing \nthe -ad parameter FIRST.  Most of the problems people see in their \nindirect calculations are the result of an inadequate set of initial \nsamples.  1024 samples may seem like a lot of rays, but if you spread \nthem over an entire hemisphere, you're closest samples are about 5 \ndegrees apart, and near the horizon samples are separated by nearly 20 \ndegrees!  You can miss some pretty large sources of illumination if you \naren't lucky.  Since the sample spacing is inversely proportional to \nthe square root of the number of ambient divisions, you really need to \ncrank on this parameter if you have tiny indirect sources, which brings \nme to my final comment.\n\n\nComment #5:\n\n\nDon't rely too heavily on the diffuse interreflection calculation to \nsolve your problems.  Mkillum is a wonderful utility that can turn your \nskylights and windows into light sources, and you should take the time \nto experiment and learn how to use this tool in your projects.  It's a \nbit of a pain to get into, and most beginners don't see why it's \nnecessary, but it is an essential program for daylighting analysis.  \nUsed correctly, it will save you days of grief and head-scratching.\n\n\nOne time in using mkillum is that it pays to visualize the output it \ngenerates independently from the rest of your model.  Take the window \ndescription it creates and attach it to a closed, empty space (or do \nwhat I like to do -- stick it in the middle of a diffuse sphere) and \nsee what patterns it casts on the walls with -ab set to 0.  This will \ngive you a good idea of what kind of job mkillum did computing this \ndistribution, and whether you need to modify it's parameters, which by \nthe way have little or nothing to do with the parameter settings needed \nfor the interior.\n\n\n\n\n\n\nNone of this is meant as any sort of indictment of Rob G.'s work -- in \nmy opinion, Rob's done an amazing job getting up to speed on what is \nprobably the most baffling piece of lighting simulation software \nanyone's ever written.  I really appreciate his willingness to be \"out \nthere\" and share his trials and tribulations with the group, from which \nI've personally learned a lot, and I expect others have as well.  In \nthe end, he will be the expert, and we'll all be coming to _him_ for \nadvice in a few years' time....\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2003-May/000782.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "May 19, 2003 at 10:11AM", "created_by": "Greg_Ward", "parent_id": "radiance-general_000772", "id": "radiance-general_000782"}