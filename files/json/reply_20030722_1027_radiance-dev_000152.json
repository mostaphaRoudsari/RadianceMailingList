{"body": "Randolph Fritz wrote:\n\n\n> Let me here put in a plea and proposal for two particular coding \n> practices that I believe will greatly ease the work of Radiance \n> testing and debugging:\n>\n> 1. Use conditional compilation only in isolated source files, and not \n> at all in header files. \n\n\nMy two-cents thoughts: Not scatterig ifdefs through the code is \ncertainly a good thing. IMHO all architecture depending ifdefs may be in \none file (or files of a library, including header files), effectively \nproviding an abstraction layer between different underlaying  \narchitectures and Radiance. At least that worked on my other projects \nfor not time critical calls.\n\n\n> 2. Keep most of Radiance to ISO C90.\n>\n> Why?  The more platform dependencies are spread through the code, the \n> more platforms need to be tested.  Moreover, platforms themselves vary \n> internally--thus, there are multiple variants of POSIX, BSD Unix, and \n> MS-Windows and each is a potential testing problem.  The less \n> platform-dependent code, the fewer places for the code to have \n> unexpected bugs on different platforms. \n\n\nI haven't felt many differences between UNIXes lately. And Radiance is \nnot close to the system for a very great part of the code.\n\n\nAn automated test suite is certainly brilliant to have. Something like \n'makeall test'.  Running rtrace,rpict (rview in an automated, finite \nrendering time, screen-dump mode ?) and rholo in a fixed scene and \ncomparing results with stored references is worth setting up.\n\n\n-Peter\n\n\n\n\n pab-opto, Freiburg, Germany, www.pab-opto.de\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-July/000152.html).</sup>", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "July 22, 2003 at 10:27AM", "created_by": "Peter_Apian-Bennewitz", "parent_id": "radiance-dev_000151", "id": "radiance-dev_000152"}