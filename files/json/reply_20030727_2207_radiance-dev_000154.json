{"body": "[Sorry this has taken so long to answer]\n\n\nOn Tuesday, July 22, 2003, at 01:27  AM, Peter Apian-Bennewitz wrote:\n\n\n> Randolph Fritz wrote:\n>\n>> Let me here put in a plea and proposal for two particular coding \n>> practices that I believe will greatly ease the work of Radiance \n>> testing and debugging:\n>>\n>> 1. Use conditional compilation only in isolated source files, and not \n>> at all in header files.\n>\n> My two-cents thoughts: Not scatterig ifdefs through the code is \n> certainly a good thing. IMHO all architecture depending ifdefs may be \n> in one file (or files of a library, including header files), \n> effectively providing an abstraction layer between different \n> underlaying  architectures and Radiance. At least that worked on my \n> other projects for not time critical calls.\n\n\nI'm glad we mostly agree.  I want to go a bit further, though; the \nproblem of testing multiple versions pops up if one has conditional \ncompilation in a widely-included header file, so I think it's important \nnot to do that.\n\n\n>\n>> 2. Keep most of Radiance to ISO C90.\n>>\n>> Why?  The more platform dependencies are spread through the code, the \n>> more platforms need to be tested.  Moreover, platforms themselves \n>> vary internally--thus, there are multiple variants of POSIX, BSD \n>> Unix, and MS-Windows and each is a potential testing problem.  The \n>> less platform-dependent code, the fewer places for the code to have \n>> unexpected bugs on different platforms.\n>\n> I haven't felt many differences between UNIXes lately. And Radiance is \n> not close to the system for a very great part of the code.\n\n\nThere is a surprising amount of system dependency, however.  (Well, it \nsurprised me, anyway.)  And there are annoying subtle differences \nbetween BSD Unix (the Mac OS X base), POSIX, and the various vendor \nUnices.  With the G5 Macs we have a widely-available 64-bit platform.  \nThe conflicts with MS-Windows are much greater and it would be valuable \nto give some code a native Mac OS X interface, as well.\n\n\n> An automated test suite is certainly brilliant to have. Something like \n> 'makeall test'.  Running rtrace,rpict (rview in an automated, finite \n> rendering time, screen-dump mode ?) and rholo in a fixed scene and \n> comparing results with stored references is worth setting up.\n\n\nOne question that comes up is the seeding of the random number \ngenerators in that circumstance.  I think it may be useful to use \nmultiple seeds, and have a special-purpose file-comparison utility that \naccepts modest variations.  The holodeck, on the other hand, requires \ninterface scripting.\n\n\nRandolph\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-July/000154.html).</sup>", "attachments": [], "created_by_name": "Randolph Fritz", "created_at": "July 27, 2003 at 10:07PM", "created_by": "Randolph_Fritz", "parent_id": "radiance-dev_000151", "id": "radiance-dev_000154"}