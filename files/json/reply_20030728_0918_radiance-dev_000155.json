{"body": "Randolph Fritz wrote:\n\n\n> PAB wrote:\n>> My two-cents thoughts: Not scatterig ifdefs through the code is\n>> certainly a good thing. IMHO all architecture depending ifdefs may be\n>> in one file (or files of a library, including header files),\n>> effectively providing an abstraction layer between different\n>> underlaying  architectures and Radiance. At least that worked on my\n>> other projects for not time critical calls.\n>\n> I'm glad we mostly agree.  I want to go a bit further, though; the\n> problem of testing multiple versions pops up if one has conditional\n> compilation in a widely-included header file, so I think it's important\n> not to do that.\n\n\nThere's only a very small number of feature based conditionals\naround in Radiance, most prominently the GL stereo/nostereo stuff.\nMost of the others distinguish between platforms. Since your\nbiggest worry with conditionals is about having to test many\nseperate versions, that kind of makes those a moot point. We'll\nhave to run all the tests on all the seperate platforms anyway.\n\n\n\n\n>> I haven't felt many differences between UNIXes lately. And Radiance is\n>> not close to the system for a very great part of the code.\n>\n> There is a surprising amount of system dependency, however. (Well, it\n> surprised me, anyway.)  And there are annoying subtle differences\n> between BSD Unix (the Mac OS X base), POSIX, and the various vendor\n> Unices.\n\n\nRadiance still carries code (and conditionals) from a time when\nthe differences between unixes were much bigger than they are\ntoday, and we're continuously reducing that historical ballast.\n\n\nPeter is right: If we stick with posix, then there's hardly any\nnoticeable difference between current BSD and other unix systems,\nexcept in rare and pathological cases. In fact, in some cases\nit's harder to get the code to work on more than one Windows\nversion than on all the unix/BSD versions from a dozen different\nmanufacturers.\n\n\n\n\n> With the G5 Macs we have a widely-available 64-bit platform.\n\n\n64 bit systems are a can of worms that I'd like to open as late\nas possible, after all other aspects of the code base have been\ncleaned up. Once that is the case, we'll *first* have to\nsystematically identify all the parts of the code where the CPU\ntype actually makes a difference, and think hard about each\nindividual one.\n\n\n\n\n> The conflicts with MS-Windows are much greater and it would be valuable\n> to give some code a native Mac OS X interface, as well.\n\n\nLet's keep things simple. OS X supports posix and X11, so we\ndon't need to provide any proprietary interfaces for it.\n\n\n\n\n>> An automated test suite is certainly brilliant to have. Something like\n>> 'makeall test'.\n\n\nHow to trigger the tests is a somewhat seperate topic from\ncreating them first. Anyway, \"makeall test\" would require to\nseperate the building and installing stages in the Rmakefiles.\nThis is something that I'm missing anyway at the moment, because\nit would make testing small changes in a contained environment\nmuch simpler.\n\n\nOther than Randolph, I don't think this is a difficult change.\n\"Make build\" will have to move all the binaries into a local\nray/bin directory, for \"make install\" to pick them up there.\nThere are two possibilities how to organize the library files.\nEither we collect them into a local ray/share directory right\naway (they're scattered all around the source tree right now),\nor \"make build\" will have to do that as well.\n\n\nThe basis to this should be a new strategy on where Radiance\nsearches it's binaries and library files. We had a first stab at\nthis discussion already a few weeks back. I think a reasonable\nstrategy would go like this:\n\n\n- For binaries, first look in the directory where the current\n  executable was loaded from, then look in the $PATH.\n- For library files, first look in ../share/ (again based on\n  the location of the current executable), then in\n  ../share/radiance-<ver>/, and then on $RAYPATH.\n\n\nDoing this would simplify both testing within the build tree, and\ninstallation according to LSB standards without the need to set\nup any environment variables. Valid installations could then look\nlike this:\n\n\n/opt/radiance-3.6/bin/*\n/opt/radiance-3.6/share/*.(cal|pic)\n/opt/radiance-3.6/man/man.*/*\n/opt/radiance-3.6/doc/*.(ps|pdf)\n\n\n/usr/local/bin/*    # not really recommended, but possible\n/usr/local/share/radiance-3.6/*.(cal|pic)\n/usr/local/man/man.*/*\n/usr/local/doc/*.(ps|pdf)\n\n\nC:\\program files\\radiance-3.6\\bin\\*.exe\nC:\\program files\\radiance-3.6\\share\\*.(cal|pic)\nC:\\program files\\radiance-3.6\\man\\man.*\\*\nC:\\program files\\radiance-3.6\\doc\\*.(ps|pdf)\n\n\nNote that \"share\" is used for the library files, because those\nare platform independent. According to LSB (and other related\nstandards), \"lib\" is reserved for platform specific files.\nTo include parts of the code as (shared) libraries, we can simply\nadd the respective \"lib\" directories without any further changes.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-July/000155.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "July 28, 2003 at 09:18AM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000151", "id": "radiance-dev_000155"}