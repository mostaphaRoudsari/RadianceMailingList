{"body": ">> With the G5 Macs we have a widely-available 64-bit platform.\n>\n> 64 bit systems are a can of worms that I'd like to open as late\n> as possible, after all other aspects of the code base have been\n> cleaned up. Once that is the case, we'll *first* have to\n> systematically identify all the parts of the code where the CPU\n> type actually makes a difference, and think hard about each\n> individual one.\n\n\nToo late, I think; it was open the minute the G5 shipped.  If we're  \nlucky, we won't have someone pop up on this list with \"I compiled  \nRadiance on my shiny new G5 with -mpowerpc64 and ...\".  But likely  \nthere will be someone out there, even if we don't hear.\n\n\n> Radiance still carries code (and conditionals) from a time when\n> the differences between unixes were much bigger than they are\n> today, and we're continuously reducing that historical ballast.\n\n\nI'm all for that.  But let's not make the next leg of the journey in  \nballast, hunh?  Want to carry pay cargo, I do.\n\n\n>\n>> The conflicts with MS-Windows are much greater and it would be  \n>> valuable\n>> to give some code a native Mac OS X interface, as well.\n>\n> Let's keep things simple. OS X supports posix and X11, so we\n> don't need to provide any proprietary interfaces for it.\n\n\nAnd Cygwin (or Red Hat GNUpro, if that's what it's called now) runs on  \nMicrosoft Windows, no need to provide any proprietary interfaces for  \nthat system.\n\n\nIf only!\n\n\nApple's comments on this:\n> If you want your application to look identical on all platforms then  \n> you should make the abstraction layer thin. However, this tends to  \n> result in Mac OS X users throwing your application in a dumpster  \n> because it doesn\u2019t feel like a Mac application. Mac OS X has common  \n> GUI style rules that most X11 applications don\u2019t follow.\n\n\nAnd this also applies to MS-Windows, of course.\n\n\nBy the way, this is from Apple's portability guide, at  \n<http://developer.apple.com/documentation/Porting/Conceptual/ \nPortingUnix/portability/chapter_3_section_1.html>.  I recommend that  \ndocument.\n\n\n> Peter is right: If we stick with posix, then there's hardly any\n> noticeable difference between current BSD and other unix systems,\n> except in rare and pathological cases. In fact, in some cases\n> it's harder to get the code to work on more than one Windows\n> version than on all the unix/BSD versions from a dozen different\n> manufacturers.\n\n\nIn fact, Mac OS X does not support POSIX (I looked it up two days  \nago--I was hoping it did.)  It *provides* some POSIX system calls and  \nprograms.  Apple makes no promises to *support* POSIX at all (except  \nPOSIX threads, go figure).  That means no POSIX certification testing  \nand therefore subtle differences that will lead to bugs.\n\n\nIronically, Windows POSIX.1 capabilities are certified.  It may be that  \n#define'ing \"POSIX_SOURCE\" to 1 in the compiler will allow the non-X  \nportions of Radiance compile without change on Windows.\n\n\nI see the following likely platforms:\n\n\n   POSIX (Sun, IBM, DEC Alpha/Compaq), Mac OS X, various Linux, various  \nBSD, SGI\n   Plan 9 ANSI/POSIX Emulation\n   various MS-Windows versions\n   Special-purpose servers (a holodeck server is a likely possibility)\n\n\nWhich to test?  Wihtout a user survey, I'd guess the most-used  \nplatforms will be Mac OS X, Red Hat and SUSE Linux, and Windows NT and  \nXP.  SGI, if we can find an SGI system to test on--later SGIs are  \n64-bit, btw.  POSIX, you will notice, isn't even the list--one doesn't  \nbuy Sun and IBM systems for rendering, usually, and the Alpha (another  \n64-bit platform) has been let to go obsolete by Intel.  If someone  \nsteps forward and offers to do another platform, I'd be all for signing  \nthem up.\n\n\n> There's only a very small number of feature based conditionals\n> around in Radiance, most prominently the GL stereo/nostereo stuff.\n> Most of the others distinguish between platforms. Since your\n> biggest worry with conditionals is about having to test many\n> seperate versions, that kind of makes those a moot point. We'll\n> have to run all the tests on all the seperate platforms anyway.\n\n\nThe more of the code is platform-independent, however, the more tests  \nwill apply across platforms, providing additional testing for free.   \nConversely, the more platform dependence (and any file which includes a  \nplatform-dependent header is platform dependent) the more possibilities  \nfor platform-dependent bugs.\n\n\nI am not too much concerned with Radiance feature variants, as long as  \nthe number is modest and the conditionals manageable; my concern is  \nwith the kind of fine-grained platform dependence that the GNU build  \nutilities enable.  There are so many variants of such software that  \nmost of the configurations it is used in are never tested by the  \ndevelopment team at all--much of the testing work falls on the end  \nusers or integrators further on in the development process.\n\n\n> Other than Randolph, I don't think this is a difficult change.\n> \"Make build\" will have to move all the binaries into a local\n> ray/bin directory, for \"make install\" to pick them up there.\n> There are two possibilities how to organize the library files.\n> Either we collect them into a local ray/share directory right\n> away (they're scattered all around the source tree right now),\n> or \"make build\" will have to do that as well.\n\n\nMmmm...common practice is to simply build in the source directory, then  \nfind and move the files for install.  But practice varies.\n\n\nA much more serious problem to my mind is the problem of conditional  \nbuild--as with the OpenGL support, which I have been wrestling with.   \nOne of the biggest porting problems I am aware of is the variant  \nversions of \"make\" and associated utilities.  BSD, POSIX, and GNU all  \nhave very different versions of make (doesn't Windows have one, too?),  \nand the only things one can count on--still!--are the features of the  \n25-year old Unix v7 make.  Basic make doesn't provide any conditional  \nbuilding or automatic dependency tracking at all (find the .h files  \nreferenced by .c files.)  BSD Unix and, usually, Linux, has \"mkdep\"  \nwhich can be hacked into providing dependency tracking--it is not part  \nof POSIX--but it's pretty much of a kludge.  I have hacked out a GNU  \nmakefile for the \"common\" subdirectory, which allows for conditional  \nbuilding of the OpenGL component; I can find no way to do it on v7 make  \nwithout changes to the controlling script, and I don't know about BSD  \nor POSIX make--GNU make was quite enough trouble for me.\n\n\nAll of which leads me to think we need more work on the controlling  \nscripts, a decision to use one make (probably GNU) or an improved build  \ntool.  I have a friend who thinks well of SCONS  \n<http://www.scons.org/>, but that's a big shift.\n\n\n> How to trigger the tests is a somewhat seperate topic from\n> creating them first. Anyway, \"makeall test\" would require to\n> seperate the building and installing stages in the Rmakefiles.\n> This is something that I'm missing anyway at the moment, because\n> it would make testing small changes in a contained environment\n> much simpler.\n\n\nMe too.  I'm really not testing adequately, and that worries me  \nmuchly--field test is *not* the time to find out about all the problems  \nI introduce.\n\n\n> The basis to this should be a new strategy on where Radiance\n> searches it's binaries and library files. We had a first stab at\n> this discussion already a few weeks back. I think a reasonable\n> strategy would go like this:\n>\n> - For binaries, first look in the directory where the current\n>   executable was loaded from, then look in the $PATH.\n> - For library files, first look in ../share/ (again based on\n>   the location of the current executable), then in\n>   ../share/radiance-<ver>/, and then on $RAYPATH.\n\n\nHow does this work on Mac OS X and MS-Windows?\n\n\nThanks for the long & thoughtful reply.\n\n\nRandolph\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-July/000156.html).</sup>", "attachments": [], "created_by_name": "Randolph Fritz", "created_at": "July 31, 2003 at 12:15AM", "created_by": "Randolph_Fritz", "parent_id": "radiance-dev_000151", "id": "radiance-dev_000156"}