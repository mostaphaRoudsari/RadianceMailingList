{"body": "Randolph Fritz wrote:\n\n\n>> 64 bit systems are a can of worms that I'd like to open as late\n>> as possible, ...\n>\n> Too late, I think; it was open the minute the G5 shipped.  If we're\n> lucky, we won't have someone pop up on this list with \"I compiled\n> Radiance on my shiny new G5 with -mpowerpc64 and ...\".\n\n\nThat's why we provide default compile settings in makeall.\nAs far as I'm concerned (until Greg convinces me otherwise),\nRadiance is not 64 bit safe. Of course, that doesn't mean it\nwon't work on 64 bit system when compiled in 32 bit mode. People\nhave been successfully using it that way for quite some time\nalready.\n\n\n\n\n>> Radiance still carries code (and conditionals) from a time when\n>> the differences between unixes were much bigger than they are\n>> today, and we're continuously reducing that historical ballast.\n>\n> I'm all for that.  But let's not make the next leg of the journey in\n> ballast, hunh?  Want to carry pay cargo, I do.\n\n\nMy goal for this leg of the journey is to make the code (minus\nthe GUI stuff for the moment) first compile and then run\ncorrectly on Windows. I think that's cargo enough. All other\nchanges I make are just serving that one goal, even if some of\nthe details may be determined by other long-term considerations.\n\n\n\n\n>> Let's keep things simple. OS X supports posix and X11, so we\n>> don't need to provide any proprietary interfaces for it.\n>\n> And Cygwin (or Red Hat GNUpro, if that's what it's called now) runs on\n> Microsoft Windows, no need to provide any proprietary interfaces for\n> that system.\n>\n> If only!\n\n\nI prefer a less polemic and more practical approach. Fact is,\nthat all systems we're currently try to *directly* support have\nthose functions from posix that we need, and that can be mapped\ndirectly to the semantics of the underlying system. And the few\nexceptions (eg. process control on Windows) are already being\naddressed.\n\n\n\n\n> Apple's comments on this:\n>> ...\n>\n> And this also applies to MS-Windows, of course.\n\n\nNow you're switching from discussing the fundamental OS APIs (as\nused by roughly 100 executables in Radiance) to discussing the\nlook-and-feel options of the GUI (as used by 3 executables in\nRadiance).\n\n\nNo sane person will refuse to use Radiance on OS X just because\nrview doesn't have shiny transparent buttons there. But of\ncourse, if you want to write portable replacements that use the\nnative widget set on each platform, you're very welcome! ;)\n\n\nIf I had the time (or money, sponsoring gladly accepted) for\nstuff like that, then I'd turn the rendering engine into a\nlibrary, wrap that library as a Python extension, and write the\nGUI stuff in Python/WxPython. WxPython (resp. the underlying\nWxWindows) will use gtk on unix, MFC on Windows, and one of the\navailable native widget sets on OS X. A much less powerful (but\nconsiderably more mature) alternative to WxPython would be Tk.\n\n\n\n\n> In fact, Mac OS X does not support POSIX (I looked it up two days\n> ago--I was hoping it did.)  It *provides* some POSIX system calls and\n> programs.\n\n\nAnd that's exactly everything we ask for. We don't need certified\nsupport on paper. We need working functionality in practise.\n\n\n\n\n> I see the following likely platforms:\n>\n>    POSIX (Sun, IBM, DEC Alpha/Compaq), Mac OS X, various Linux, various\n> BSD, SGI\n\n\nPeople are already working with Radiance on all those systems,\nand then some.\n\n\n>    Plan 9 ANSI/POSIX Emulation\n\n\nDoubtful, and I currently see no reason to care about that one\n(though I won't complain if it happens to work anyway).\n\n\n>    various MS-Windows versions\n\n\nSee above (my second point). I'll restrict explicit support to NT\nbased systems though, because Win95/98/ME are technically\ninadequate for our purposes anyway.\n\n\n>    Special-purpose servers (a holodeck server is a likely possibility)\n\n\nHave fun... ;)\n\n\n\n\n> Which to test?  Wihtout a user survey, I'd guess the most-used\n> platforms will be...\n\n\nThe daily HEAD dump is available for everyone who wants to do\nbeta testing on the platform of their choice. As long as they can\nprovide meaningful test results and bug reports, there's no need\nfor Greg or me to personally run the full test suite on every\nplatform imagineable.\n\n\n\n\n>   POSIX, you will notice, isn't even the list\n\n\nOf course not. Posix is not targeted at end users. It's simply a\nuseful abstraction for developers, which tells them that certain\nfunctions can be expected to be present on many systems.\n\n\n\n\n>>  We'll\n>> have to run all the tests on all the seperate platforms anyway.\n>\n> The more of the code is platform-independent, however, the more tests\n> will apply across platforms, providing additional testing for free.\n\n\nWhat happened to your usual paranoia here? ;)\nNo test applies across platforms. Necessarily, our tests will\nalso have to verify that the underlying OS functionality is\nworking as expected. Unfortunately, even certified posix (or\nwhatever) implementations have bugs.\n\n\n\n\n>> \"Make build\" will have to move all the binaries into a local\n>> ray/bin directory, for \"make install\" to pick them up there.\n>> There are two possibilities how to organize the library files.\n>> Either we collect them into a local ray/share directory right\n>> away (they're scattered all around the source tree right now),\n>> or \"make build\" will have to do that as well.\n>\n> Mmmm...common practice is to simply build in the source directory, then\n> find and move the files for install.  But practice varies.\n\n\nThis is indeed common practise in those cases where all the\nresulting executables are built in one directory anyway. In cases\nlike Radiance, where executables are built in many different\nsubdirectories, it is common practise for the build process to\ncollect them in one place for local testing. In excessive cases,\nthe object files and executables may even be placed in a seperate\nsubdirectory for each supported platform, which makes it possible\nto build and test several versions from the same tree over NFS\n(even concurrently) without having to \"make clean\" in between.\n\n\n\n\n> A much more serious problem to my mind is the problem of conditional\n> build--as with the OpenGL support, which I have been wrestling with.\n\n\nYou're trying to do things with make that it wasn't designed to\ndo. Just leave the \"make ogl\" in place as it currently is and\ndelegate the decisions to the makeall script. That's the main\nreason we even have this script, after all.\n\n\n\n\n> I have a friend who thinks well of SCONS\n> <http://www.scons.org/>, but that's a big shift.\n\n\nI have it installed here, but haven't found the time to play\naround with it yet. It looks like the most brilliant approach to\nthe software build process I have seen so far. Unfortunately, it\nhas one big disadvantage, at least while we haven't convinced\nGreg otherwise: It requires that a working and relatively recent\ncopy of Python is already installed on the build system.\n\n\nI actually thought of establishing SCons as a secondary build\nmethod in parallel to make, for those who have Python or want to\ncompile on exotic platforms that aren't included in makeall yet.\n\n\n\n\n>> - For binaries, first look in the directory where the current\n>>   executable was loaded from, then look in the $PATH.\n>> - For library files, first look in ../share/ (again based on\n>>   the location of the current executable), then in\n>>   ../share/radiance-<ver>/, and then on $RAYPATH.\n>\n> How does this work on Mac OS X and MS-Windows?\n\n\nAs a strategy, this will obviously work on any OS that uses\nhierarchical file system semantics.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000157.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "August 01, 2003 at 07:27AM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000151", "id": "radiance-dev_000157"}