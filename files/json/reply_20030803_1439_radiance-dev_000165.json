{"body": "On Sun, 2003-08-03 at 14:08, Georg Mischler wrote:\n\n\n> \n> Erwin Rol wrote:\n> >\n> > It always seems that writing yer own keeps things simpler in the\n> > beginning until you project grows and than you hit the same problems\n> > other ppl already had and solved.\n> \n> You make a few good points there (even though you don't seem to\n> be fully aware of the specific experience and skill sets of the\n> developers involved). \n\n\nI wanted in no way suggest that radiance developers only can write\nrenderer/math software. \n\n\n> Although you didn't say so explicitly, you\n> seem to want us to use autoconf and friends. \n\n\nI used automake/autoconf for other things, and i don't know SCons, so\nthats why i mentioned autoconf.\n\n\n\n\n> But in line with\n> your own arguments: Making things simpler is one of the most\n> interesting goals here.\n> \n> While autoconf is very powerful and solves lots of problems, it\n> isn't exactly simple, and brings quite a few problems of its own.\n\n\nSimple depends on yer point of view, for simple programs autoconf\nscripts can be very simple, for complex programs ( complex as in complex\ndependencies on the system , not complex as in complex math in the code)\nthe scripts get more complex. \n\n\n> Most noteably, it is itself based on inadequate and platform\n> (unix) dependent tools, a limitation it shares with the current\n> makeall script in Radiance (and parts of the Radiance codebase).\n> \n\n\nTrue. Al tough the radiance scripts limitations are worse, since it\ncan't find out the type of Unix on its own.\n\n\n\n\n> Autoconf is generally used for several distinct tasks:\n> \n> a) establish the toolchain\n>      (figure out which compiler and other tools to use)\n> b) analyze the system environment\n>      (find the necessary system headers, and check whether they\n>      contain specific declarations)\n> c) build the software\n> d) install the software\n> \n> The biggest and most convoluted part of that is b). Radiance has\n> very few platform dependencies, the idea actually is to reduce\n> them to none between unix systems. So in effect, we don't need b).\n> \n> The simplest part is d), so we don't need any premade tools for\n> that one either.\n> \n> Which leaves us with a) and c). SCons offers a much simpler and\n> yet more powerful solution for both, and it does so on platforms\n> that autoconf will never know about.\n\n\nHow well does SCons for example deal with building shared libraries ?\n(whcih is part of point c ).\n\n\n> \n> \n> -schorsch\n\n\nBut anyway, i would vote for any more sophisticate build system than\nhand written scripts, not just autoconf.\n\n\n- Erwin\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000165.html).</sup>", "attachments": [], "created_by_name": "Erwin Rol", "created_at": "August 03, 2003 at 02:39PM", "created_by": "Erwin_Rol", "parent_id": "radiance-dev_000164", "id": "radiance-dev_000165"}