{"body": "Greg Ward wrote:\n\n\n> > - For binaries, first look in the directory where the current\n> >   executable was loaded from, then look in the $PATH.\n> > - For library files, first look in ../share/ (again based on\n> >   the location of the current executable), then in\n> >   ../share/radiance-<ver>/, and then on $RAYPATH.\n>\n> Is there some way within a Unix program to determine where the\n> executable was found, other than researching the $PATH environment\n> variable to find where argv[0] lives?\n\n\nScanning the PATH is the only truly portable solution I am aware\nof. Doing this appears to be quite common practise.\nOn some systems though, you may find that information somewhere\nunder /proc. On Linux, /proc/<pid>/exe always is a symlink to the\nprogram file.\nNewer Windows versions have a system call to the same effect.\n\n\n\n\n\n\n>   The current rmake sans arguments builds\n> in the working directory without copying the executables anywhere.\n\n\nRight now, I think it doesn't actually build everything, because\nat least some of the libaries don't get copied to ../lib, which\ncauses other stuff to fail later.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000172.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "August 04, 2003 at 06:24PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000151", "id": "radiance-dev_000172"}