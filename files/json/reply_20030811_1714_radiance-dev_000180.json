{"body": "Greg Ward wrote:\n\n\n> 1) The overall SConstruct file doesn't look that much smaller than\n> makeall, though it is better organized.  It's missing some things, like\n> the license agreement, which must be added, and the ability to edit the\n> build options.  Once you add these, assuming you can, it will probably\n> be about the same size as makeall, which is OK.\n\n\nThe platform configs and the license statement are the biggest\nchunks in there, so that's no surprise...\n\n\n\n\n> 2) However, I'm wondering if it's even possible with this system to\n> allow the people doing the compiles to mess with the options without\n> editing the SConstruct script, and therefore understanding it.\n\n\nIt's fairly simple as it is now, but we can make it as nice as we\nwant. Remeber, we now have a \"real\" programming language at our\ndisposal at that point. For example, Python brings a module for\nparsing the traditional configuration file format:\n\n\n  [build]\n  CC = cc\n  CPPFLAGS = -DBSD -Dfreebsd\n  CCFLAGS = -O2\n  [install]\n  bindir = /opt/radiance3.6a/bin\n  sharedir = /opt/radiance3.6a/share\n  mandir = /opt/radiance3.6a/man\n\n\nThis could be used for both the shipped platform specific\nconfiguration files, as well as for storing whatever the user has\nchosen to modify. There may be other ways to shortcut a few tests\non a box where we have run before.\n\n\n\n\n> 3) If you added a way to change the build options, would SCons then\n> rebuild all the *.o files automatically?\n\n\nScons will automatically rebuild everything where either the\nbuild options or the dependencies have changed.\n\n\n\n\n> What's the \"clean\" process?\n\n\nscons -c\n\n\n\n\n> Makeall has a little test to see if the rmake script has been updated\n> and does a clean if it has.  Can we include such functionality with\n> SCons?\n\n\nNot needed here.\n\n\n\n\n> 4) Since SCons is figuring out all the dependencies for us, which by\n> the way is unnecessary for end users, who build the whole system from\n> scratch and that's about all they do, I'm wondering how these\n> dependencies are worked out?  Does it look in all the source files\n> every time to find the headers?  Seems a bit time consuming if all\n> you're doing is rebuilding after a single change, but I haven't seen it\n> work so I don't actually know if it slows down the process or not.\n\n\nGood questions... I find it surprisingly fast considering all the\ninformation it has to look at. I think there's a fairly smart\ncombination of timestamps, cryptographic hashes, and dependency\ncaching at work. All the bells and whistles may not matter for\nsomeone who just compiles everything once, but the automatic\ndependencies can save a lot of time for developers making small\nchanges here and there. Those benefits will probably increase\nwhen we split librt.a into several smaller units, because changes\nunder common will have less widespread consequences then.\n\n\n\n\n> 5) Personally, I like the process we currently have of building the\n> rmake script, which is just a call to make with a bunch of options, and\n> building separately.  Does combining the two with a whole environment\n> of passed variables means you can only recompile at the top level, or\n> is there some way to build in a subdirectory only?\n\n\nTo compile just the stuff in one directory:\n in ray:        \"sconf src/common\"\n in src/common: \"sconf -u\"\n\n\nTo compile just one file:\n in ray:        \"sconf src/common/cone.o\"\n in src/common: \"sconf -u cone.o\"\n\n\nOther than make, it will also update any dependencies outside of\nthe current directory when necessary.\n\n\n\n\n> If it was wasteful\n> to refigure the dependencies in just one directory, refiguring them\n> over the entire system each time you compile a small change has GOT to\n> be a factor, doesn't it?\n\n\nObviously, all that power requires some overhead. Reading all the\nfiles and analyzing the dependencies takes a few seconds on my\nold 300 Mhz box. But since modern hardware is almost ten times as\nfast, I don't expect that to be a problem. I'm also not sure if we\nalready have an optimal setup. We'll only find out by trying...\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000180.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "August 11, 2003 at 05:14PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000176", "id": "radiance-dev_000180"}