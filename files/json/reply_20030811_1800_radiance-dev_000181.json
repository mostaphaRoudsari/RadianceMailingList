{"body": "On Sat, Aug 09, 2003 at 09:02:58AM -0700, Greg Ward wrote:\n> \n> 1) The overall SConstruct file doesn't look that much smaller than \n> makeall, though it is better organized.  It's missing some things, like \n> the license agreement, which must be added, and the ability to edit the \n> build options.  Once you add these, assuming you can, it will probably \n> be about the same size as makeall, which is OK.\n>\n\n\nGood.  I'm working on some of the build option stuff.\n\n\n> \n> 2) However, I'm wondering if it's even possible with this system to \n> allow the people doing the compiles to mess with the options without \n> editing the SConstruct script, and therefore understanding it.  I \n> wouldn't feel comfortable editing this myself, as Python is a whole \n> new, foreign environment to me.\n> \n\n\nOptions can be given on the command line; I think the first version I\nsent out even had some help in it; try \"scons -h\".  All the options\naren't in yet, however.  On the other hand, it searches out the X and\nOpenGL libraries, which simplifies the script.  I think it's possible\nto check for a native libtiff as well.\n\n\n> 3) If you added a way to change the build options, would SCons then \n> rebuild all the *.o files automatically?  What's the \"clean\" process?  \n> Makeall has a little test to see if the rmake script has been updated \n> and does a clean if it has.  Can we include such functionality with \n> SCons?\n\n\n\"scons -c\" is the clean command.  \"Rebuild all\" on changed options is\npossible; I didn't do it in the first version.\n\n\n> \n> 4) Since SCons is figuring out all the dependencies for us, which by \n> the way is unnecessary for end users, who build the whole system from \n> scratch and that's about all they do, I'm wondering how these \n> dependencies are worked out?  Does it look in all the source files \n> every time to find the headers?  Seems a bit time consuming if all \n> you're doing is rebuilding after a single change, but I haven't seen it \n> work so I don't actually know if it slows down the process or not.\n> \n\n\nA bit of both; it caches (by default) MD5 checksums to check if files\nare changed, I think it only scans files that have been changed for\nheaders.\n\n\n\n\n> 5) Personally, I like the process we currently have of building the \n> rmake script, which is just a call to make with a bunch of options, and \n> building separately.  Does combining the two with a whole environment \n> of passed variables means you can only recompile at the top level, or \n> is there some way to build in a subdirectory only?  If it was wasteful \n> to refigure the dependencies in just one directory, refiguring them \n> over the entire system each time you compile a small change has GOT to \n> be a factor, doesn't it?\n\n\n\"scons src/common\" or (cd src/common; scons -u).  I don't know what\nrules it uses for rescanning in that case, but it doesn't do that much\nrescanning most of the time.\n\n\nI've got some more stuff in, unfortunately I went in a somewhat\ndifferent direction than Schorsch.  I'll send the new versions out &\npeople can have a look.\n\n\nRandolph\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000181.html).</sup>", "attachments": [], "created_by_name": "Randolph Fritz", "created_at": "August 11, 2003 at 06:00PM", "created_by": "Randolph_Fritz", "parent_id": "radiance-dev_000176", "id": "radiance-dev_000181"}