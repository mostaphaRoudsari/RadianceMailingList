{"body": "[These have been sitting in my \"Drafts\" mailbox for a while; I've \ndecided to send them out.  I'm still too busy to *do* anything at this \npoint, however.--R.]\n\n\n>>>  We'll\n>>> have to run all the tests on all the seperate platforms anyway.\n>>\n>> The more of the code is platform-independent, however, the more tests\n>> will apply across platforms, providing additional testing for free.\n>\n> What happened to your usual paranoia here? ;)\n> No test applies across platforms.\n\n\nNo, no.  If one tests a file without platform dependencies on two \nplatforms, the same code is tested twice in different environments.  \nTesting a file with platform dependencies on two platforms tests \ndifferent code, once, on each platform.  One gets better from testing \nthe same code twice, you see?\n\n\n> I prefer a less polemic and more practical approach. Fact is,\n> that all systems we're currently try to *directly* support have\n> those functions from posix that we need, and that can be mapped\n> directly to the semantics of the underlying system. And the few\n> exceptions (eg. process control on Windows) are already being\n> addressed.\n\n\nThe question at the heart of QA is: how do we know this fact?  *Are* \nthe functions really all the same?  We have not studied and tested each \nsystem call in Radiance.  There is not even, yet, a test suite, and no \ntest suite will ever cover all cases.  That none of the systems we are \nmost interested in are POSIX-certified is a strong indication that we \ndon't, in fact, know this for a fact at all.  We only hope.  If we did \nstructural engineering like this, in Weinberg's phrase, \"the first \nwoodpecker that came along would destroy civilization.\"\n\n\nOn Friday, August 1, 2003, at 04:27  AM, Georg Mischler wrote:\n\n\n> Randolph Fritz wrote:\n>\n>>> 64 bit systems are a can of worms that I'd like to open as late\n>>> as possible, ...\n>>\n>> Too late, I think; it was open the minute the G5 shipped.  If we're\n>> lucky, we won't have someone pop up on this list with \"I compiled\n>> Radiance on my shiny new G5 with -mpowerpc64 and ...\".\n>\n> That's why we provide default compile settings in makeall.\n> As far as I'm concerned (until Greg convinces me otherwise),\n> Radiance is not 64 bit safe. Of course, that doesn't mean it\n> won't work on 64 bit system when compiled in 32 bit mode. People\n> have been successfully using it that way for quite some time\n> already.\n\n\nFair enough.\n\n\n>>> Radiance still carries code (and conditionals) from a time when\n>>> the differences between unixes were much bigger than they are\n>>> today, and we're continuously reducing that historical ballast.\n>>\n>> I'm all for that.  But let's not make the next leg of the journey in\n>> ballast, hunh?  Want to carry pay cargo, I do.\n>\n> My goal for this leg of the journey is to make the code (minus\n> the GUI stuff for the moment) first compile and then run\n> correctly on Windows. I think that's cargo enough. All other\n> changes I make are just serving that one goal, even if some of\n> the details may be determined by other long-term considerations.\n\n\nI'm sorry--I didn't understand.  Yes, that makes sense.  \nPlatform-independent stuff first.\n\n\n>> Apple's comments on this:\n>>> ...\n>>\n>> And this also applies to MS-Windows, of course.\n>\n> Now you're switching from discussing the fundamental OS APIs (as\n> used by roughly 100 executables in Radiance) to discussing the\n> look-and-feel options of the GUI (as used by 3 executables in\n> Radiance).\n\n\nrview, rholo, and ximage.  ... and the plotting stuff.  ...and perhaps \nothers.\n\n\n> No sane person will refuse to use Radiance on OS X just because\n> rview doesn't have shiny transparent buttons there. But of\n> course, if you want to write portable replacements that use the\n> native widget set on each platform, you're very welcome! ;)\n\n\nIn fact, people refuse to use apps because they don't look native, on \nboth MS-Windows and Macintosh systems, every day; that quote from Apple \nis based on experience.  Lots of not-sane people, I guess.  On the \nother hand, Radiance is designed to accommodate multiple GUIs, so \nperhaps it isn't so hard, provided we can get the code base to a point \nwhere it will interface cleanly with C++ and Objective C.\n\n\n[Lots more stuff I cd. say & no time to say it.--R]\n\n\nRandolph\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-September/000207.html).</sup>", "attachments": [], "created_by_name": "Randolph Fritz", "created_at": "September 12, 2003 at 05:42PM", "created_by": "Randolph_Fritz", "parent_id": "radiance-dev_000151", "id": "radiance-dev_000207"}