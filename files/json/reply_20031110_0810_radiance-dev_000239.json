{"body": "Greg Ward wrote:\n\n\n> Thanks for doing all this work on the Windows port -- great progress!\n> I'm a little confused as to the benefit(s) of separating the objects\n> into so many libraries.  Is this just to help reduce memory\n> requirements for dynamic linking?  On Unix at least, it complicates the\n> builds considerably, as you need to know the correct link order for the\n> libraries or you get undefined symbol errors at load time.\n\n\nThe library splitting has several reasons:\nFirst, it made it possible to circumvent the existing name\nconflicts within the code, so that we now can compile with SCons\non Windows. Once we have those conflicts resolved in other ways,\nthat will reduce this particular benefit, of course.\n\n\nApart from that, I also used this as a tool to understand the\ninternal dependencies within Radiance better. It helped me to build\na mental map of the code. I don't think that the sequence of\nlibraries is a real problem. We just need to get that right for\neach program once. As long as we use static libraries, all errors\nwill get caught at compile time anyway.\n\n\nThe current number of seperate libraries clearly isn't final. As\nall the SCons stuff, I still consider this experimental, and will\ncontinue to look for better ways to do things. We can't really\nfind the best build method without trying a few.\n\n\n\n\n>> When did anyone check which of the OS replacement functions are\n>> really necessary anymore? Some of them seem to be written to\n>> replace really old and buggy implementations that may have gone\n>> out of use by now anyway.\n>\n> In some cases, they may never be needed again, but how can we know?\n\n\nSince we always can reanimate files again at any later point (as\nyou note below), I think it's better to unclutter the tree\nwhenever we have a chance.\n\n\nMy question was targeted at figuring out which of those modules\nare necessary on which platforms *right now*. The current\nselection in makeall appears to include some random elements.\nFor example, getpagesize.c is included on at least one platform\nwithout bmalloc.c, although the latter is the only file that\ncontains any reference to the former. I think it would be helpful\nto go through this stuff with a finetoothed comb, but I lack\naccess to most of the platforms necessary to do this...\n\n\n\n\n>> Can we remove those files that aren't used at all?\n>\n> Yes, I suppose so.  Since they'll live on in the CVS \"attic,\" removing\n> a source file is not irrevocable.\n\n\nOk, let's do that then.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-November/000239.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "November 10, 2003 at 08:10AM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000237", "id": "radiance-dev_000239"}