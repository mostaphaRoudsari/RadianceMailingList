{"body": "Mark Stock wrote:\n\n\n> [first post to -dev group, tell me if I'm off base here]\n\n\nRight on topic!\n\n\n\n\n> I am building the most recent HEAD release under Sun 5.8:\n>\n> uname -a\n> SunOS fxbb085u21.engin.umich.edu 5.8 Generic_108528-23 sun4u sparc\n>\n> with the Sun cc compiler:\n>\n> cc -V\n> cc: Sun WorkShop 6 update 2 C 5.3 2001/05/15\n>\n> And, after a few warnings:\n> [...]\n> I get the first actual error:\n>\n> -----------\n> cc -I/usr/openwin/include -L/usr/openwin/lib -DNOSTEREO -DMC -O -DSPEED=80\n> -c -o unix_process.o unix_process.c\n> \"./vfork.h\", line 12: identifier redeclared: fork\n>         current : function() returning int\n>         previous: function(void) returning long : \"/usr/include/unistd.h\",\n> line 245\n> cc: acomp failed for unix_process.c\n> make: *** [unix_process.o] Error 2\n> -----------\n\n\nYour compiler appears to be particularly picky about redundant\nfunction declarations.\n\n\n\n\n> Then I start getting massive amounts of undefined symbol errors\n\n\nThose are just follow up errors, because the above resulted in\nan incomplete or missing librt.a.\n\n\n\n\n> So, I changed the last line in common/vfork.h to read\n> extern long vfork();\n> That seemed to work.\n\n\nKind of a coincidence that you stumbled over this, but I had a\nbeef with the use of vfork() in Radiance for a while, and would\nlike to use this occasion to vote for its elimination.\n\n\nIn the early days there might have been valid reason to consider\nvfork(). But today there are more reasons against it. For one,\nmodern virtual memory systems have rendered it unnecessary, as\nfork() is now using copy on write. And then, Radiance uses\nvfork() in a way it was never meant to be used.\n\n\nThe specified semantics of vfork() are quite different to fork().\nIn practise, most systems simply implement is as an alias to\nfork(). But on those systems where it is implemented according to\nthe full specification (currently only netBSD as far as I know),\nRadiance will crash and burn.\n\n\nThe vfork() specs make it dangerous for the child to call any\nother functions between the vfork() and a following execve() or\nexit(). Everything happening in between may have effects on\n*both* the parent and child process. Most uses of vfork() in\nRadiance are therefore a time bomb waiting to explode in someones\nface.\n\n\n\n\nWhile your current compile troubles are only an unrelated side\neffect, they would also disappear if we fixed the real problem.\n\n\n\n\n> Then, when I build, it gets past that error, but encounters some\n> \"ld: fatal: Symbol referencing errors\" in a few other places\n> (normtiff and dev/x11.hdi).\n\n\nCan't say anything about those without seeing the specific names.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-November/000241.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "November 10, 2003 at 11:33AM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000242", "id": "radiance-dev_000241"}