{"body": "Georg Mischler wrote:\n> Roland Schregle wrote:\n> \n>>Currently all of the more common (?) materials are supported. What's\n>>defnitely not supported are user defined BRDFs, i.e.\n>>{Met,Plas,Trans}{Data,Func} and BtdfFunc.\n> \n> So what does actually happen when those are encountered?\n\n\nWell, you get a pretty \"unexpected object call\" message that's used as \ndefault in the dispatch table, and mkpmap gracefully bails out. :^)\n\n\n>>-- the spotlight focus is ignored by the photon map,\n> \n> Would it be difficult to do this \"right\"? Not saying that it's\n> necessary, just for the sake of completeness.\n\n\nNot that straightforward; photons would have to be emitted *behind* the \nlight source and pass through it, requiring some ugly special hack. \nDidn't feel like messing with this 'cos I didn't consider it that \nimportant. I suppose you could find a workaround in the long run.\n\n\n> The documentation never even mentions illum sources. Are they\n> ignored? If so, I think that would be one of the key problems yet\n> to solve. Since illums are often used as impostors to replace\n> other sources (or arbitrary geometry), I assume that any photon\n> hitting an illum source would need to be dropped, at least if it\n> hits from behind. \n\n\nPhoton map doesn't parse its own light sources: it takes the standard \nsource array delivered by marksources(), and whatever's in there is \nconsidered a source. Illums wind up in there too, if I remember \ncorrectly (haven't done much with them), and they're treated just like a \nregular source. I gave this some thought and realised that illums would \nprobably be overkill if used together with exterior distant sources. \nWhile this would slow things down, photons hitting the illums from the \nback would be swallowed anyway, so I don't think it'll invalidate the \nresults. Personally, I'm not sure about the wisdom of using illums with \nthe pmap addon. As I understand it, this construct is often used to get \na luminance distribution from a window with a facade. If you're using \nspecular materials illum probably won't cut it and you'll need to use \nthe pmap + port approach. On the other hand, diffuse external \ninterreflections are probably better handled via an illum.\n\n\n > Actually, what happens in general when photons\n> hit other light sources, from either side?\n\n\nLight sources don't reflect in RADIANCE. Consequently, they aborb \nphotons. Whether this behaviour is correct is debatable, fact is tho \nthat RADIANCE Classic doesn't consider reflections from sources either. \nThese contributions would most probably be insignificant anyway in most \nscenes (at least realistic ones).\n\n\n>>-- distant light sources (defined with the Source primitive) get special\n>>treatment and are inherently slow (photons are emitted from the scene\n>>cube surfaces).\n>  \n> What that means is that photon maps are not generally adequate to\n> render exterior scenes.\n\n\nNope, there's a fundamental difficulty there for the same reason a \nbackward raytracer can't handle caustics efficiently.\n\n\n>>The photon port mechanism can be used here to speed\n>>things up (by defining windows and skylights as emitters, for example),\n>>but this requires user intervention.\n>  \n> If I'm not mistaken (and assuming illum support), then photon\n> ports are at least partly exchangeable with the use of mkillum\n> or other local preprocessing algorithms in window openings. This\n> also means that mkillum type programs would have to be run first,\n> and the resulting sources might serve as input into the photon\n> pool. Is this correct?\n\n\nThe photon port stuff is effectively just a hack I needed to get quick \ndaylight simulations, and certainly shouldn't be considered the \ndefinitive workaround to the efficiency problems posed by distant \nsources. It's neither elegant nor flexible, but it gets the job done.\n\n\nI too realised the similarity to illums and briefly even considered \nhacking the illums themselves to act as ports, which would also provide \nthe benefit of accounting for external interreflection (which ports \ncurrently don't, although they do check for source occlusion). I \ndiscussed this with Peter A.B. and we concluded it was better to add an \nextra construct specifically for the purpose, although I can't exactly \nremember why. I think one of the main reasons was the limited spatial \nresolution of illums, which could give rise to aliasing and therefore \nbias in the photon distribution. Like I said, the ports are just a \nstopgap until a nifty importance based distribution scheme is developed. \nBut that's another story (apologies to Billy WIlder)...\n\n\n> I'm just trying to consider a number of daylighting use cases, to\n> determine how the classic methods may or may not play well\n> together with the use of photon maps. In the following, the\n> output of each mkillum (or alternative) run might be fed into the\n> photon map, even though I didn't bother to explicitly mention it\n> each time.\n> \n> A) Opening with simple window material like glass/trans/etc\n>    (or void surface if there is no window pane).\n>    Treatment choices:\n>    m: Apply mkillum to pane.\n>       Advantage: Takes exterior interreflections into account\n>       Disadvantage: May be slower if exterior is complex.\n>    p: Use the pane as photon port.\n>       Advantage: Probably very fast\n>       Disadvantage: Ignores exterior interreflections\n>    n: Do nothing special (if opening is very large)\n>       Advantage: Simple\n>       Disadvantage: Less accurate and slower than the above.\n\n\nCase n will be slower than p or m, but not necessarily less accurate; \nbrute force bombardment of the entire scene cube with photons is just \nmuch slower and dumber, but there's no bias I'm aware of (this \ndistrubtion is infact stratified over each side of the scene cube).\n\n\n> B) Opening contains some kind of approximately planar redirection\n>    system that can be geometrically modelled and traced.\n>    Treatment choices:\n>    m: Apply mkillum to surface on interior side.\n>       Advantage: Simple to implement and understand\n>       Disadvantage: Usually not very accurate, depending on the\n>       system.\n\n\nIf your system produces highly localised caustics, you'll need to \nprecompute some very hi-res illums; that would be a *lot* slower than \nphoton ports.\n\n\n>    d: Apply a specialized mkillum replacement to simulate the\n>       effects of the redirection system.\n>       Advantage: Simple to use and understand as well as accurate\n>       Disadvantage: Requires custom algorithm/data for each type\n>       of system. Currently only available as a proprietary\n>       product, and for a very limited set of systems.\n\n\nThis is your approach, right? There's no doubt this is more accurate \n(based on analytical solution, if I'm not mistaken) and probably faster \nthan the pmap approach. The fundamental problem as you point out is of \ncourse the lack of generality. This is the pmap's strong suit, and Wann \nJensen has always emphasised generality and geometric independence \n(photons aren't associated with objects, but rather just with 3D points) \nin his publications. This also makes it relatively easy to integrate a \nphoton map addon into an existing raytracer.\n\n\n>    p: Use a surface on exterior side as photon port.\n>       Advantage: Simple to use and understand\n>       Disadvantage: How robust is this with very complex\n>       reflection paths through the system?\n\n\nOnce a photon has been emitted, it makes absolutely no difference \nwhether it came from \"outer space\" (i.e. the scene cube) or the window. \nIf it gets reflected back out through the port or bounces back inside, \nthat's no problem. A port behaves according to its assigned material \nwhen a photon hits it. Problems may of course arise if the port is \nill-defined (i.e. the system is partly outside, etc). Therein lies the \ninconvenience and potential pitfall for the user.\n\n\n>    n: Do nothing special\n>       Advantage: No need to understand anything\n>       Disadvantage: Extremely inaccurate\n\n\nAgain, this shouldn't be any less accurate than m or p, just \nstupefyingly slow. Of course, not having to know what you're doing is \nrather nice once in a while... :^)\n\n\n> C) Opening with shading/redirection system that is hard to model\n>    geometrically, let alone to trace (TWD, aerogel, etc.)\n>    Treatment choices:\n>    d: Apply a specialized mkillum replacement to simulate the\n>       effects of the system.\n>       Advantage: Simple to use and understand as well as accurate\n>       Disadvantage: Requires custom algorithm/data for each type\n>       of system. Not yet publicly available for this type of systems.\n>    n: No other solution yet that I know of.\n\n\nGenerally, if you can model it with RADIANCE Classic, pmap can trace it. \nCaveat preemptor once again: user-defined BRDFs. I have no idea how \nthese materials are modeled, so I can't say for sure if pmap can handle \nthis situation. Anyone out there try this?\n\n\n> D) Light pipes.\n>    Treatment choices:\n>    p: Photon port at entry of pipe.\n>       Advantage: Appears to work. ;)\n\n\nNo, I didn't run that through the Gimp. :^)\n\n\n>       Disadvantage: Are there restrictions on the pipe geometry\n>       and/or proportions?\n\n\nNope. For all I care your pipes could be Pam Anderson shaped... (go for \nit, Rob!)\n\n\n>    m: Mkillum surface at entry of pipe, feeding the result into\n>       the photon map.\n>       Advantage: Would that improve anything?\n>       Disadvantage: No idea...\n\n\nBeats me. I think this port/illum stuff should be thought out in detail \nagain. As I said, it's not the last word.\n\n\n--Roland\n\n\n\n\n\n\nRoland Schregle\nPhD candidate, Fraunhofer Institute for Solar Energy Systems\nRADIANCE Photon Map page: www.ise.fhg.de/radiance/photon-map\n\n\nEND OF LINE. (MCP)\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-December/000270.html).</sup>", "attachments": [], "created_by_name": "Roland Schregle", "created_at": "December 01, 2003 at 10:45PM", "created_by": "Roland_Schregle", "parent_id": "radiance-dev_000263", "id": "radiance-dev_000270"}