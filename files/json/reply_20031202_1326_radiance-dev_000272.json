{"body": "Roland Schregle wrote:\n\n\n> Georg Mischler wrote:\n>> Roland Schregle wrote:\n>>\n>>> What's defnitely not supported are user defined BRDFs, i.e.\n>>> {Met,Plas,Trans}{Data,Func} and BtdfFunc.\n>>\n>> So what does actually happen when those are encountered?\n>\n> Well, you get a pretty \"unexpected object call\" message that's used as\n> default in the dispatch table, and mkpmap gracefully bails out. :^)\n\n\nNot good enough.\n\n\nThe very least we should do is to deposit the photon there, so\nthat it can get gathered again later. Since we'll be looking at\nthe situation from the other side at gathering time, shouldn't we\nbe able to do the right thing with the BR[T]DF then?\n\n\nThat would basically mean that those materials become a natural\nenergy transfer gateway between the forward and backward tracing\nsystems. In the worst case, you'll have to add a flag to the\nphoton saying \"we still need to look at the surface interaction\nwith this one\".\n\n\nI'm still not completely clear about this transfer phase, btw.\nIf I run rpict with pmap and eg. 5 ambient bounces, is there any\nrisk of double counting any light paths? Or maybe more to the\npoint, how is this avoided?\n\n\nYeah, I know I should read up on Henrik Wann Jensen eventually,\nbut maybe you can still provide a few pointers about how the\ninteraction with Radiance classic is implemented.\n\n\n\n\n>>>-- the spotlight focus is ignored by the photon map,\n>>\n>> Would it be difficult to do this \"right\"? Not saying that it's\n>> necessary, just for the sake of completeness.\n>\n> Not that straightforward; photons would have to be emitted *behind* the\n> light source and pass through it, requiring some ugly special hack.\n\n\nAt some point we'll probably want a good estimation of the\npossible errors, but right now I don't see this as an obstacle.\n\n\n\n\n> Personally, I'm not sure about the wisdom of using illums with\n> the pmap addon. As I understand it, this construct is often used to get\n> a luminance distribution from a window with a facade.\n\n\nWe should probably differentiate between the illum material type\n(which is a normal light source for pmap), and the mkillum\nprogram (which happens to produce illums).\n\n\nBut apart from that, I think that potentially a mkillum generated\nillum surface could replace a photon port at least in some\nsituations. However, the two approaches seem to have different\nstrengths and weeknesses.\n\n\n\n\n> If you're using\n> specular materials illum probably won't cut it and you'll need to use\n> the pmap + port approach. On the other hand, diffuse external\n> interreflections are probably better handled via an illum.\n\n\nMaybe we could make a table what happens with each of them in all\nrelevant situations, to get an idea about how to reach the best\ncombined result. We should probably look at at least the\nfollowing matrix:\n\n\nReceiving side:\n - direct sun (light)\n - direct sky (glow)\n - reflected (sky and sun)\n\n\nEmitting side:\n - direct calculation\n - ambient calculation\n - direct view to surface\n - direct ray with rtrace\n\n\nFor the moment, this is ignoring any other aspects, like geometry\nelements in front of or behind the respective surface. We can\nlook at situations like this later.\n\n\n\n\n> The photon port stuff is effectively just a hack I needed to get quick\n> daylight simulations, and certainly shouldn't be considered the\n> definitive workaround to the efficiency problems posed by distant\n> sources. It's neither elegant nor flexible, but it gets the job done.\n\n\nIt follows an established pattern about how users can inform the\nsoftware about special properties of their scene geometry.\nImplementation details can of course still be subject to debate\nand possible improvements.\n\n\n\n\n> I discussed this with Peter A.B. and we concluded it was better to add an\n> extra construct specifically for the purpose, although I can't exactly\n> remember why. I think one of the main reasons was the limited spatial\n> resolution of illums, which could give rise to aliasing and therefore\n> bias in the photon distribution.\n\n\nI think it would be helpful if either of you could dig up those\narguments (unless they were only exchanged verbally). To me it\ncurrently feels like we have all (or most) of the building blocks\nto make this really useful. We might just need to combine them\nthe right way, and maybe add one or two missing links.\n\n\n >>    d: Apply a specialized mkillum replacement to simulate the\n>>       effects of the redirection system.\n>>       Advantage: Simple to use and understand as well as accurate\n>>       Disadvantage: Requires custom algorithm/data for each type\n>>       of system. Currently only available as a proprietary\n>>       product, and for a very limited set of systems.\n>\n> This is your approach, right? There's no doubt this is more accurate\n> (based on analytical solution, if I'm not mistaken) and probably faster\n> than the pmap approach.\n\n\nIt's not really \"my\" approach, although I'm trying to sell it...\nThe improved accuracy doesn't actually have much to do with the\nanalytically generated data, working with measured data would at\nleast in theory be just as fine. The main advantage is that the\nbehaviour of the system is already known beforehand, and at an\nappropriate resolution. During the simulation all that remains\nto do are table lookups, which means the results are exactly as\naccurate as the underlying data set.\n\n\n\n\n>>    p: Use a surface on exterior side as photon port.\n>>       Advantage: Simple to use and understand\n>>       Disadvantage: How robust is this with very complex\n>>       reflection paths through the system?\n>\n> Once a photon has been emitted, it makes absolutely no difference\n> whether it came from \"outer space\" (i.e. the scene cube) or the window.\n> If it gets reflected back out through the port or bounces back inside,\n> that's no problem.\n\n\nThe question wasn't so much about the behaviour of the ports.\nI guess I'm wondering generally about how the photon map will\nperform when penetrating very detailed and convoluted geometry.\n\n\n\n\n>> D) Light pipes.\n>>    Treatment choices:\n>>    p: Photon port at entry of pipe.\n>>       Advantage: Appears to work. ;)\n>>       Disadvantage: Are there restrictions on the pipe geometry\n>>       and/or proportions?\n>\n> Nope. For all I care your pipes could be Pam Anderson shaped... (go for\n> it, Rob!)\n\n\nThat's basically again the same question as above: What happens\nin practise if the pipe turns around two or three corners?\nI assume that partly depends on the parameter settings. I'm just\ntrying to get a feeling about the possibilities and limitations.\n\n\nFor the same reason, and to give those theoretical deliberations\na more realistic foundation, I'd like to encourage other people\nwho have used the photon map extension to act on Gregs request,\nand share their practical experiences. You can either do this\nthrough one of the mailing lists, or directly to Greg and/or me.\nRoland, do you have a list of users that you could politely ask\nto chime in? The more feedback we get, the better.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-December/000272.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "December 02, 2003 at 01:26PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000263", "id": "radiance-dev_000272"}