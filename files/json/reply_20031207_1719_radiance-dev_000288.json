{"body": "Greg Ward wrote:\n\n\n> A) Maintain and support current version of software with patches, bug\n> fixes, etc., while simultaneously:\n> B) Developing and testing new version \"in house\" and with select alpha\n> users who are happy to ride the crest of the wave knowing full well the\n> risk of wiping out.\n> C) When the alpha testers are satisfied that the new additions are\n> working, release to a larger number of beta testers, who employ the\n> software in the field, until:\n> D) The new version is considered ready for release.  At that point, the\n> old version is phased out, and users are encouraged (if not forced) to\n> upgrade to the new release if they want support.\n\n\nThere's a variation of that pattern in use by a growing number\nof Open Source projects. They have alternating \"production\" and\n\"development\" versions, where usually the minor version number\nindicates which is which. Even numbers are considered stable.\n\n\nAt one point in the development, the development version will get\nbranched into the production version. On this branch, there will\nonly be bug fixes up to the official release, and critical fixes\nfrom the following development branch will be backported after\nthat. In the development version, there can be snapshot (or\n\"milestone\") releases once in a while, which are usually made\nbefore work on some big new feature is started.\n\n\nWe're not running under CVS long enough for this to be practical\nyet, but maybe we could do something similar after 3.6 is out.\nI don't know if that would have any negative impact on the number\nof testers for the development branch. Seeing the type of people\nwho ride the front wave right now, I'd expect them to keep doing\nthe same thing in either case, though. For the others who just\nwant the most current stable release, having a stable version\navailable that gets critical bugfixes backported would be an\nimprovement over what they get with 3.5 right now.\n\n\n\n\n> Crashing behavior and fatal errors caused by perfectly valid\n> input should be avoided at all costs, especially in the core tools.\n\n\nThat's a much clearer phrasing of what I already tried to say.\n\n\n\n\n> If the photon map code doesn't support BRTDfunc's (or whatever),\n> they can grab the diffuse parameters and simulated it that\n> way, posting a warning so the user is aware of it.\n\n\nWarnings would be an acceptable start. Maybe a choice for the\nuser between performance (with warnings) and the apparently very\nslow full sampling could be added later, assuming it proves to be\nuseful.\n\n\n\n\n> As an experiment, however, I see no reason not to proceed.\n> We could add it as a CVS branch initially if we want to be paranoid\n> about it, but I'm happy to defer to others on that decision.\n\n\nIf we do a branch for this, I'd prefer it to be as short lived as\npossible. Although adding the photon map is a big conceptual\nstep, it appears to be only minimally invasive on a coding level.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-December/000288.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "December 07, 2003 at 05:19PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000283", "id": "radiance-dev_000288"}