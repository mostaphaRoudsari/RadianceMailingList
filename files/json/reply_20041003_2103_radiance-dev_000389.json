{"body": "--- Carsten Bauer <cbauer- at t-online.de> wrote:\n\n\n> For those who are interested:\n> There's a C++ version of Radiance available,\n> however, this is not \n> original Radiance anymore as I performed some\n> considerably changes\n> (added new features/deprecated some of the old\n> ones), and it's still a \n> work in progress, currently focusing only on the\n> rendering programs \n> rpict/rview.\n> see http://www.cb-d.de/radzilla.html\n\n\nHey Carsten,\n\n\ngreat site! I liked photon mapping integration and may\nend up \"stealing\" some code from you :)\n\n\nI liked your comments about C++ porting because I was\ntoying with the idea of OO-ing Radiance for some time\nbut then I started thinking: what parts of code would\nreally profit from OO-ing it, both performance and\nextensibility-wise?\n\n\nAs I haven't found a satisfactory answer to this\nquestion I decided not to mess with it. Eventually,\ninterfacing Radiance to other packages (often written\nin C++) may make me understand these issues better.\n\n\nMy current approach is: as little changes as possible.\nFor example, I included bmalloc.c in library build\nsimply because it will take more #ifdef _WIN32 in the\nother code that calls bmalloc, than casting void* to\n(char*) before incrementing it.\n\n\nIn any case, your experiences with porting to C++ are\nvery valuable and interesting to me.\n\n\nThanks,\nTony \n\n\n\n\n\n\n__________________________________\nDo you Yahoo!?\nYahoo! Mail - 50x more storage than other providers!\nhttp://promotions.yahoo.com/new_mail\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2004-October/000389.html).</sup>", "attachments": [], "created_by_name": "Tonko Juricic", "created_at": "October 03, 2004 at 09:03PM", "created_by": "Tonko_Juricic", "parent_id": "radiance-dev_000384", "id": "radiance-dev_000389"}