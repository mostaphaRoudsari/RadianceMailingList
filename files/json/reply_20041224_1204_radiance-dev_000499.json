{"body": "Ignacio Mun\u00e1rriz wrote:\n\n\n>Greg, unfortunately, although polling is very simple, it is also very\n>inefficient. The CPU can waste an awful lot of time just waiting for input.\n>And i need that time for ray calculation. I think that rholo start a fork\n>process and the processor divide the time between ray calculation and\n>visualization-events. The best way would be that the hardware interrupt call\n>diretly the event function so dont need a loop to search for input\n>  \n>\nIRQ handling with X11 ? Hm. IRQ handling is approximately half-a-dozen \nlayers underneath the X11 library calls. So these are really two very \ndifferent worlds.\nAnyway; X11 has ways to specify call-backs, but as far as I remember \ninterleaving them with other, non-X11 tasks is cumbersome. So using the \nX11 polling calls is likely the easiest way to go.\nYour program wouldn't waste CPU cycles because it does the raytracing. \nJust check for pending user input every 30 to 100 milliseconds is \npractically enough for interactive update rates (provides your program \ncollects all pending input then and not just the last one) and that time \ninterval could be given by querying some clock (man gettimeofday)  or \nset a timer (man ualarm), which should both have neglectable overhead.\n\n\nmy 2-euro-cents thoughts\n-Peter\n\n\n\n\n pab-opto, Freiburg, Germany, http://www.pab-opto.de\n [see web page to check digital email signature]\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2004-December/000499.html).</sup>", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "December 24, 2004 at 12:04PM", "created_by": "Peter_Apian-Bennewitz", "parent_id": "radiance-dev_000496", "id": "radiance-dev_000499"}