{"body": "Ignacio Mun\u00e1rriz wrote:\n\n\n>...\n>I am only starting with the viewer, learning greg's code (it's amazing). I\n>would like to do an interactive viewer althougth it works at small\n>resolutions (300x300 px or so) starting from rview. I think rview can be\n>optimized for architecture visualization on some ways:\n>\n>- adding interactive orbit, pan and walkthrough functions\n>- using opengl to obtain point(color=object number,z buffer=distance)\n>intersections from viewer\n>- using opengl to make shadow maps from light points and using them or\n>forcing the ray calculation in function of the distance to the shadow (to\n>avoid too small shadow pictures)\n>- using the irradiance caching but adding to the file all the values cached\n>from all the hemisphere and using them to the ambient component (indirect\n>irradiance) and also for the rough specular component\n>- using opengl objects duplication in the plane of simmetry and stencil\n>buffer to calculate points intersections of reflections(specular\n>sampling)(color=object, zbuffer=distance)\n>\n>The viewer will try to optimize time but maintaining all greg's light and\n>material calculation\n>  \n>\nHi Ignacio\n\n\nvery noble and good ideas. If you want more two-cents thoughts on \nmerging raytracing and Open-GL from an old chap:\nIt has been tried before, one is rshow (nudge-nudge,wink-wink to use a \nPython phrase) the other was an LBNL project approx 6 years ago which \naimed at achieving realtime RT with a Cray as backend (there may very \nwell be other projects that I'm not aware of). The later had been \noriginal fueled by a proposal written by Greg (than at LBNL), but \napparently the thing didn't take off (a good part being that Greg wasn't \nat LBNL anymore).\n From these, one core problem seemed to be that Open-GL and the Radiance \nengine differ vastly on how they are able to handle large sets of \nobjects. Naked Open-GL scales badly with the number of objects to \ndisplay, while the Radiance engine scales well but throws away all \nvalues (in rview at least). Rholo re-uses the values, but doesn't seem \nto implement Open-GL to its maximum use (e.g. it doesn't try to use HW \naccelerated rendering to fill time wise intermediate gaps in RT data, it \ndoesn't map any values to 3d polygons in the scene, etc.). Due to the \nfirst fact, that Open-GL doesn't scale well, such a hybrid approach \nseems tricky, as a straight 1:1 use of existing geometry would \npotentially dead-lock on complex geometries (the location of that \nboundary depends on the power of the graphic card).\nA meta-3D-structure that envelopes the core structures of the 3d model \nand thereby de-douples the Open-GL rendering from the complexity of the \nunderlying input geometry, while offering surfaces to map RT generated \ndata onto, is conceivable. And left as an exercise to the reader....\nI'm not current with computer graphics at all, just some thoughts where \ngreen gras *may* be over the hill in another valley.\n\n\nNow- where are those Xmas cookies, and what's on for dinner tonight -\ncheers\nPeter\n\n\n\n\n pab-opto, Freiburg, Germany, http://www.pab-opto.de\n [see web page to check digital email signature]\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2004-December/000502.html).</sup>", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "December 25, 2004 at 01:04PM", "created_by": "Peter_Apian-Bennewitz", "parent_id": "radiance-dev_000496", "id": "radiance-dev_000502"}