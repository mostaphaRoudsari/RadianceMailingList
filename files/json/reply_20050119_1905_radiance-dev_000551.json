{"body": "Others have worked on the problem of getting illuminance data from  \nRadiance for the purpose of generating walkthroughs.  The thing is,  \nRadiance doesn't keep any information on a regular grid that translates  \nto vertex values.  And Radiance doesn't rely on polygons in general, so  \nthere are two snags.  Anyway, check out Bernhard Spanlang's  \npresentation from the 2002 workshop:\n\n\n\thttp://www.radiance-online.org/radiance-workshop1/cd/Spanlang/ \nindex.html\n\n\nSee also Richard Gillibrand's work from the 2003 workshop:\n\n\n\thttp://www.radiance-online.org/radiance-workshop2/cd/Gillibrand/ \nabstract.html\n\n\nIf you're just after the values on one polygon, one trick is to render  \nthe polygon by itself to figure out which rays you need to trace, then  \ntrace them.  Here's how I would do it:\n\n\n\t% vwrays -x 200 -y 200 -vf view2poly.vf -fd \\\n\t\t| rtrace -h -opN -fdd `vwrays -d -x 200 -y 200 -vf view2poly.vf`  \n'\\!oconv poly.rad' \\\n\t\t| rcalc -id6 -od -e 's(x):x*x;cond=s($4)+s($5)+s($6)-.5' -e  \n'$1=$1;$2=$2;$3=$3;$4=$4;$5=$5;$6=$6' \\\n\t\t| rtrace -h -fda -I [render options] scene.oct > irrad_results.dat\n\n\nThe vwrays command generates the rays associated with a view of the  \npolygon.  The first rtrace command gets the surface points and normals  \nfor the rays that hit your polygon.  The rcalc command throws out rays  \nwhose surface normal is (0,0,0), which is what rtrace produces for rays  \nthat didn't hit anything.  The second rtrace  command then computes the  \nirradiance for the surface points.\n\n\nI didn't try this, so most likely I screwed up something, but it's a  \nhint.\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2005-January/000551.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "January 19, 2005 at 07:05PM", "created_by": "Greg_Ward", "parent_id": "radiance-dev_000545", "id": "radiance-dev_000551"}