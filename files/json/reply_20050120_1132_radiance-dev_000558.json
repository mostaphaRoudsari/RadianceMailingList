{"body": ">     % vwrays -x 200 -y 200 -vf view2poly.vf -fd \\\n>         | rtrace -h -opN -fdd '\\!oconv poly.rad' \\\n>         | rcalc -id6 -od -e 's(x):x*x;cond=s($4)+s($5)+s($6)-.5' -e \n> '$1=$1;$2=$2;$3=$3;$4=$4;$5=$5;$6=$6' \\\n>         | rtrace -h -fda -I [render options] scene.oct > irrad_results.dat\n\n\nOk, I get it now.  A few things though:\n\n\nIf we have a complex scene describing a room and a single polygon (say \nnamed 'target') in it somewhere, should we instead of using -opN use -os \nand then use -is -e 'cond=if($1=target, 1, 0)' or something to check \nthat we've hit the particular polygon, as it is likely that every ray \nwill in fact hit something.\n\n\nThe other problem is what if any object is between the view point and \nthe target polygon?  Is there any way to trace through those objects?\n\n\nAnd also, since we need quite an accurate rating of illuminance, we will \nneed to do some trig to determine the distance between the sample \nilluminance points in the real world, in order to be able to compute \nirradiance/m^2 for example.  This will depend on the distance of the \nview point from the target and other things, which is why obstructing \nobjects become a problem.\n\n\nMany thanks by the way - we had no idea that 'cond' existed.  It's just \nallowed us to remove a heap of code :)\n\n\nChris\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2005-January/000558.html).</sup>", "attachments": [], "created_by_name": "Christopher Kings-Lynne", "created_at": "January 20, 2005 at 11:32AM", "created_by": "Christopher_Kings-Lynne", "parent_id": "radiance-dev_000552", "id": "radiance-dev_000558"}