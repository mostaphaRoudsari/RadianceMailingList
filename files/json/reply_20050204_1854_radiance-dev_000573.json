{"body": "The locking requirements for Radiance are really quite minimal:\n\n\n1) One process says in effect, \"I need to have exclusive use of this \nfile\"\n2) Said process waits until other processes are done reading (or \nwriting) the file.\n3) Process gets lock; all other processes unable to read or write the \nfile.\n4) Process does its thing, releases lock.\n5) Life goes on...\n\n\nWhy is this difficult?  Well, it seems that this sort of behavior gets \nin the way of efficient (i.e., cached) network filesystems, so some \nversions of NFS don't bother with it, or do it badly.  Even \nimplementing our own lock mechanism via creating a separate file that \nsays our ambient file is in use suffers from race conditions.  These \nrace conditions have been worked out by the sendmail developers, but \nthe solution is quite complicated.  The good news is that it works and \nhas been tested on many different Unix implementations.  So, this looks \nlike the easiest path to our goal.\n\n\nMy motivation for doing this work is unfortunately low, because I'm \nusing FreeBSD and OS X systems with perfectly adequate NFS lock \nmanagers.  I don't even have a good way of testing any proposed fix, \nbecause nothing is currently broken for me.  That's not to say I don't \ncare if other people are having problems -- it simply means that I'm \nnot in a very good position to help.  What we need is a good programmer \nwho uses Radiance on a Linux cluster and can do some testing for us (at \nleast).  I also need to free up some time, which has proved \nchallenging, lately.  (Hence my short and mistake-ridden replies.)\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2005-February/000573.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "February 04, 2005 at 06:54PM", "created_by": "Greg_Ward", "parent_id": "radiance-dev_000572", "id": "radiance-dev_000573"}