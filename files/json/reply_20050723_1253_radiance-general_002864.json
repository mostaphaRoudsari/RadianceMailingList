{"body": "Hi Iebele,\n\n\nI'm anything else than a BRDTF expert, so my answer is a bit short  .. \nat least for the moment\n\n\n> 1. Distant objects seem to reflect more as nearby objects, in term of \n> renderings: the reflection changes as a funtion of the angle between \n> ray direction ad surface normal\n> 2. Some roughness/noise is visible at a distance, while nearby the \n> surface is just dull.\n> 3. The color changes somehow as a funtion of the distance to a bit \n> more blue/less saturation\n> 4. Specular highlights are very soft and relative to the 'eye-position'\n>\nin other words. specular reflection increases with higher incidence \nangles (measured from the surface normal normal). ..sounds reasonable..\n\n\n> 1.\n> The first question of all is how I could possibly find the \n> ray-direction and value of incident light within  a  brtdf. Are there \n> globally defined variables for these (like Dx, Dy, Dz) ?\n\n\n\n\nthe direction and value of the incident light as seen from the current \nray hit is calculated within the program when stepping through the list\nof sources and adding up their contributions, but this means of course \nthat in general there is not one value and one direction which could be \nexported, but many.\nWhy do you need them? Normally they're dealt with internally, the BRTDF \ngets the direction to the source and then gives back the specular \n(and/or transmission) coefficient of your material for that incident \nangle and your current view ray angle.\n(but I definitely need to have a closer look on how the BRDTF stuff is \nevaluated in Radiance before writing on further ..).\n\n\n\n\n> 3.\n> The last question is: can I change the line below in a more elegant \n> way, like the pow(base,exp) function in c: :\n> refl  =  \n> (1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi)*(1-multi) \n> ;\n>\nThe functional language defines a pure exponential funtion e^x ( or \nexp(x), as it is called). To calculate arbitray powers with it, proceed \nas follows:\n  x^y   = e^y*lnx  or  x^y = exp(y*log(x))  in the syntax of the \nfunctional language\n\n\n-cb\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2005-July/002864.html).</sup>", "attachments": [], "created_by_name": "Carsten Bauer", "created_at": "July 23, 2005 at 12:53PM", "created_by": "Carsten_Bauer", "parent_id": "radiance-general_002849", "id": "radiance-general_002864"}