{"body": "Hi Greg,\n\n\nThanks for your help.\n\n\n>Is this the target compiler we had in mind?  I don't know anything  \n>about what's available under Windows, if schorsch (Georg Mischler)  \n>meant for people to use the more common (and nasty) Visual C  \n>standard.  In other words, I'm not sure if by checking in these  \n>changes if I'd actually be making matters worse.  For that reason,  \n>I'd prefer to leave Windows-related changes to schorsch, though I  \n>know he's been busy on other projects lately.\n\n\nWell, Scons is \"smart\" enough to figure out what is available\nin the system. Georg prepared a Visual C++ oriented platform\nconfiguration for windows in the platform folder, so I guess\nit is what he has used so far. Somebody else in this ml has used the\nBorland compiler, if I remember well ...\nOf course I can wait until Georg finds some time to reply.\n\n\nI've just noticed I forgot to mention that I've also added\nlibws2_32 (-lws2_32) to the list of linked libraries to get \nsome programs compiled.\n\n\n>This seems a safe enough change, though rtprocess.h, where RT_PID is  \n>defined, is not currently included in ranimate.c and will need to be  \n>added.\n\n\nOh yes, I had to add it.\n\n\n>The original call:\n>\n>     if (fseeko((FILE *)e->data, *(off_t *)p, SEEK_CUR) < 0) {\n>\n>could be replaced by:\n>\n>     if (fseek((FILE *)e->data, *(off_t *)p, SEEK_CUR) < 0) {\n>\n>or even -Dfseeko=fseek on the compile line and it should work for  \n>files less than 2 GB in size.  I assume that off_t is defined in your  \n>system, otherwise you would have had other errors.  If it isn't  \n>defined as \"long\", then you might need another cast, like so:\n\n\n>     if (fseek((FILE *)e->data, (long)*(off_t *)p, SEEK_CUR) < 0) {\n\n\n>Once we find a working substitute, we can add the appropriate macro  \n>to platform.h.\n\n\nI've tried all of them, and they compile. What is strange is that\nif I use both -f somefile.cal and -o somefile.dat, the program \nexits nicely without writing the file, but if I remember well\nonly with windows, not with linux ... strange!\nI don't think I'm doing anything wrong ...\nI will check it twice, but anyway it is not a problem, since output\nto stdout works perfectly to calculate daylight coefficients ...\n\n\nBTW It looks like the mingw developer are going to add support for large\nfile system files at some point, probably later than sooner ...\n\n\nThanks again for your quick reply.\nI think rtcontrib will definitely make my \"Radiance life\" simpler ;) \nIt's oh so good to have all the contributions\nfrom different light sources calculated separately at the same time !!!\n\n\nCiao ciao,\n\n\nFrancesco\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2005-September/000643.html).</sup>", "attachments": [], "created_by_name": "Francesco Anselmo", "created_at": "September 12, 2005 at 11:11PM", "created_by": "Francesco_Anselmo", "parent_id": "radiance-dev_000641", "id": "radiance-dev_000643"}