{"body": "Francesco wrote:\n> Georg Mischler wrote:\n>> We should create a seperate platform/mingw.cfg with\n>> the parameters found. Francesco: Did you find any easy way to\n>> tell the difference from within SCons/Python? We already have a\n>> seperate *.cfg file for normal cygwin (using posix libraries),\n>> but I don't remember how we figured out when to use that.\n>\n> Since the platform is recognised as \"win32\"\n> I created my own platform\\win32_custom.cfg\n\n\nCreating an extra platform\\mingw.cfg is the correct way to do it.\nThose files are not just for each platform (despite the directory\nname), they are for each compile environment.\n\n\n\n\n>> What were the RAD_COMPAT entries?\n>\n> I've added only \"fixargv0.c\", and copied the actual file inside\n> the utils and rt folders.\n\n\nThis belongs to the RAD_ARGSCOMPAT config variable, which puts\nthe compiled objects into librtargs.a.\nThe generic RAD_COMPAT is actually obsolete.\n\n\n\n\n>>> I've just noticed I forgot to mention that I've also added\n>>> libws2_32 (-lws2_32) to the list of linked libraries to get\n>>> some programs compiled.\n>>\n>> What does this do? Is this a compatility layer added by mingw?\n>\n> I haven't understood well it either. It is the winsock library,\n> so it may seem unrelated, but before adding it, the linker\n> was complaining about many linking errors, and adding it solved the\n> situation. I haven't investigated any further.\n\n\nAh, that are the calls to gethostname().\nVC uses a lot of magic to fund libraries when you include\ncertain headers, so very few explicit linker directives are\nnecessary. With gcc, we need to be more specific.\n\n\nI added a new variable RAD_SOCKETLIB, the contents of which are\nalways linked to when -lrtnet is also present. This removes the\n-lws2_32 from the generic LINKFLAGS.\n\n\n\n\n> The previous cygwin config file was working well, BTW ...\n\n\nYes, but it's doing the same things in much cleaner ways now.\n\n\n\n\n> Cygwin already provides fseeko and ftello.\n\n\nAnd here's the implementation:\n  http://article.gmane.org/gmane.comp.gnu.mingw.user/11984\nUnfortunately, fpos_t may be a struct on *some* Windows systems\n(haven't found out which), and will then cause the build to fail.\nBut it seems reasonable to assume that this solution will work on\nsystems that support large files. It will probably end up in a\nnew file such as common/win_lfs.c.\n\n\n\n\nGreg wrote:\n> Then it's probable something is dying in the -f option processing\n> that has nothing to do with fseeko().  I'm checking the library path\n> with a call to getpath(), so if that was screwing up before, maybe\n> it's screwing up during the -f processing as well.\n\n\nWhich means we need to check my Windows version of getpath().\nFrancesco, do you have a debugger available to trace through\nthis? Or does it get better if you specify fixargv0.c correctly\nwith the RAD_ARGSCOMPAT variable? Do you have the RAYPATH set\ncorrectly? (for getrlibpath(), by default it uses \";c:\\ray\\lib\")\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2005-September/000649.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "September 14, 2005 at 04:17PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000641", "id": "radiance-dev_000649"}