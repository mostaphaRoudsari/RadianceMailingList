{"body": "pisuke at blueyonder.co.uk wrote:\n\n\n> diff -r ray/platform/mingw.cfg ray_dev/platform/mingw.cfg\n> 13c13\n> < CPPDEFINES: _WIN32 NDEBUG _CONSOLE _MBCS HDSUF=.exe\n> ---\n> > CPPDEFINES: _WIN32 NDEBUG _CONSOLE _MBCS HDSUF=.exe NON_POSIX\n\n\nNON_POSIX is set in common/platform.h based on _WIN32, so there\nis no need to set it here. If you still get errors, then you\nprobably need to #include platform.h somewhere.\n\n\n\n\n\n\n> 25c25\n> < RAD_ARGSCOMPAT: fixargv0.c\n> ---\n> > RAD_ARGSCOMPAT: getpath.c fixargv0.c\n> 28c28\n\n\ngetpath.c is always included in librtargs.a. If a program needs it,\nthen you should link it to that library.\n\n\n\n\n\n\n> < RAD_PROCESS: win_process.c win_popen.c\n> ---\n> > RAD_PROCESS: gethomedir.c eputs.c getpath.c win_process.c win_popen.c\n\n\nFor gethomedir.c and getpath.c, link to librtpath.a.\nFor eputs.c, link to librterror.a.\nFor win_process.c and win_popen.c, link to librtproc.a.\n\n\nWith all those libraries, note that some linkers may require them\nto be added in a certain order. So if a specific function isn't\nfound, it may be just necessary to reorder the list appropriately.\n\n\n\n\n\n\n> 29a30\n> > RAD_MLIB:   m\n\n\nThis was indeed an omission.\n\n\n\n\n\n\n> diff -r ray/src/common/rtprocess.h ray_dev/src/common/rtprocess.h\n> 24c24\n> <   int win_kill(RT_PID pid, int sig /* ignored */);\n> ---\n> >   int win_kill(RT_PID pid, RT_PID sig /* ignored */);\n\n\nAhem, no. The signal number doesn't have the same type as a PID.\nIt's rather the \"pid\" variable in rtcontrib.c:killpersist() that we\nneed to change.\nWhat kind of problem were you trying to fix with this?\n\n\n\n\n\n\n> diff -r ray/src/common/SConscript ray_dev/src/common/SConscript\n> 17c17\n> <               font.c mesh.c readmesh.c tmesh.c sceneio.c xf.c''')\n> ---\n> >               font.c mesh.c readmesh.c tmesh.c sceneio.c xf.c win_popen.c\n> win_process.c''')\n\n\nNever add platform specific files directly to the argument list.\nThat's what the compat variables are there for.\nAnd those two files clearly have nothing at all to do with scene\nfile parsing, so it would be the wrong place to add them anyway.\nLink to librtproc.a instead.\n\n\n\n\n\n\n> diff -r ray/src/common/win_process.c ray_dev/src/common/win_process.c\n> 284c284\n> <       cmdstr = quoted_cmdline(cmdpath, av);\n> ---\n> >       cmdstr = quoted_cmdline(cmdpath, av+1);\n\n\nCorrect as discussed.\n\n\n\n\n\n\n> 290c290\n> < int win_kill(RT_PID pid, int sig) /* we ignore sig... */\n> ---\n> > int win_kill(RT_PID pid, RT_PID sig) /* we ignore sig... */\n\n\nAgain: A signal number doesn't have the same type as a PID.\n\n\n\n\n\n\n> 328c328\n> <                       int win_kill(pid, 0);\n> ---\n> >                       win_kill(pid, 0);\n\n\nYeah, that did indeed look strange...\n\n\n\n\n\n\n> diff -r ray/src/gen/SConscript ray_dev/src/gen/SConscript\n> 6a7\n> > socketlib = env['RAD_SOCKETLIB']\n> 35c36\n> <             source=p[1], LIBS=p[2] + mlib)\n> ---\n> >             source=p[1], LIBS=p[2] + mlib + socketlib)\n\n\nWhich programs asked for this?\nYou can instead add '$RAD_SOCKETLIB' to those that really need it\n(and tell me which ones those are, so I can put it into CVS).\n\n\n\n\n\n\n> diff -r ray/src/rt/rtrace.c ray_dev/src/rt/rtrace.c\n> 31a32\n> > #include  \"random.h\"\n\n\nLooks like Windows does indeed need this.\n\n\n\n\n\n\n> diff -r ray/src/util/ranimate.c ray_dev/src/util/ranimate.c\n> 338c338,339\n> <               if (errno == ENOENT && mkdir(vval(DIRECTORY), 0777) == 0)\n> ---\n> > /*            if (errno == ENOENT && mkdir(vval(DIRECTORY), 0777) == 0)*/\n> >               if (errno == ENOENT && mkdir(vval(DIRECTORY)) == 0)\n\n\nI added a macro to common/paths.h which should take care of this.\n\n\n\n\n\n\n> diff -r ray/src/gen/mkillum.c ray_dev/src/gen/mkillum.c\n> 168c168\n> <       if (fscanf(fp, \"%*s %d\", &pid) != 1 || kill(pid, SIGALRM) < 0)\n> ---\n> >       if (fscanf(fp, \"%*s %d\", &pid) != 1 || kill(pid, SIGTERM) < 0)\n\n\n> diff -r ray/src/util/rtcontrib.c ray_dev/src/util/rtcontrib.c\n> 342c342\n> <       if (fscanf(fp, \"%*s %d\", &pid) != 1 || kill(pid, SIGALRM) < 0)\n> ---\n> >       if (fscanf(fp, \"%*s %d\", &pid) != 1 || kill(pid, SIGTERM) < 0)\n\n\nFor the moment, I added macros that redefines SIGALRM as SIGTERM\nif the former is not known, which is a portable workaround.\n\n\nThere are two things to consider here (for Greg, primarily):\nFirst, both mkillum and rtcontrib define an identical(!) function\nnamed killpersist(). This is bad design, because redundant code\nmultiplies potential errors.\n\n\nSecond: kill() on Windows is currently equivalent to the brute\nforce kill(pid, SIGKILL) on unix, where the actual signal number\nis completely ignored. This means that rtrace can't do the\ncleanup that it otherwise would do.\n\n\nI think that all this persistence magic should be moved to our\nprocess management library, so that it can be handled in a\nplatform independent manner with all functionality preserved.\n\n\n\n\n\n\n> 979c979,980\n> <       if (fseeko((FILE *)e->data, *(off_t *)p, SEEK_CUR) < 0) {\n> ---\n> > /*    if (fseeko((FILE *)e->data, *(off_t *)p, SEEK_CUR) < 0) {*/\n> >       if (fseek((FILE *)e->data, (long)*(off_t *)p, SEEK_CUR) < 0) {\n\n\nWe better solve this temporarily via -Dfseeko=fseek in mingw.cfg,\nuntil the actual replacement for fseeko() is ready.\n\n\n\n\n\n\n> diff -r ray/src/util/SConscript ray_dev/src/util/SConscript\n> 24a25,27\n> > ('rtcontrib',    Split('rtcontrib.c') + [Version],\n> >       ['rttrace', 'rtscene', 'rtpic', 'rtfunc', 'rtproc', 'rtio', 'rtmath',\n> >       'rtargs', 'rtpath', 'rtcont', 'rtmem', 'rterror','ws2_32'])\n> 34c37\n> <       ['rtpic','rtargs','rtio','rtcont','rtmem','rtpath','rtmath',\n> ---\n> >       ['rtproc','rtpic','rtargs','rtio','rtcont','rtmem','rtpath','rtmath',\n\n\nI changed the sequence here a little, which may or may not matter.\nMore importantly, I changed 'ws2_32' to '$RAD_SOCKETLIB'.\n\n\nI also modified the build procedure for ranimate, so that the\ndecision between util/netproc.c and util/win_netproc.c is made\nin the *.cfg file through the RAD_NETCOMPAT variable. This has\nmoved one more platform specific detail away from the local\nSConscript files.\n\n\n\n\n\n\nI commited all the changes to CVS and checked that it still\ncompiles on Linux.  There may be two or three small things that\nyou still need to look at more closely for mingw.  I assume that\nall of those changes are also beneficial for compiling with VC,\nso this is a very valueble contribution!\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2005-September/000654.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "September 19, 2005 at 01:48PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_000641", "id": "radiance-dev_000654"}