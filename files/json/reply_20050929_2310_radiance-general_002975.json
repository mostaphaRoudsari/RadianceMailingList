{"body": "On 29.09.2005, at 19:19, Kirk Thibault wrote:\n\n\n> I am fairly new to unix usage, so i have not developed a preference  \n> for a particular flavor of shell.  As I am now beginning to  \n> experiment with more shell programming, the question is, are there  \n> particular aspects of RADIANCE that make programming it in a  \n> particular shell more advantageous to others?\n>\n> I was using tcsh (the Mac OSX former default) but am at the point  \n> where I want to explore other options.\n\n\nRather than focusing on Radiance you should consider your primary\nenvironment and day to day tasks to define your shell of choice:\n\n\nsh -   plain old shell\n        most portable across platforms/shells but not much features\n\n\nbash - very popular on (and because of) Linux\n        most Linux sysadmin scripts around are for bash\n        most scripts around are in bad style but nobody knows better\n        environment often highly customized in current distributions\n        (makes it harder to learn plain bash)\n\n\ncsh -  traditional shell for most Unix flavours\n        C-like syntax (if that's any help to learn it)\n        in older incarnations harder to use because it's\n        missing bash-like usability \"enhancements\"\n        probably most compatible across platforms (\"already installed\")\n        Radiance ships with some scripts in csh\n\n\ntcsh - better to use but still compatible to csh\n\n\nzsh -  very powerfull shell\n        not much in use, though (read: not much examples around)\n\n\nksh -  default shell on AIX systems\n        little used elsewhere\n\n\n\n\nI started out with bash but never bothered to do real script\nprogramming because I tend to use Python for anything that\nrequires more than 5 lines of code. I don't think any of these\nshells is particularly good for Radiance because they all\nprovide the basic shell environment which makes Radiance\nso flexible (pipes, redirection, filter etc.).\n\n\nIf you want to create scripts that should be used by more than\none person keep them well documented. Anyone knowing anything\nabout shell scripting should then be able to understand what\nyou are doing. If you want to share your scripts as well you\nshould try to aim for POSIX compliance and avoid shell typical\nenhancements. This will help others to reuse your scripts on\nother platforms/shells/implementations of your shell.\n\n\nKnowing a bit about *sh is essential to get anything done but\neven small tasks may be worth a \"proper\" programming language:\n\n\n1) For more complicated things (name rewriting etc.) you will\n    have to use sed/awk/perl (that's the unix way to do things)\n    more sooner than later. So you'll have to know their syntax\n    as well and your co-admins will have to know them, too.\n\n\n2) Python/Ruby/TCL/Perl(!) are better to understand for non-gurus\n    than esoteric shell constructions are. (Readability does not\n    depend on the language but on your style, though).\n\n\n3) Perl, TCL and Python are available on nearly all platforms\n    now and typically installed by default.\n\n\n4) You can extend simple scripts with GUIs and output processing\n    (PDF, visualization) better (if there are libraries available).\n    Shell scripts will meet their limit pretty soon.\n\n\n5) If everyone would focus on Python we could collect some money\n    and pay Schorsch to write a proper library for Radiance. That's\n    only my biased opinion, of course ;)\n\n\n\n\nOn the whole I'd recommend one of Python/Ruby/Perl for more ambitious\nscripting. For simple throw-away-scripts any shell will do and it's\nbasically a matter of your personal preference.\n\n\n\n\n\n\nEnjoy the freedom of choice,\n\n\nThomas\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2005-September/002975.html).</sup>", "attachments": [], "created_by_name": "Thomas Bleicher", "created_at": "September 29, 2005 at 11:10PM", "created_by": "Thomas_Bleicher", "parent_id": "radiance-general_002966", "id": "radiance-general_002975"}