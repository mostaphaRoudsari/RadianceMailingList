{"body": "> OK, I see what you mean, now.  I haven't profiled the code recently,  \n> but relatively little time is spent in the matrix routines.   \n> Optimizing a ray tracer is really challenging, because bottlenecks  \n> are not easy to isolate.  A lot of time is spent in the various  \n> material shading routines, which are spread all over the place and  \n> not easy to simplify.  The only place where you can really focus  \n> effort is in the actual octree traversal code, and this doesn't  \n> vectorize at all.\n\n\nI hoped at least for some transformations (instances, oconv), maybe even\ncolor calculation. In fact, every code snippet where the same function is\napplied to x,y,z (like fvect[0]=...; fvect[1]=...; fvect[2]=...;) should\nwin, as such calculations could apply to the whole vector at once, maybe\nsome color calculations as well.\n\n\nIn fact, the growth of a ray tree from a cluster of rays is something I\nsimply did not consider, as I am really not a programmer, so the idea of\ntracing more than one ray at once (which was so pretty thinking about\nambient calculation) was nonsense.\n\n\nBut I will stop now and have a look at the code before I continue to write a\nword ;-) Is there a nice schematic overview over the raytracing routines on\nthe net? I have my \"RwR\" left in Germany because it was a bit heavy to take\nit in the plane ;-)))\n\n\nCU Lars.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2006-February/000685.html).</sup>", "attachments": [], "created_by_name": "Lars O. Grobe", "created_at": "February 27, 2006 at 02:40PM", "created_by": "Lars_O._Grobe", "parent_id": "radiance-dev_000683", "id": "radiance-dev_000685"}