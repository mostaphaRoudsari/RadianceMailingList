{"body": "> where i get lost is why we should get better accuracy by using a  \n> white source, and modelling the colour we want the source to have  \n> into the reflection calculation from the surfaces in the scene.\n\n\nIt only gives you better accuracy if you premultiply the spectra.  If  \nyou don't have spectral data, then it's the same as using the Sharp  \nRGB color space, which will at least be an improvement over standard  \nRGB (or XYZ, which is the worst).\n\n\n> in your paper you say this avoids a colour cast in the rendered  \n> image, but why is this? presumably it wouldn't be that difficult to  \n> apply a white-point shift to the rendered image to correct this  \n> colour cast?\n\n\nThat's what a white point correction does, but it does it in such a  \nway that the colors still have close to the correct appearance.  A  \nnaive normalization to some average gray does the wrong thing, and in  \nsome cases it is very wrong, indeed.\n\n\n> but as well as this colour cast, your results show quite a dramatic  \n> difference in accuracy between the naive and premultiplied renderings.\n> i appreciate that you probably don't have time to go into a  \n> detailed physics lesson by email, but can you point me towards  \n> anywhere i can read up on why this is?\n\n\nSimply put, spectral peaks and troughs in the source and reflection  \nspectra require more than the three dimensions of a standard color  \nspace to resolve.  You only need three primaries to present (nearly)  \nany color to the eye, since the eye only has three spectral  \nsensitivity curves that it uses for color vision.  (The rods  \nrepresent a fourth sensitivity curve, but this does not seem to take  \npart in distinguishing colors.)  However, you theoretically need an  \ninfinite number of spectral samples to exactly simulate light  \ninterreflection.  You also need an infinite number of rays, and we  \nget by with fewer.  As a practical matter, most rendering systems use  \nonly three colors, and the paper we've been discussing shows how to  \nbest leverage this machinery.\n\n\nFor a detailed description of color in computer graphics, Andrew  \nGlassner's \"Principle of Digital Image Synthesis\" is an excellent  \nreference.  Roy Hall has a classic text on the subject as well, but I  \nbelieve it's out of print.\n\n\n> i want to render lots of images of the same scene, but to change  \n> the single light source each time. so far i have written a script  \n> which does this quite nicely (it turned out simpler than using  \n> rtcontrib, because of the way i wanted to structure the scene  \n> description), but i have only used white sources.\n> i want to be able to use colour filters with my sources, but if i  \n> do all the premultiplicaton i will have to do it for every  \n> different colour filter i want to use, which will complicate the  \n> autamation of the preoccess immensely, so i'm trying to think of  \n> simpler ways to do it!\n> i guess i might have to do without, and just accept a less slightly  \n> accurate image.\n\n\nAs I said, it makes no difference to the result if you don't have  \nspectral data whether you incorporate your source color into your  \nsurfaces or not.  The result will be the same, so you might as well  \nscript it if you don't have spectra.\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2006-March/003535.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "March 28, 2006 at 03:46AM", "created_by": "Greg_Ward", "parent_id": "radiance-general_003524", "id": "radiance-general_003535"}