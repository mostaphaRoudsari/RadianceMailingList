{"body": "Hi Guilio,\n\n\nIf you're really going to attempt this, I can offer a few more  \npointers.  For the underwater bin computations, you want bin numbers  \nto correspond to colorpict pixels in scanline order.  For the floor  \nof the pool, you might define the following bin definition based on a  \n5x15 meter bottom with the origin at (0,0):\n\n\nFloorXres : 50;\nFloorYres : 150;\nFloorWidth : 5 {meters};\nFloorOrigX : 0;\nFloorHeight : 15 {meters};\nFloorOrigY : 0;\nfloor_bin = floor(FloorYres*(Py - FloorOrigY)/FloorHeight  + .5) \n*FloorXres\n\t\t\t+ floor(FloorXres*(Px - FloorOrigX)/FloorWidth + .5);\n\n\nThe same approach would be used for the walls of the pool, with  \nslightly different coordinate mappings.  You could put all these  \ntogether in the same file, call it \"pool_coords.cal\".  The rtcontrib  \ncommand line would resemble this:\n\n\n\tvwrays -vf pool_par.vf -x 1000 -y 1000 -ff \\\n\t\t| rtcontrib -V+ -ff -f pool_coords.cal \\\n\t\t\t-b floor_bin -bn 7500 -o '!total -if22500 | pvalue -r -h +Y 150 +X  \n50 -df > floor_caustics.pic' -m floor \\\n\t\t\t-b s_wall_bin -bn 3000 -o '!total -if9000 | pvalue -r -h +Y 30 +X  \n100 -df > s_wall_caustics.pic' -m s_wall \\\n\t\t\t-b n_wall_bin -bn 3000 -o '!total -if9000 | pvalue -r -h +Y 30 +X  \n100 -df > n_wall_caustics.pic' -m n_wall \\\n\t\t\t-b e_wall_bin -bn 5000 -o '!total -if15000 | pvalue -r -h +Y 50 +X  \n100 -df > e_wall_caustics.pic' -m e_wall \\\n\t\t\t-b w_wall_bin -bn 5000 -o '!total -if15000 | pvalue -r -h +Y 50 +X  \n100 -df > w_wall_caustics.pic' -m w_wall \\\n\t\t\tpool.oct\n\n\nI made up the dimensions for the other surfaces, but I hope this  \nmakes sense.  The actual view you use and resolution out of vwrays  \ndoesn't much matter, as it just gets summed up by \"total\" into the  \nappropriate images.  Note that the standard compile of \"total\" won't  \nwork, since it has a hard limit of 256 for the number of columns, and  \nwe're trying to sum RGB for each pixel, here.  So, you'll have to  \nrecompile it and set MAXCOL to 22500 or greater to get this to work.   \nIf it does, maybe I'll consider a little rewrite of the utility to  \ntake away the column limit and make it dynamic.  Bit of a hassle, but  \npossibly worth it.  I couldn't figure out how else to get this kind  \nof result without a lot of scripting.\n\n\nI expect most of the time in this command to be spent sending data  \nbetween rtcontrib and the 5 \"total\" processes.  The actual ray  \ntracing part will shrink to insignificance.\n\n\nBest of luck!\n-Greg\n\n\n\n\nDemostration of rtcontrib in two stages.  The first computes\ncontributions as a function of angle from a window (divided into\nthree sections) and three skylights connected to a light pipe.\nThe second stage computes the incidence of sky illumination on these\nportholes, and the results are combined.  There are two main scripts,\nrun like so:\n\n\nrunrtcont.csh\nrunsums.csh\n\n\nThe first handles the two main stages, whose results are put into\nsrc_cont/ and src_dc/ respectively.  The second script combines\nthe results into daylight coefficient pictures in the dc_cont/\nfolder.  A final script combines these into a result for a particular\ndate and time, e.g.:\n\n\nsumpicture.csh 5 10 14:00PDT -g .12 > sunny5_10_14.pic\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2007-November/004583.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "November 14, 2007 at 11:49AM", "created_by": "Greg_Ward", "parent_id": "radiance-general_004566", "id": "radiance-general_004583"}