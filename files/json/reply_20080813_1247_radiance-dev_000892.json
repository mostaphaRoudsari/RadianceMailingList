{"body": "Hi Greg,\n\n\n> How do you create a file with an \"unpredictable\" name?  Why is this even\n> an issue unless a script or program has the suid bit enabled?  Radiance\n> programs should never have permission to do anything a user couldn't,\n> unless they're being run by root.\n\n\nFiles with an unpredictable and unique name are generated by using\nrandom letters and numbers within the filename *and* - preferable in an\natomic way - create the file and open it for reading/writing.\nThis is also the reason why gcc warns about the use of mktemp(3). It\nrequires a filename ending with an extension of XXXXXX (six x's). When\nthe temporary file is generated, the name of the file is generated by\ntaking the predetermined name in the program, and filling the field of\nX's with a random value. However, some operating systems fill the first\nfive X's in the field with the process number, and the last X with one\nof twenty-six lower case letters in the alphabet. Even worse, mktemp(3)\ndoes not create and open the file, so if you call mktemp(3) twice, you\ncould end up with the same predictable filename.\n\n\nBut why is this bad?\nIf I'm an evil person and know, that a program creates a file in /tmp in\nan insecure (== predictable) way, I can\n- create the file on my own, so - depending on the program of course -\nI'm able to feed the program with my data or let it execute stuff with\nthe rights of the user who runs the program.\n- use a symlink attack and create a symlink which points to some other\nfile - for example to destroy files of the user running the program.\nImagine you're rendering something for hours, and while rendering the\nlast piece of the image I trick one of the programs/scripts into writing\nit's temporary junk into the result of hours of rendering - your work is\nlost.\nSo this is not really related to being root or not, but it's a good way\nto gain more priviledges on a system on the way to become root ;)\n\n\nAlthough the impact of this kind of vulnerability is low, it is still\nbad enough to get a CVE id for it and end up with fixes by security\nuploads and the according announcements in the distributions....\n\n\nFor shell scripts the best thing to use is the mktemp(1) utility (if\nit's available, which is the case for most platforms these days, afaik),\notherwise a file name with at least enough random letters/numbers needs\nto be used.\n\n\n\n\n> There are quite a few scripts that create temporary files this way in\n> Radiance:\n> \n> % grep -l '/tmp' */*.csh\n> cv/optics2rad.csh\n> gen/genbackg.csh\n> gen/genpine.csh\n> gen/genwindow.csh\n> gen/markpath.csh\n> px/falsecolor.csh\n> px/normpat.csh\n> px/pacuity.csh\n> px/pbilat.csh\n> px/pdelta.csh\n> px/phisteq.csh\n> px/phisto.csh\n> px/psquish.csh\n> px/pveil.csh\n> px/ran2tiff.csh\n> px/vlpic.csh\n> px/xyzimage.csh\n> util/compamb.csh\n> util/dayfact.csh\n> util/objline.csh\n> util/objpict.csh\n> util/objview.csh\n> util/raddepend.csh\n\n\nouch...\n\n\nI'll see what's the best way to fix this in Debian - which needs to be\ndone before Lenny is released (==soon).\n\n\nCheers,\n\n\nBernd\n\n\n\n\n Bernd Zeimetz                           Debian GNU/Linux Developer\n GPG Fingerprint: 06C8 C9A2 EAAD E37E 5B2C BE93 067A AD04 C93B FF79\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2008-August/000892.html).</sup>", "attachments": [], "created_by_name": "Bernd Zeimetz", "created_at": "August 13, 2008 at 12:47PM", "created_by": "Bernd_Zeimetz", "parent_id": "radiance-dev_000890", "id": "radiance-dev_000892"}