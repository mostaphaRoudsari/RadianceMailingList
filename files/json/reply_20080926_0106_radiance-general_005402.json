{"body": "Hi Tarik,\n\n\nI should be able to help you. From what you are writing I have been \nthrough many of the same things. I have used the Bouget calibration \ntoolbox some years ago, so I have forgotten the details. I am presently \nusing my own matlab based calibration tool, but the process of making a \nlink to Radiance should be the same.\n\n\nWhat I have done is to make a simple Matlab script which auto-generates \na Radiance view file (.vp). Here is an example of the output from my \nscript for a given image where I have calibrated the camera to a \nchecker-board in the image:\n\n\nrview -vtv -vp -2.555731 -1.572937 1.778183 -vd 0.807129 0.430026 \n-0.404500 -vu 0.359249 0.185955 0.914527 -vh 45.809853 -vv 31.486144\n\n\nAs stated: I have forgotten Bouget calibration details, but if you have \nthe 3x3 rotation and the 3x1 translation you are all set to go. In what \nI am writing I am assuming that the rotation and translation information \nconstitutes transformation from world to camera (not vice versa).\n\n\nI my code I have the world to camera transformation as a 4x4 matrix, \nwhere the upper left 3x3 is the rotation, and the upper three elements \nof the left-most column is the translation vector (standard \ntransformation matrix in homogenuous coordinates).\n\n\nHere is my Matlab code that autogenerates the .vp file:\n\n\n\n\n\n\n%world2cam is a 4x4 transformation from world to camera coordinates\n%\n%focallength_in_pixels is the estimated camera focal length measured in \npixels (it may be a negative number\n%in the Bouget toolbox ... in that case multiply by -1 in the \nexpressions below)\n\n\n%inverse to get camera to world transformation\ncam2world = inv(world2cam);\n\n\n%save camera parameters in a format directly applicable\n%for RADIANCE rendering engine\ncamfilename = strcat(path,'CAMERA.vp');\nfid = fopen(camfilename, 'w');\nfprintf(fid, 'rview -vtv ');\nfprintf(fid, '-vp %.6f %.6f %.6f ', cam2world(1:3,4));\nfprintf(fid, '-vd %.6f %.6f %.6f ', -world2cam(3,1:3));\nfprintf(fid, '-vu %.6f %.6f %.6f ', world2cam(2,1:3));\nfprintf(fid, '-vh %.6f ', rad2deg(2*atan2(0.5*xres, \nfocallength_in_pixels)));\nfprintf(fid, '-vv %.6f\\n', rad2deg(2*atan2(0.5*yres, \nfocallength_in_pixels)));\nfclose(fid);\n\n\n\n\n\n\n\n\nThe part in your mail that concerns multiple images and axes that are \nnot aligned I do not understand so I can't assist on that.\n\n\nSincerely,\nClaus\n\n\n\n\nP.S. I have the same exporting facility generating a MAXscript that will \nset up a matched camera in 3D studio max, but max has built-in camera \nmatching.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2008-September/005402.html).</sup>", "attachments": [], "created_by_name": "Claus B. Madsen", "created_at": "September 26, 2008 at 01:06AM", "created_by": "Claus_B._Madsen", "parent_id": "radiance-general_005400", "id": "radiance-general_005402"}