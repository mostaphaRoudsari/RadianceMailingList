{"body": "Morning.\n\n\nMy comments are below to keep the context of the question.\n\n\n2010/8/4 Claus Br\u00f8ndgaard Madsen <cbm at create.aau.dk>:\n> http://www.cvmt.dk/~cbm/tmp/radianceglowproblem/glowproblem.html\n\n\nAs a side note: You can get rid of light sources with the \"-dv\" switch\nof rpict. However, sky domes are usually made out of the \"glow\"\nprimitive which is treated differently than a proper \"source\".\n\n\nIn any case, to eliminate the sky dome in your second image just set a\n\"-va\" clipping plane just behind your geometry.\n\n\n> In short: I have acquired an image of a scene for which I also have a 3D\n> model. The camera is calibrated to the scene, and therefore I am able to\n> backproject the image pixels onto the geometry. Now I want to use the rpict\n> \u2013i option to compute the irradiances in the scene, where the backprojected\n> image should be the only illumination in the scene. I.e., the backprojected\n> image should be treated as emitted radiance from diffusely emitting\n> surfaces, and I want to render the irradiance received at all locations in\n> the scene. But when I do that, the only thing which shows up in the render\n> are the glow materials, not the irradiances.\n\n\nIf I understand correctly, you want to use the projected texture as\nHDR light source. Your problem now is that you can not show irridiance\nvalues because your scene is made up of glow materials for which rpict\ndoes not show irridiance values (that's why it's called \"glow\").\n\n\nOne idea would be to split the texture image in two or more parts and\ndefine only the surfaces covered by a partial image as glow. The rest\nis an ordinary plastic material which will show irridiance values. You\nthen create separate images and add up all the irridiance values to\ncreate the final image. You probably have to use \"-dv\" as well to keep\nthe glow surfaces out of the partial image (although I don't really\nknow if that affects \"glow\").\n\n\nWhen you split the image you have to check which surfaces can\nilluminate others. For example the roof can illuminate the chimney but\nnot the walls. This also shows a problem of  your method of projecting\nthe image from a single camera view point: The lantern on top of the\nbuilding is partially hidden by the chimney so it's texture will not\ncover the full geometry. However, the roof could receive light from\nthe whole structure but because there is no texture there the hidden\npart will not contribute to the irridiance on the roof. Of course\nthat's only a problem if you only do have a single camera view point.\n\n\nAnother more complex solution to your problem would be the following:\n\n\n1) You create the view point and direction of each image pixel with vwrays.\n2) Along each ray you check for an intersection with the geometry.\n3) At the intersection point you calculate the irridiance value with\n\"rtrace -I\" using the intersection point and surface normal as origin\nand direction. The calculated value gives you the RGB values for this\npixel.\n4) You compile a new image pixel by pixel out of individual irridiance values.\n\n\nAlthough that sounds complicated it is possible to do this in Radiance\nwith a single (long) command line. You can find an introduction to the\nvarious tools and their command options here:\n\n\nhttp://sites.google.com/site/tbleicher/radiance/stencil\n\n\n\n\nHappy reading,\nThomas\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2010-August/007153.html).</sup>", "attachments": [], "created_by_name": "Thomas Bleicher", "created_at": "August 04, 2010 at 02:39AM", "created_by": "Thomas_Bleicher", "parent_id": "radiance-general_007152", "id": "radiance-general_007153"}