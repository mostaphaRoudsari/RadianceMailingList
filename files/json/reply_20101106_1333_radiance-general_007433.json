{"body": "On Sat, Nov 6, 2010 at 1:59 PM, David Smith <dbs176 at gmail.com> wrote:\n> Dear Radiance community,\n>\n> Does anybody have any interest in a generic Radiance wrapper package for\n> Python? I think I'm going to make one (and make it open source), and was\n> wondering if anybody had any interest, suggestions, advice, code they would\n> be willing to contribute, etc.\n\n\nGreat idea. I would be very interested in a generic Python interface\nfor Radiance. I have used functionality of the Radiance tools in some\nof my scripts and I always had to rewrite the relevant parts or use a\nsystem command and process the output. I looked at the source code\nwith the intention to expose e. g. the scene parser or image\nread/write in a Python API. Unfortunately I don't know enough C to do\nthat.\n\n\n> I'm aiming for a 1:1 functionality but I know there are\n> going to be some things that will be tough/impossible to do.\n> I made what I think a simple program could be like below - it imports\n> geometry, creates a series of images, manipulates and combines\n> those images, then saves them.\n\n\nI think that a Python API can be especially useful in interactive\napplications like image viewing/analysing or even a 3D GUI or scene\neditor. In these cases a 1:1 implementation of the functionality is\nnot so important as access to the 'raw' data (pixel values in HDR\nimage or polygons in an octree). You can display that information or\nmanipulate it Python which offers plenty of 3rd party scientific\nlibraries to do so. The API would offer you a more pythonic/object\noriented way to do so.\n\n\n> So, yeah. Any interest?\n>\n> --Dave\n>\n> P.S. - I posted here because it's not directly related to the Radiance code,\n> it would be just calling the Radiance programs and scripts.\n\n\nThat's a pity. I was hoping for a genuine Python API based on the C source code.\n\n\nSo far I have used the 'subprocess' module with Radiance binaries a\nbit and I think there are a couple of problems with this:\n\n\n1) Some csh scripts are not available on Windows. An abstract Python\nwrapper should offer the same features on all platforms.\n\n\n2) Short commands take a lot longer because you have to\nconvert/process the input and output of the commands to make them\nuseable in Python.\n\n\n3) Long running commands do not give you more control or feedback than\nthe binaries do now (which is not a lot). Especially for GUIs it would\nbe nice to have feedback on the progress rpict or oconv makes.\n\n\n4) Although I can see the elegance of your Python example compared to\na bash/csh script I think that the OO approach would limit the\nfunctionality of the individual scripts. In that case you'd have to\nfall back on shell scripting and can't benefit from the Python API.\n\n\n\n\nHaving said all that I'm sure I could contribute to a Python API\nproject. You can have a look at my take on 'subprocess'ing image\nread/write here:\n\n\nhttp://code.google.com/p/pyrat/source/browse/tags/wxfalsecolor/0.4.1/falsecolor2.py\n\n\nand an OO wrapper for the HDR image here:\n\n\nhttp://code.google.com/p/pyrat/source/browse/tags/wxfalsecolor/0.4.1/rgbeimage.py\n\n\nI have also fragments of a pure Python scene parser and other bits\nthat might come in handy at some point.\n\n\nThomas\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2010-November/007433.html).</sup>", "attachments": [], "created_by_name": "Thomas Bleicher", "created_at": "November 06, 2010 at 01:33PM", "created_by": "Thomas_Bleicher", "parent_id": "radiance-general_007431", "id": "radiance-general_007433"}