{"body": "I have posted this before to the mailing list, I know it is not nice to\ndouble post but since there are still some questions on the Scons scripts I\nre-posted everything (in one large message, with a fix or two):\n\n\nThis is my procedure to compile Radiance 40 HEAD with Scons:\nIf something is not working let me know then I can look into it.\n\n\nGeneral procedure for installation, is the one described on\nFrancesco's Wiki page\nHow to compile Radiance using the MinGW tools and Scons\nhttp://www.bozzograo.net/radiancewiki/doku.php?id=how_to_compile_radiance_using_the_mingw_tools_and_scons\n\n\nFor compilation I used:\nRadiance 4.0 from\nhttp://radsite.lbl.gov/radiance/dist/rad4R0all.tar.gz(Includes\nauxiliary files)\n+ latest HEAD archive from\nhttp://www.radiance-online.org/software/snapshots/radiance-HEAD.tgz\nMinGW with gcc 4.5.0\nPython 2.7 + scons 1.3.1 (You might also have to set the PATH variable to\nPython and Scons)\n\n\nExtract Radiance 4.0 and HEAD and place HEAD files over Radiance 4.0 files\noverwriting the old ones.\nExtracting can be done with the tools listed on the radiancewiki site\nmentioned above.\nor possibly also with winzip or 7-zip.\n\n\nGendaylit\nTo make Gendaylit compile add the following line in:\nray\\src\\gen\\SConscript under the section PROGS = (\n('gendaylit',   Split('gendaylit.c sun.c',), ['rtlamps']),\n\n\nChange the following line in: ray\\src\\common\\SConscript\nRTLAMPS = Split('''fropen.c rexpr.c lamps.c''')+ [getlibpath]\n\n\nDctimestep\nTo make dctimestep compile I had to add the following line to:\nray\\src\\common\\SConscript under the section # build libraries:\nrtall = env.StaticLibrary(target=radlib('rtall'), source=ALL)\n\n\nI changed in ray\\src\\util\\SConscript\n('dctimestep', ['dctimestep.c'],\n    ['rtall'])\n\n\nFor Gendaylit you also need a library files called: 'perezlum.cal\ncoeff_perez.dat defangle.dat'\n\n\nAdd this to ray\\scr\\gen\\SConscript the line should be:\nLIBFILES = Split('illum.cal rev.cal skybright.cal glaze1.cal glaze2.cal\nperezlum.cal coeff_perez.dat defangle.dat')\n\n\nCheck if: progs.append(prog)\nis present before this line in ray\\scr\\gen\\SConscript:\nprog = env.Program(target=os.path.join('$RAD_BUILDBIN', 'mksource'),\n\n\nWhen compiling tmapluv.c the compiler complains about a variable\ndeclaration that is already declared elsewhere, to solve this:\n\n\nChange the include order in these files (ray\\src\\common\\):\ntmapluv.c to put \"tiffio.h\" above \"tmprivat.h\"\ntmaptiff.c to put \"tiffio.h\" above \"tmprivat.h\"\ntmapcolrs.c to put \"rtprocess.h\" above \"tmprivat.h\"\n\n\nTo compile mgf2meta:\nChange in ray\\scr\\cv\\SConscript\n# meta targets\nprog = env.Program(target=rbin('mgf2meta'), source=['mgf2meta.c'],\n        CPPPATH=env.get('CPPPATH', []) + [os.path.join('#src','meta')],\n        LIBS=['meta','rtmath','rtcont','rtmem','rterror','mgf'] + mlib)\nenv.Append(RAD_BININSTALL=[env.Install(env['RAD_BINDIR'], prog)])\n\n\nplatform/*.cfg files should be updated so that installation paths aren't\n\"c:\\radiance3.6\" or so.\n\n\nFor example next can be changed:\n[install]\nRAD_BASEDIR:   c:\\radiance4.0\nRAD_BINDIR:    bin\nRAD_RLIBDIR:   lib\nRAD_MANDIR:    man\n\n\nOpen cmd window on Windows\nChange to ray dir\ntype: scons build\nAnd after a successful build\ntype: scons install\n\n\n+\nafter installation user has to set RAYPATH environment variable to Radiance\nlibraries' path.\nand the PATH environment variable to Radiance bin path\n\n\nFor those of you interested in compiling ra_tiff and normtiff for Windows,\nbelow are the instructions on how it could be done.\n\n\nTools:\nGet tiff-3.9.4.zip from ftp://ftp.remotesensing.org/pub/libtiff/\nGet MinGW + MSYS shell from http://www.mingw.org/\n\n\nTo open a MSYS shell: Go to C:\\msys\\1.0\\msys.bat (or where you installed\nMSYS)\n\n\nOriginal instructions from:\nhttp://www.gaia-gis.it/spatialite-2.4.0/mingw_how_to.html#libtiff\nOnly step 5 should be enough to compile libtiff (since we do not use libz\nnor libjpeg)\nTo make it work with Radiance I had to modify the procedure a bit:\n\n\n    download the latest sources: tiff-3.9.4.zip\n    uncompress this zip-file\n    then open an MSYS shell\n\n\ncd tiff-3.9.4\n./configure --enable-static --enable-logluv --disable-shared --disable-cxx\n--disable-jpeg --disable-zlib --disable-pixarlog\nmake\nmake install-strip\n\n\nCopy the file libtiff.a from C:\\msys\\1.0\\local\\lib to C:\\..\\..\\ray\\src\\lib\n(where ..\\..\\ points to where you extracted the Radiance source files)\n\n\nTo build ra_tiff add these lines to ray\\src\\px\\SConscript:\n\n\nra_tiff = env.Program(target=radbin('ra_tiff'), source=['ra_tiff.c'],\n    LIBS=['libtiff','rtpic','rtio','rtmem'] + mlib)\nprogs.append(ra_tiff)\n\n\n\n\nIn a similar way normtiff can be build:\n\n\nAdd this line to \\ray\\src\\common\\SConscript after the section # build\nlibraries:\n\n\nrtall = env.StaticLibrary(target=radlib('rtall'), source=ALL)\n\n\nTo build normtiff add these lines to ray\\src\\px\\SConscript:\n\n\nnormtiff = env.Program(target=radbin('normtiff'),source=['normtiff.c'],\n    LIBS=['libtiff','rtall'] + mlib)\nprogs.append(normtiff)\n\n\nThen proceed with building Radiance with scons.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2010-November/001063.html).</sup>", "attachments": [], "created_by_name": "Guy Vaessen", "created_at": "November 10, 2010 at 12:43PM", "created_by": "Guy_Vaessen", "parent_id": "radiance-dev_001059", "id": "radiance-dev_001063"}