{"body": "Hi Lucio,\n\n\nYes, instancing is a way to deploy an object multiple times for the \nrelative memory price of one of the objects. We do this all the time for \nrepetitive objects such as furniture or trees (for example).\n\n\nIt is possible to use xform or replmarks to deploy copies of geometry \nalso (eg files that contain material and geometry definitions). This \nhowever will not result in memory saving. To get the memory saving the \nobject needs to be an octree. A frozen octree is self contained whereas \na regular (unfrozen octree) contains references to other data/files that \nmust be read in at load time. I believe from an \"in-memory\" point of \nview (eg when running) the memory size would be the same. I think that \none difference is that frozen octrees will load faster in addition they \ncan be treated as library objects and moved around from project to \nproject without having to move around a lot of other source files.\n\n\nAnother option from a memory saving point of view is to use mesh object \n(obj2mesh) which is another compiled representation that may even be \nmore compact and can also be treated like an octree instance.\n\n\nHope that helps.\n\n\nRegards,\n\n\n-Jack\n\n\n\n\n# Jack de Valpine\n# president\n#\n# visarc incorporated\n# http://www.visarc.com\n#\n# channeling technology for superior design and construction\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2010-November/007494.html).</sup>", "attachments": [], "created_by_name": "Jack de Valpine", "created_at": "November 24, 2010 at 04:43AM", "created_by": "Jack_de_Valpine", "parent_id": "radiance-general_007488", "id": "radiance-general_007494"}