{"body": "On 29/11/10, 16:40:01, Gregory \"J.\" Ward <gregoryjward at gmail.com> wrote\nregarding Re: [Radiance-dev] Makefile inconsistency:\n\n\n> which you didn't really answer.\n\n\nYour question was:\n\n\n\"Does dmake cause the build to fail with the current make files, or\ndoes this just make things slightly more efficient?\"\n\n\nIt's 2 questions.\n\n\nAns 1 No dmake does not \"cause\" it to fail.  Parallel build does fail\nbut the problem is latent.  The makefiles ask for a file to be created\nand for it to be destroyed which can't be satisfied consistently or at\nthe same time.\n\n\nAns 2. A 10 fold increase is not slight, so no it does not make it\nslightly more efficient, it makes it many times more effective.\n\n\n\n\nI expect gmake could fail similarly.  I prefer dmake over gmake because\nit dynamically sets and varies the number of jobs depending on the system\nload.  dmake is \"Distributed Make\" and can spawn jobs on other machines\nfor greater parallelism.  It's really handy for creating many radiance\nimages, I create makefiles to define the work and let dmake farm it\nout.  This is less important nowadays that one physical machine houses\nseveral virtual machines which already share all the resources.\n\n\n\n\n\n\n> I do want to respond to the other issues you mentioned, though:\n\n\n> > As I'm building a radiance package I have to rebuild multiple times\n> > because:\n> > + The package includes multiple architecture isaexec versions of the key\n> > executables and the complete compile is done for each.\n\n\n> I'm not really familiar with Solaris, but on other systems (like OS X)\n> you can compile in the different architectures in one go.  Even that is\n> a pain, so I sympathize.\n\n\nI need to compile in multiple architectures.  My package contains several\nversions of rpict.  The package has to run on many different CPUs.  The\nlaziest solution and a usual one is to use the lowest common denominator\narch.  For a CPU hog it's worth providing several speed optimised\nbinaries for different arches and letting isaexec pick the best one for\nwhichever machine is running the one package.  For trivial utilities a\nspace optimised solution is best so I do another build for those.  A\nsimilar thing is done with libraries and the link loader uses the dynamic\ntoken $ISALIST to pick the best libraries.\n\n\nIt's my usual technique: don't fight a build system, let it think it's\nhelping.  Build multiple times and pick the needed parts for the package.\nIt's typically the easiest way to build both 32 and 64 bit libraries.\n\n\n\n\n\n\n\n\n> > not relocatable \"define DEFMAPFILE \\\"/usr/local/lib/ray/lib/arch.map\\\"\n\n\n> I actually didn't know about this because it's in a program that no one\n> (as far as I know) uses anymore, arch2rad.  The build for it should\n> probably be disabled, rather than carrying whatever problems it has\n> into the next release.  I will do that.\n\n\nI've never used it either but if it's in my package it should work.  I\nedit the value to the location of arch.map in /opt but perhaps the code\nshould have used the env var RAYPATH.\n\n\n\n\n\n\n> > timegm\n\n\n> There is a replacement implementation for this GNU extension in\n> src/common/timegm.c, which I assume you found.\n\n\nNo, it's not there:\n\n\n$ ls src/common/timegm.c\nsrc/common/timegm.c: No such file or directory\n\n\n$ find . -name \\*gm\\*\n./src/meta/segment.c\n\n\n...not it...\n\n\n$ grep -l timegm **/*\nsrc/common/header.c\n\n\n...and that's it being used...\n\n\n$ grep timegm **/*\nsrc/common/header.c:    *tloc = timegm(&tms);\n\n\n\n\n\n\n> > the ambient bug\n\n\n> Could you be more specific?  Unless this is the recurring problem\n> with the NFS lock manager, which I didn't think an issue under\n> Solaris.\n\n\nrpict: fatal - bad ambient file\n\n\nIt's fixable by using src/rt/ambient.c from the HEAD distribution.\nGiven it's a known crash bug, pretty please, how about a release 4.1\nwith a fix?\n\n\n\n\n\n\n> > version still wrong\n\n\n> ??\n\n\nI see you've fixed this in the new 4R0, I was using an older 4R0.  The\nproblems of not issuing 4.0.1!\n\n\n\n\n\n\n\n\n> > examples broken by hdr renaming\n\n\n> I am sorry about that.  If you can point to specific documents that need\n> fixing, I will fix them.\n\n\nI've edited my examples and they look good except I've still a problem\nwith the cabin:\n\n\n$ make\noconv -b -100 -100 -100 225 -r 8192 \\\npattmats cabin bathroom furniture winpanes.rad mirrors.rad > cabin.oct\noconv -f -r 8192 -i cabin.oct summerday landscape lights.off \\\ndaywindows > summercabin.oct\nrvu -vf vf/plan -av .1 .1 .1 summercabin.oct\n\n\nrvu: fatal - cannot find picture file \"pinebark.pic\"\n*** Error code 1\nmake: Fatal error: Command failed for target `view'\n\n\n\n\nbut I can't find any references to pinebark.  I'll keep looking.\n\n\n\n\n\n\n\n\n> Thanks for your help and your feedback, James.  I understand your job is\n> not an easy one, and not always fun.\n\n\nRadiance is always fun.  If you want to get me steamed up tell me libtool\nis good.\n\n\n\n\n\n\n\n\nJames.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2010-November/001074.html).</sup>", "attachments": [], "created_by_name": "James Lee", "created_at": "November 29, 2010 at 11:49AM", "created_by": "James_Lee", "parent_id": "radiance-dev_001070", "id": "radiance-dev_001074"}