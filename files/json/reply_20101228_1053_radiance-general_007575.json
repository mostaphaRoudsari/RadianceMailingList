{"body": "Hi Milan!\n\n\nWelcome onboard!\n\n\n> For the purposes of my work, I need to calculate illuminance level in\n> one point of working plane in a simple office (for clear sky and\n> sunny day), for different luminaires output levels, different slat\n> angles of exterior venetian blinds, and for different times of the\n> day (i.e. for different solar angles).\n\n\nHm, a lot of work. A first hint, think about how to organize that, so\nthat you can later repeat the renderings when you have to change\nsomething. People have been using Makefiles, bash scripts, rad as a\nspecialized tool, ...\n\n\n> I am not interested in for image rendering, just for the illuminance\n> calculation.\n\n\nIt will still be useful to render some views (plan view, perspectives) \nto understand what is going on. Artefacts due to ambient settings not \nadapted to e.g. you fenestration become evident when you look at a \nsplotchy image, but may be difficult to understand from some few \nilluminances.\n\n\n> stuck with window glass modeling. This is what I got from Optics5 for\n> 2 layers glazing system (1. clear glass 6mm ; AIR gap 12mm ; 2. clear\n> glass 4mm):\n>\n> void  glass       GlzSys1_glass 0 0 3     0.832     0.884     0.859\n\n\nAs far as I understand, for clear glass this is all you need.\n\n\n> When I make a model of complex fenestration system with exterior\n> venetian blinds, I have two different cases :\n>\n> Case 1. When sun rays don't pass directly between the venetian blind\n> slats, just indirectly from slats (reflected from slats).\n>\n> Question 1. Because sun rays don't pass directly trough window glass,\n> I suppose that all the light that reaches the window glass is diffuse\n> (light is reflected from ground, sky and slats). If this is so, which\n> is the correct value for the definition of window glass material?\n\n\nYou need the transmissivity for a material definition of a glass \nmodifier. Calculating the transmissivity from visual light transmittance \nis discussed in Axel's Radiance tutorial, p. 47. The material properties \nof you glass pane are not depending on the shading system or incident light.\n\n\n> Question 3. This may be a stupid question. Theoretically, if I should\n> get the same results in the following two cases: 1. I create the\n> distribution for the window with mkillum; window glass is defined\n> with transmissivity values: 0.725   0.770   0.748 I compile a new\n> scene octree that includes the old one and adds the new illum window\n> (new .rad file) to it. Then, I calculate lux level on working plane\n> with rtrace. 2. I don't create window polygon (there's nothing, i.e.\n> there is air). But instead, I can scale RGB values for light solar\n> with the glass transmissivity values. For example: Istead: void light\n> solar 0 0 3 2.72e+06 2.72e+06 2.72e+06, I put: void light solar 0 0 3\n> 2.72e+06*0.725 2.72e+06*0.770 2.72e+06*0.748, i.e.: void light solar\n> 0 0 3 1.972e+06 2.094e+06 2.035e+06 I compile a scene with changed\n> .mat file, and then I calculate lux level on working plane with\n> rtrace. Of course, I will try to calculate this, but I'm definitely\n> interested in the opinion of experts.\n\n\nThe glass object is not only affecting the transmission through the \nwindow opening by simply multiplying, it is also reflective and depends \non the angle of incidence. The sun close to the zenith would lead to \nlarge portions of irradiance on the glass pane be reflected for example.\n\n\n> Question 4. How can I scale the material of sky, if it is defined\n> with:\n\n\nYou can (if it makes sense) scale the brightness of the sky either by \nchanging the return value or the glow material that is modified by the \nbrightfunc. Scaling the zenith and ground plane brightnesses should \nwork, but is little transparent (and in fact you change the input values \nhere for the skybright.cal script). Instead, it would be better to scale \nthe glow. Of course, if you scale by smaller then 1, you will find \n0.265*R + 0.670*G + 0.065*B < 1 . Still I think you will need a glass \npane in your model to care for angular dependance and reflection.\n\n\n> Case 2. When one part of the sun rays pass directly between the\n> venetian blind slats, and the second part indirectly from slats.\n>\n> This is perhaps the worst case for modeling. Let us assume that\n> exterior venetian blinds have 35 slats. If I want to make a proper\n> model of window glass polygon, I suppose that I need to replace one\n> glass polygon with 69 glass polygons. 34 are directly exposed to the\n> sun and have some values for RGB transmissivity (which depend from\n> sun angle). Other 35 are in shade and have some other values for RGB\n> transmissivity (transmissivity for diffuse light). Of course, I need\n> to do some trigonometry calculations. This model of window glass is\n> valid only for one light source (solar source sun), but not for\n> skyglow source sky. This seems very complicated, and because of that\n> would be great if I could do what I asked in questions 3.2 and 4.\n\n\nYou need only one glass pane. Same as in real. The only pitfall is that, \nwithout mkillum, you would get a lot of noise at acceptable ambient \nsettings, or never ending rendering times. So just use a mkillum surface \nat your glass pane, and on the inner side of the blinds.\n\n\n> Case 3. No venetian blinds - just window glass.\n>\n> Let us assume that octree (scene) includes 3 light sources (sun, sky\n> and ground), and sun incidence angle is 70 degrees. If I make a model\n> of window glass with RGB transmissivity: 0.725  0.770  0.748\n> (transmittance=0.695), the model will be correct for sky and ground,\n> but not for sun, because of transmittance for angle of 70 degrees is\n> 0.521. Thus, whatever value that I take for RGB transmissivity, I\n> make a some mistake, when I calculate illumination.\n\n\nNo. Radiance uses a built-in material model for glass. There is a file \ncalled materials.pdf as part of the Radiance distribution explaining how \nmaterials are modeled in Radiance.\n\n\n> Question 6. Does this problem can be solved in one of two ways:\n>\n> 1. I scale values for sun, sky and ground, in the manner described in\n> questions 3.2 and 4. 2.\n\n\nYou do not need all that. Try to model the scene as the real world is - \nand avoid scaling the universe just as you would not have this option in \nreal life neither ;-) The only cheat here is that you can use a single \nsurface in place of the window glass, which in fact consists of two \nglass bodies separated by air. This is the only optimization you need, \ntogether with helping out Radiance by pre-calculating the distribution \nbehind the shading using mkillum.\n\n\nI'd propose that you just start with a simple case, e.g. the glazing \nwithout blinds, set up the rendering procedure (e.g. a script or \nMakefile), render illuminance on a work plane (maybe you put a desk \nsurface into your model) using rpict -i and get the sensor points' \nilluminances using rtrace -I. Once you have completed that, there will \nbe a better understanding of the more complicated tasks, and you will \nknow how Radiance works in your case. It is difficult to solve all \nquestions in advance, better get the hands on this nice simulation \ntoolbox and your model :-)\n\n\nAnd always feel free to ask if you face unexpected behaviour by the \nsoftware.\n\n\nCheers, Lars.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2010-December/007575.html).</sup>", "attachments": [], "created_by_name": "Lars O. Grobe", "created_at": "December 28, 2010 at 10:53AM", "created_by": "Lars_O._Grobe", "parent_id": "radiance-general_007574", "id": "radiance-general_007575"}