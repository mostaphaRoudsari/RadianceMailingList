{"body": "Hi Lars,\n\n\n> Hm, a lot of work. A first hint, think about how to organize that, so that\n> you can later repeat the renderings when you have to change something. People\n> have been using Makefiles, bash scripts, rad as a specialized tool, ...\n\n\nMy plan is to use a bash script.\n\n\n> It will still be useful to render some views (plan view, perspectives) to\n> understand what is going on. Artefacts due to ambient settings not adapted to\n> e.g. you fenestration become evident when you look at a splotchy image, but\n> may be difficult to understand from some few illuminances.\n\n\nThank you for advice. This is useful.\n\n\n> You need the transmissivity for a material definition of a glass modifier.\n> Calculating the transmissivity from visual light transmittance is discussed\n> in Axel's Radiance tutorial, p. 47.\n\n\nFormula:  tn=1.09*Tn (Axel's RADIANCE Cookbook, p. 21) is simplification of\nformula on p.20.\n\n\n> The glass object is not only affecting the transmission through the window\n> opening by simply multiplying, it is also reflective and depends on the angle\n> of incidence. The sun close to the zenith would lead to large portions of\n> irradiance on the glass pane be reflected for example.\n\n\nI agree with that.\n\n\n> You can (if it makes sense) scale the brightness of the sky either by\n> changing the return value or the glow material that is modified by the\n> brightfunc. Scaling the zenith and ground plane brightnesses should work, but\n> is little transparent (and in fact you change the input values here for the\n> skybright.cal script). Instead, it would be better to scale the glow. Of\n> course, if you scale by smaller then 1, you will find 0.265*R + 0.670*G +\n> 0.065*B < 1 . Still I think you will need a glass pane in your model to care\n> for angular dependance and reflection.\n\n\nOk. Idea with scaling is obviously out.\n\n\n> You need only one glass pane. Same as in real. The only pitfall is that,\n> without mkillum, you would get a lot of noise at acceptable ambient settings,\n> or never ending rendering times. So just use a mkillum surface at your glass\n> pane, and on the inner side of the blinds.\n\n\nI know that I have to use mkillum surface at my glass pane, I just forgot to\nwrite it. Thank you anyway. But, how can I use mkillum surface on the inner side\nof the blinds? I checked, when the blinds is down (angle=-90) the surface normal\nof slats points into the office.\nTo create the distribution for the window:\nmkillum -ab 0 < objects/window.rad scene.oct > tmp/iwindow.rad\nCan I use this to create the distribution for the blinds:\nmkillum -ab 0 < blinds.rad scene.oct > tmp/iblinds.rad\n\n\n> No. Radiance uses a built-in material model for glass. There is a file called\n> materials.pdf as part of the Radiance distribution explaining how materials\n> are modeled in Radiance.\n> You do not need all that. Try to model the scene as the real world is - and\n> avoid scaling the universe just as you would not have this option in real\n> life neither ;-)\n\n\n:-)\n\n\n> The only cheat here is that you can use a single surface in place of the\n> window glass, which in fact consists of two glass bodies separated by air.\n\n\nI plan to use a single surface in place of the window glass.\n\n\n> This is the only optimization you need, together with helping out Radiance by\n> pre-calculating the distribution behind the shading using mkillum.\n> I'd propose that you just start with a simple case, e.g. the glazing without\n> blinds, set up the rendering procedure (e.g. a script or Makefile), render\n> illuminance on a work plane (maybe you put a desk surface into your model)\n> using rpict -i and get the sensor points' illuminances using rtrace -I. Once\n> you have completed that, there will be a better understanding of the more\n> complicated tasks, and you will know how Radiance works in your case. It is\n> difficult to solve all questions in advance, better get the hands on this\n> nice simulation toolbox and your model :-)\n> And always feel free to ask if you face unexpected behaviour by the software.\n\n\nPlease, can you explain me this: \"render illuminance on a work plane (maybe you\nput a desk surface into your model) using rpict -i\".\n\n\nCheers, Milan\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2010-December/007579.html).</sup>", "attachments": [], "created_by_name": "Milan Cakanovic", "created_at": "December 28, 2010 at 06:55PM", "created_by": "Milan_Cakanovic", "parent_id": "radiance-general_007574", "id": "radiance-general_007579"}