{"body": "Hello Wendelin,\n\n\nGood sleuth work, but in fact since rtcontrib doesn't employ the -n option of rtrace, the flushing behavior doesn't affect efficiency in this case.  The problem is that the controlling process in rtcontrib is often the bottleneck in these calculations.  Unless each primary ray sent to rtrace spawns many, many daughter rays, most of the time overall will be spent communicating with and collecting results from the multiple rtrace child processes that the rtcontrib parent process creates.\n\n\nI have looked at the possibility of changing the way I partition the problem to put more work into the subprocesses, but the logic for that has thus far eluded me.  The rtcontrib program is quite complicated, and I would rather not increase its complexity further.  The only way I've found to effectively speed up rtcontrib on multiple cores when each rtrace process is churning through many rays quickly is to subdivide the input and reassemble it at the end.  This is a bit painful and requires some book-keeping on the part of the user, but for difficult or repetitive problems it may be worth the effort.\n\n\nBest of luck,\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2011-October/008193.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "October 13, 2011 at 07:17AM", "created_by": "Greg_Ward", "parent_id": "radiance-general_008192", "id": "radiance-general_008193"}