{"body": "Hi Dan, hi list subscribers,\n\n\nit is possible to encode a Radiance scene in XML. I tried it some years\nago. I did some extra work trying to do almost all conversions from/to\nXML using only xml stylesheets, to have no extra code. This still\nimplies adding two lines to the end and the beginning of a non-XML file,\nso that a stylesheet can be applied. Still, it was nice to use existing\nparsers instead of writing new ones.\n\n\nAt the time, I was mostly interested to investigate getting a nice\ndevelopment environment for writing scenes. E.g. validation. Even\ninformation on some physical boundaries might be included into a schema,\nleading to a warning when writing a funny trans definition using an XML\neditor. Or avoiding those errors due to polygons with a missing vertex.\nValidation during authoring is nice sometimes. Of course it gets\ndifficult when working with cal-files and similar stuff leading to\nvariable parameter lenghts.\n\n\nSome caveats are to be considered though. Radiance's scene language is\nvery 'linear'. It is allowed (and sometomes useful) to have a material\nname with very different properties. Radiance will apply the properties\nto objects referring to that material until the material is redefined.\nSo one material name can mean very different material properties, only\ndepending on the position in a scene file (or a stream of scene data, as\neven commands may get expanded in a scene). This is one example where\nRadiance may not follow what folks using XML may expect - unique ID's\nget available only once the scene is read in, they do not exist in the\nscene description. Another question may be how to treat expanded\ncommands. There are very good reasons to write a command into a scene\nfile, not the output of the command (e.g. to make modifications easier\nor to improve readability). However, XML as an exchange format would\ntypically not rely on a command but make a scene file a complete dataset\n(which then e.g. could simply be translated into a x3d file using a\nstylesheet, no Radiance binaries).\n\n\nIn the end, a lot about Radiance has always been performance and\nefficiency. My initial interest being authoring support in text-based\nenvironments, having gigabytes of scene data was not an issue. Huge\nscenes may have more efficient representations then XML though. Another\nquestion arising is about databases. XML has been developed to exchange\ndata in between databases (and all the validation techniques where ment\nto avoid havin a database messed up when importing someone else's data\nin the end). However, in Radiance, we have no database concept. Maybe\nthis would be something to think about - a database interface. Than we\ncould access unique objetc and modifier id's, could connect to e.g.\nlibrary databases, prevent some locking problems... but - do we really\nneed it, and does it match the requirements of what is basically a\nraytracing code???\n\n\nCheers, Lars.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2011-October/001146.html).</sup>", "attachments": [], "created_by_name": "Lars O. Grobe", "created_at": "October 30, 2011 at 11:09AM", "created_by": "Lars_O._Grobe", "parent_id": "radiance-dev_001142", "id": "radiance-dev_001146"}