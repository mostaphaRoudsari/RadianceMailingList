{"body": "Hi Greg,\n\n\n> This is interesting. \u00a0I hadn't realized that the Sigma lens used something other than the equidistant projection. \u00a0I thought this was the more normal type, and our casual measurements seemed to indicate that it followed this projection. \u00a0Perhaps I wasn't as careful as I ought to have been with my observations. \u00a0The horizon on the Sigma is enough of a mess that it's difficult to gauge things accurately at the outer rim of the circular image.\n\n\nTrue, the horizon is a bit messy, but A LOT cleaner than on the Nikon FC-E8.\n\n\n> Looking at the ever-helpful Wikipedia page on the topic <http://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function>, I see that the equidistant and equisolid-angle projections are fairly similar except at the outer reaches (near +/-90\u00b0). \u00a0Of course, errors could still be large assuming the wrong projection if your only light sources is out in that part of the view.\n\n\nHere's another good page with a helpful diagram (scroll down) to 'fisheye':\nhttp://www.bobatkins.com/photography/technical/field_of_view.html\n\n\n> In lieu of reprojecting the image with pinterp, which is as you say unsupported, it is possibly to apply a correction to the image values to account for the difference in solid angle at each pixel. \u00a0Given that the solid angle of the equisolid-angle projection is the same for each pixel, we really only need the solid angle for the equidistant projection. \u00a0This can be computed with a simple expression, which is sin(theta)/theta.\n\n\nYou see, this is where I get a little lost between 'projection',\n'distortion', and 'vignetting'. They are, of course, different things.\nSomething like (don't quote me on it):\n- projection: that would be 'equidistant' or 'equisolidangle'\n- distortion: the deviation from the ideal 'projection'. Think pin\ncushion or barrel\n- vignetting: drop-off in image brightness towards the image horizon\n\n\nWould not the sin(theta)/theta correction account only for the pixel\nbrightness? In other words: the pixel 'location' on the photographic\nplate/CCD chip would still be wrong, so that the Guth index in the UGR\nformula would be off?\n\n\nI can imagine that one could create a pcomb cal file that builds up a\nnew image from the corrected radial distance of the pixel in the\nsource image. If this get too aliased (blocky), one could average over\nthe nearby pixels using the optional x,y offset that pcomb provides,\ne.g. (spaces added for clarity):\nro=.5*ri(1) + .5*( ri(1,-1,0)+ri(1,1,0)+ri(1,0,-1)+ri(1,0,1) )/4 etc\nwhich is effectively a box filter. Not tested! Don't try this at home!\nOne could fiddle with the pixel/off-pixel multipliers (both .5 in this\ncase) to see what would look best. I'm not sure how floating point\npixel coordiantes are handled by pcomb. Are they just rounded off?\n\n\nThis approach would, of course, smudge out the luminance of the new,\nconstructed pixel to a certain extend, but considering that the lens\nrensponse function does this anyhow, it's probably a small price to\npay for a smooth-as-a-baby's-bottom image.\n\n\nThis would correct the pixel 'position', but where I get confused with\nall this is this: How would one then have to correct the pixel\nbrightness (vignetting?) to account for this re-projection of pixel\nlocations, while still maintaining photometric integrity of the image\nas a whole (vertical illuminance, say... Or UGR)?\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/hdri/2012-February/000350.html).</sup>", "attachments": [], "created_by_name": "Axel Jacobs", "created_at": "February 03, 2012 at 12:14PM", "created_by": "Axel_Jacobs", "parent_id": "hdri_000348", "id": "hdri_000350"}