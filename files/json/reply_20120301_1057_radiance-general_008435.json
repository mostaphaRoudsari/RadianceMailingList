{"body": "Hi Stefano,\n\n\nI did not use a graphical user interface, but embedded my scripts'\noutput into the scene files.\n\n\nI guess you are aware that Radiance will expand any line starting with\n\"!command\" by the output of the programm \"command\".\n\n\nSo e.g. having a line \"!genSkylight.pl $SIMTIME\" you would have\n\"genSkylight.pl\" called when you pass the scene into oconv. Assuming\n$SIMTIME is set to the date and time that you want to simulate, your\nscript could generate the geometry for the skylight and write it to\nstdout. If you also have a line \"!gensky $SIMTIME\" (plus the other\ngensky options) somewhere in your scene, you would make sure that the\nsky model matches the skylight's configuration. In the end, you would\nsimply export the environment variable $SIMTIME and call rad scene.rif\nto run the simulation. This could e.g. happen in a loop to go through a\nfull day.\n\n\nOf course there is a bunch of specialized programs out there, some with\na nice GUI, using Radiance as a back-end. I still wanted to draw your\nattention to the fact that it is very easy to add this kind of \"dynamic\nobjects\" to your scene using command expansion.\n\n\nI do not know about Daysim+Python, maybe others on the list can comment.\n\n\nCheers, Lars.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2012-March/008435.html).</sup>", "attachments": [], "created_by_name": "Lars O. Grobe", "created_at": "March 01, 2012 at 10:57AM", "created_by": "Lars_O._Grobe", "parent_id": "radiance-general_008429", "id": "radiance-general_008435"}