{"body": "Thanks Pally for this nice summary overview. I am very remiss in getting\nsomething like this posted to the OpenStudio support page. Thanks Axel for\nyour responses as well. Replies to both of you within...\n\n\n- Rob\n\n\n\n\nOn 9/6/12 10:10 AM, \"Pally Sandher\" <pally.sandher at iesve.com> wrote:\n>4 - The Radiance source including CMake files. Easiest way to get these\n>is to go to http://public.kitware.com/gitweb?p=radiance.git;a=tree &\n>click the \"snapshot\" link in the top left corner to download a .tar.gz\n>archive. The 4.1 release of the source doesn't have any of the CMake\n>files so you have to use the latest from the repository until an official\n>4.2 is released.\n\n\nActually the easiest way to grab the latest source tree is to install git\nand just make a clone of the repo on your system:\n\n\n$ git clone http://public.kitware.com/radiance.git\n\n\nThis is a copy of the CVS repository, and it's updated nightly. To update\nyour git clone after the initial download, simply do a git pull while in\nthe CVS directory:\n\n\n$ git pull\n\n\nNREL plans to host a repo on Github which will allow me to update the repo\nmanually whenever Greg checks in a change. But for now the Kitware repo is\nat least updated every evening at midnight.\n\n\n\n\n>5 - Qt libraries. These can either be installed using the pre-built\n>packages or built from source, all of which are available from\n>http://qt.nokia.com/downloads. I had built the Qt v4.8.2 libraries from\n>source previously so used that.\n\n\nThe installer works fine too.\n\n\n>6 - Tiff library for Windows. Again this can either be installed using a\n>pre-built package or built from source. You can find this at\n>http://gnuwin32.sourceforge.net/packages/tiff.htm I used the pre-built\n>package as the sources are configured to be built with Visual Studio 6 &\n>wasn't in the mood to update it just to build a .lib file.\n\n\nYup, I use the installer for this as well. Easier.\n\n\n>You should then be able to load up CMake, point it at the root of the\n>Radiance source tree, give it a build directory (I suggest something like\n>\"build\" inside the extracted source directory to keep things together) &\n>click Configure. Assuming no errors, you should then be able to click\n>Generate & you'll get a load of projects & solutions built. You can then\n>open the solution and build the projects. It will output the files to\n><build directory>\\bin\\Release or <build directory>\\bin\\Debug\\\n>\n>At this point I suggest you download the zip archive of binaries and\n>library files from\n>https://openstudio.nrel.gov/getting-started-developer/getting-started-radi\n>ance as you only have a load of binaries which is great but you'll be\n>missing crucial library files so you can't really do anything with your\n>binaries (and no manuals either).\n\n\n\n\nMake by default merely builds the executables. If you build the INSTALL\ntarget, everything will be installed, including libraries, manual pages\nand all the scripts (Perl and Ruby only on Windows, of course). This is\nthe same on the other platforms. \"make install\" will build all the\nexecutables and copy everything else. The default behavior is to do this:\n\n\nBinaries in /usr/local/radiance/bin\nLibrary files in /usr/local/radiance/lib\nManpages in /usr/local/radiance/man\n\n\n\n\n>A few issues I have with the above are as follows:\n>1 - Qt and libtiff are *required* for CMake to generate a build source.\n>They should be optional & when not available the relevant projects which\n>require them (rvu, ra_tiff etc) should be omitted from the generated\n>source. Zlib can be omitted without issue (not sure which project uses it\n>though).\n\n\nIt would be more user-friendly to do that Pally, but honestly a LOT of the\neffort around this project was to give Windows users access to programs\nlike rvu. I consider ra_tiff and rvu to be critical programs in the\nRadiance suite and to include them was a major goal of this project. We\ncan re-write the CMakeLists.txt files to function as you state, but it's\nway down there on my priority list.\n\n\n>2 - CMake generates projects using Absolute paths rather than Relative\n>paths. Major failure point as this requires manual updating of over 100\n>projects with a minimum of 5 paths per project if you wish to fix this\n>otherwise you must replicate the file structure on every machine you want\n>to use the CMake generated build source. All other projects I've used\n>which implement CMake will give you the option of using relative paths if\n>you so wish.\n\n\nI'm not sure I follow you here, but if you explain maybe I can fix what's\nbusted for you. \n\n\n>3 - falsecolor , genBSDF, genklemsamp, genskyvec & objview don't exist in\n>the CMake build source. I assume this is due to them being Perl & Ruby\n>scripts in the NREL binaries archive (falsecolor appears to have C source\n>code available?)\n\n\nRight. Again, these are installed and suffixed per convention (i.e. The\nsuffixes are removed on UNIX systems), when the INSTALL target is made.\n\n\n>4 - manuals are in unix man/postscript format which unsurprisingly isn't\n>widely supported on Windows. Should preferably be Compiled HTML Help\n>(.chm) or at the very least converted to HTML or PDF to make them more\n>readable.\n\n\nTotally agree. This is also on the list of nice-to-haves, I just haven't\nhad time to figure out an automated way to do that on Windows. The\nmanpages are updated on the radiance-online.org site, however. Maybe we\nshould just generate a link to them in the  /man directory on Windows\nbuilds for now. (?)\n\n\nAndy, how do those updates work? I can't access the radiance-online.org\nsite from work because of our firewall crap, but I'm pretty sure there's a\nlink there with links to pdf versions of all the manpages, right?\n\n\n>5 - Radiance source is littered with the now defunct Scons build files.\n>Not a massive issue but they should probably be cleaned out since they're\n>no longer relevant.\n\n\nThis was discussed when the CMake system was implemented and it was agreed\nthat it is absolutely still relevant. They are not defunct, and Georg\nMischler for one still uses them. So, they should stay.\n\n\n>6 - Building using Shared libraries doesn't work. Code is generated but\n>attempting to build generates loads of linker errors. Again not a massive\n>issue since static builds work fine & the compiled binaries are small\n>enough that they're unlikely to save much anyway but I thought I should\n>mention it.\n\n\nGood point. Something else for the to-do list.\n\n\n>7 - 2107 warnings during build. Some of these may be due to me using VS\n>2010 while NREL use VS 2008 however but even still it's rather high for\n>such a small code base.\n\n\nMmm, I generally don't get too worked up about warnings, but maybe we can\nlook into this at some point.\n\n\n>That's it so far. I have to say it's a giant leap from the old decrepit\n>Scons system. Building now takes minutes once you've downloaded the code\n>rather than hours (and actually works 'out of the box' without requiring\n>a load of manual tweaking).\n\n\nGood news Pally, glad you're able to make use of it. I just got a new\nMacBook Pro and the very first thing I installed on it was CMake, and\ngrabbed the Radiance source. The whole project built in 11 seconds (using\nall \"eight\" cores), no kidding.\n\n\nThanks very much for this summary. I would like to use some of your info\nwhen I eventually get around to making a HOWTO for this.\n\n\nOn 9/6/12 10:26 AM, \"Axel Jacobs\" <jacobs.axel at gmail.com> wrote:\n\n\n>falsecolor , genBSDF, genklemsamp, genskyvec are all Perl scripts. At\n>present, they require a Perl interpreter to be installed. It is\n>possible to compile them into exe files using PAR::Packer. I've\n>successfully done this with falsecolor, but this is not part of the\n>build system yet (not in Classic and not in NREL). I believe it's one\n>of Rob's nice-but-not-essential items on his to-do list.\n\n\nYeah, it would be nice to compile all of those, but then again since there\nare still a great many Radiance bits implemented as csh scripts, I sorta\nfeel like converting those should be more of a priority than eliminating a\ncouple of simple deps. Believe it or not, I just got an email from someone\nyesterday asking where \"phisto\" was in his Windows installation. I didn't\neven know that one was a csh script until I looked!\n\n\n>objview for Windows is a Ruby script. This should probably be\n>re-written in Perl to avoid unnecessary folking of the source tree and\n>extra deps for non-OpenStudio users.\n\n\nI respectfully disagree, Axel. I think reimplementing objview in Perl\nwould be a step backwards, and just another duplicated effort. I'd rather\nsee other csh scripts get converted (and then compiled, at which point the\nlanguage of choice becomes moot), personally.\n\n\n- Rob\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2012-September/001244.html).</sup>", "attachments": [], "created_by_name": "Rob Guglielmetti", "created_at": "September 06, 2012 at 11:13AM", "created_by": "Rob_Guglielmetti", "parent_id": "radiance-dev_001242", "id": "radiance-dev_001244"}