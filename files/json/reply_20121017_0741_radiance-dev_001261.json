{"body": "On 10/16/12 7:56 PM, \"Jack de Valpine\" <jedev at visarc.com<mailto:jedev at visarc.com>> wrote:\n\n\nHi Tim,\n\n\nI cannot test this right now, however I do know that it is possible for gendaylit to fail in select conditions. If I recall correctly, one is if the direct normal radiance is zero (not the case here). There are other cases where it fails more dramatically, which is what you are facing I believe. In this case I think that the thing to do is re-use a previous value from the data set (eg the previous hour).\n\n\nUnfortunately, what you really need to do is actually \"test\" if gendaylit is going to produce valid output prior to actually getting the output. This can be done by evaluating the result of:\ngendaylit $myArgs > /dev/null  2>&1\n\n\nwhich in your case would be\n\n\ngendaylit 7 19 14.500 -W 924 65 -a 34.3 -o 116.17 -m 120 > /dev/null 2>&1\n\n\nAssuming your are processing a complete weather file then you need to test every time step that is not definitively at night, so that you can catch any time steps that case an error for gendaylit and then do something in those places.\n\n\nThis has been a constant headache for us as well, as we are trying to use gendaylit in the OpenStudio annual simulation stuff. We do a test like Jack has illustrated above, again cribbing from Axel's excellent tutorials. We have found that bad sky descriptions can still be written (or nothing), and our test can miss some. The error reporting in gendaylit seems inconsistent. We try to scan for all the warnings/errors we have seen coming from gendaylit like so:\n\n\ngendaylit_command = \"gendaylit -ang #{tsSolarAlt} #{tsSolarAzi} -L #{tsDirectNormIllum} #{tsDiffuseHorIllum} 2>&1\"\n            tempIO = IO.popen(gendaylit_command)\n            gendaylit_output = tempIO.readlines.to_s\n            tempIO.close\n\n\n            tempSky = true\n            if /[wW]arning/.match(gendaylit_output) or /[eE]rror/.match(gendaylit_output) or /valid/.match(gendaylit_output) or /[cC]heck/.match(gendaylit_output) or /skyclearness/.match(gendaylit_output)\n              tempSky = false\n            End\n\n\n\u2026we fall back on gensky if found. Andy McNeil proposes scanning for a really tiny file (one of the failure modes for gendaylit is it writes a blank file with no errors generated). I implemented that in Ruby with the tempfile class, but obviously I did a poor job because the tempfiles were not being properly killed, so I took that out for now. But I do need to beef up this error checking as we'd prefer to use gendaylit.\n\n\n- Rob\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2012-October/001261.html).</sup>", "attachments": [], "created_by_name": "Rob Guglielmetti", "created_at": "October 17, 2012 at 07:41AM", "created_by": "Rob_Guglielmetti", "parent_id": "radiance-dev_001258", "id": "radiance-dev_001261"}