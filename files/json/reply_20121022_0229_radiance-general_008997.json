{"body": "Thank you very much, Lars and Giulio!\n\n\nI did some test and seem to be able to make it work following your\nsuggestion.\n\n\nHowever, my major concern is that this is NOT the so called Sky Exposure\nFactor we'd like to calculate, and the value thus obtained may vary as the\nview type changes (e.g. -vts or -vta) which is not suppose to happen if the\nscene geometry remains the same.\n\n\n\n\nAllow me to explain the script, and pls kindly help to verify if it is\ndoing what you suggested.\n\n\nThe bash script below calculate the proportion of visible sky based on\ncounting pixels in a \"virtual fisheye rendering\":\n\n\n#### the script #####################\noconv ./plastic_mat.rad ./geom1.rad > ./scene1.oct\nvwrays -fd -vf ./view_vta.vf -x 800 -y 800 | rtrace -av 1 1 1 -w -h -fda\n-opdv ./scene1.oct > ./zzz_vta_pts_P_N_v_1.txt\nvwrays -fd -vf ./view_vta.vf -x 800 -y 800 | rtrace -av 1 1 1 -w -h -fda\n-opdv ./scene1.oct | rcalc -e '$1=if($7,1,0); $2=1' | total >\n./zzz_vta_pts_total_1.txt\noconv ./plastic_mat.rad ./geom2.rad > ./scene2.oct\nvwrays -fd -vf ./view_vta.vf -x 800 -y 800 | rtrace -av 1 1 1 -w -h -fda\n-opdv ./scene2.oct > ./zzz_vta_pts_P_N_v_2.txt\nvwrays -fd -vf ./view_vta.vf -x 800 -y 800 | rtrace -av 1 1 1 -w -h -fda\n-opdv ./scene2.oct | rcalc -e '$1=if($7,1,0); $2=1' | total >\n./zzz_vta_pts_total_2.txt\nrlam ./zzz_vta_pts_total_1.txt ./zzz_vta_pts_total_2.txt >\n./zzz_vta_pts_total_temp.txt\nrcalc -e '$1=($3-$1)/$3' ./zzz_vta_pts_total_temp.txt >\n./zzz_vta_pts_total_final.txt\n#################################\n\n\n1. scene1.oct describes a cylinder like geometry (diameter=2, height=1)\nwith its top and bottom open. This is suppose to be the obstruction for the\nview point, and from which the sky exposure factor is to be calculated\n\n\n2. scene2.oct describes a cone in the same position as the cylinder, in the\nsame height and with the same bottom circle diameter. It is to obstruct the\nview entirely so that we can \"ironically\" calculate the total number of\nrays that may reach the sky if there's no obstruction to the view.\n\n\n3. view_vta.vf defines an upward angular fisheye view of 180 degrees\nlocated at the centre of the bottom circle of the cylinder\n\n\n4. in the 2nd line of the script, the \"-opdv\" option in the rtrace outputs\nthe xyz coordinates, xyz normal vectors, and radiance value for each point\nas a result of the intersection of a ray and the cylinder geometry to a\ntext file. If a ray didn't hit any geometry, it will return seven zeros: \"0\n0 0 0 0 0 0\".\n\n\n5. in the 3rd line of script, an evaluation is conducted: if the 7th value\nas output for each ray is a positive value (which means the ray hits the\ngeometry and return a value as a results of the -av 1 1 1 option), that ray\nwill be marked as \"1\", otherwise, it'll be marked as \"0\". The \"total\" in\nthis line sums all the values and outputs the two values to\n\"zzz_vta_pts_total_1.txt\": the first value is the total number of rays hit\nthe inner side of the cylinder (or the total number of pixels in the\n400x400 virtual fisheye rendering that is in grey color), and the second\nvalue is the total number of pixels in the \"virtual fisheye rendering\"\nwhich in this case is 400*400=640000\n\n\n6. similarly, in the 6th line of script, the two values output to\n\"zzz_vta_pts_total_2.txt\" is the total number of rays that may reach the\nsky (which is also the total number of the rays hit the inner side of the\ncone which block the view completely in this case), and the total number of\npixels.\n\n\n7. in the last line of script, the \"$3-$1\" part is to calculate in scene1\nthe actual number of rays that may reach the sky (or in the virtual fisheye\nimage the number of pixels representing the visible sky patch)\n\n\n8. finally, the ratio of the visible sky path to the unobstructed sky dome\nis calculated...\n\n\n9. Validation:\nWe have a similar in-house approach to calculate the Sky Exposure Factor\n(SkyEF) built on a 3D modeling software, in which we literally shoot out a\nbunch of points evenly spaced in a 2*PI upward solid angle from the\nviewpoint towards a sky hemisphere surface. We than calculate the ratio\nbetween the number of points reaching the sky dome surface and the total\nnumber of points shot to get the SkyEF. For the cylinder scenario tested\nhere, the SkyEF should be 0.2929 or 29.29%, which is actually the ratio\nbetween the solid angle subtended by the view to sky: 2*PI*(1-cos45) to the\nsolid angle of an unobstructed sky hemisphere: 2*PI. However, the\nvrways+rtrace approach as described here can't get the this value. I've\nvisualized the all the intersection points based on the\nzzz_vta_pts_P_N_v_1.txt file, and I found that the total number of points\nhitting obstructing geometry is different for different view type\nspecifications. I assume it's related to how the nature of the fisheye\nimage distortion...\n\n\nI apologize if I didn't explain clearly. I'd appreciate if both of you and\nthe list can further advise on an appropriate view-type-independent\nRadiance approach to calculate Sky Exposure Factor !\n\n\n- Cheers, Ji\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2012-October/008997.html).</sup>", "attachments": [], "created_by_name": "Ji Zhang", "created_at": "October 22, 2012 at 02:29AM", "created_by": "Ji_Zhang", "parent_id": "radiance-general_008984", "id": "radiance-general_008997"}