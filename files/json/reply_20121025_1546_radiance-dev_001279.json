{"body": "Actually there are no CMake \"scripts\" in the source tree, merely CMake build system files. Due to dependencies on libtiff (and Qt for the fully cross-platform rvu), and of course CMake, there is slight brain pain in getting your personal system ready to build, but from there a little scripting skill is all you need to use the CMake system. Check it out:\n\n\nThis is the script that we call on our nightly test machines (this builds the project and runs the ctests, and relies on a Kitware git clone of the Radiance CVS repo):\n\n\n#!/usr/bin/ruby\n\n\n##############################################################################\n# Build Radiance\n##############################################################################\n\n\nrequire 'pathname'\nrequire 'fileutils'\nrequire 'erb'\nrequire 'socket'\n\n\n##############################################################################\n#Common Functions\ndef configure(rcmake,cmake,env)\n  template_text = ''\n  File.open(rcmake) { |f| template_text << f.read }\n  template = ERB.new(template_text)\n\n\n  FileUtils.mkdir_p(cmake.dirname)\n  File.open(cmake,'w+') { |f| f << template.result(env) }\nend\n\n\ndef run(cmake)\n  build_config = ''\n  verbose_cmd = ''\n  if VERBOSE_OUTPUT\n    verbose_cmd = '-VV'\n  end\n  if /mswin/.match(RUBY_PLATFORM)\n    build_config = \"-C \\\"Release\\\"\"\n  end\n  system(\"ctest #{verbose_cmd} #{build_config} -S #{cmake}\")\nend\n\n\ndef run_nightly(rcmake,cmake,env)\n  configure(rcmake,cmake,env)\n  run(cmake)\nend\n\n\n##############################################################################\n# Script Variables\ncase Socket.gethostname\n\n\nwhen \"hooper-2.local\"\n  win_version = \"none\"\n  site = \"hooper\"\n  build_name_modifer = \"OSX-10.8-Universal\"\n  dashroot = Pathname.new(\"/Users/rpg/repos/radiance_build/radiance/\")\nelse\n  win_version = \"none\"\n  build_name_modifer = \"\"\nend\n\n\nscript_dir = Pathname.new(__FILE__).dirname.realpath\nclean_build = true\nVERBOSE_OUTPUT = true\nif /mswin/.match(RUBY_PLATFORM)\n  dashroot = Pathname.new(\"C:/radiance_build/radiance/\")\n  generator = \"Visual Studio 9 2008 Express\"\nelse generator = \"Unix Makefiles\"\nend\njobs = \"2\"\nif /linux/.match(RUBY_PLATFORM)\n  ENV['LC_CTYPE'] = 'en_US.UTF-8'\n  ENV['LANG'] = 'en_US.UTF-8'\n  display = ENV['DISPLAY']\n  dashroot = Pathname.new(\"/home/bldadmin/radiance_build/radiance/\")\nelsif /darwin/.match(RUBY_PLATFORM)\n  dashroot = Pathname.new(\"/rad/radiance_build/radiance/\")\nend\n\n\nDir.chdir(dashroot)\nsystem(\"git pull\")\n\n\nsource_directory = (dashroot).to_s\nbinary_directory = (dashroot + \"build\").to_s\nradiance_build_dir = binary_directory\nmodel = \"Nightly\"\n\n\n\n\nrun_nightly(\"#{script_dir}/radiance.rcmake\",dashroot + \"radiance.cmake\",binding)\n\n\n#EOF\n\n\n...and this is the .rcmake file contents that I think Denny can get a lot of tips from:\n\n\nCMAKE_MINIMUM_REQUIRED( VERSION 2.8.4 )\n##############################################################################\n# Build Radiance\n##############################################################################\n# Configuration variables to be set by the managing ruby script\n#\n# Path configuration for build and source directories\nSET( CTEST_SOURCE_DIRECTORY \"<%=source_directory%>\" )\nSET( CTEST_BINARY_DIRECTORY \"<%=binary_directory%>\" )\n# generator\nSET( generator \"<%=generator%>\" )\n# win_version\nSET( win_version \"<%=win_version%>\" )\n# model\nSET( model \"<%=model%>\" )\n\n\nSET( CTEST_ENVIRONMENT \"DISPLAY=<%=display%>\" )\n\n\n# clean_build\nSET( clean_build <%=clean_build%> )\n# jobs\nSET( jobs \"<%=jobs%>\" )\n# build name modifer\nSET( build_name_modifer \"<%=build_name_modifer%>\" )\nSET( radiance_build_dir \"<%=radiance_build_dir%>\" )\nSET( site \"<%=site%>\" )\n\n\n##############################################################################\n# Project, Site, and Build name configuration\n#SITE_NAME( SITE )\nSET( CTEST_SITE <%=site%> )\nSET( CTEST_BUILD_NAME \"${CMAKE_SYSTEM_NAME}-${build_name_modifer}\" )\n\n\n\n\n###############################################################################\n# Configure for CDash\nSET( CTEST_PROJECT_NAME \"Radiance\" )\nSET( CTEST_NIGHTLY_START_TIME \"00:00:00 MST\" )\nSET( CTEST_DROP_METHOD \"http\" )\nSET( CTEST_DROP_SITE \"my.cdash.org\" )\nSET( CTEST_DROP_LOCATION \"/submit.php?project=Radiance\" )\nSET( CTEST_DROP_SITE_CDASH TRUE )\n\n\n\n\n###############################################################################\n# Set the package type\n# Can only have one package type\nSET( UNIX_PACKAGE_NAME \"all\" )\nSET( MSVC_PACKAGE_NAME \"ALL_BUILD\" )\n\n\n###############################################################################\n# Build type\n# Configures CTest to use the correct build command depending on platform\n\n\n#### Linux and Mac\nIF( ${generator} STREQUAL \"Unix Makefiles\" )\n  SET( CTEST_CMAKE_GENERATOR \"Unix Makefiles\" )\n  SET( CTEST_BUILD_COMMAND \"make ${UNIX_PACKAGE_NAME} -j${jobs}\" )\n#### Windows - ${win_version} needs to be set if building on windows 7\n# Visual Studio 2008\nELSEIF( ${generator} STREQUAL \"Visual Studio 9 2008\" )\n  SET( CTEST_CMAKE_GENERATOR \"Visual Studio 9 2008\" )\n  SET( MSVC_IS_EXPRESS \"OFF\" )\n  IF( ${win_version} STREQUAL \"7\" )\n    SET( CTEST_BUILD_COMMAND \"\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 9.0\\\\Common7\\\\IDE\\\\devenv.com\\\" Radiance.sln /build Release /project ${MSVC_PACKAGE_NAME}\" ) \n  ELSE()\n    SET( CTEST_BUILD_COMMAND \"\\\"C:\\\\Program Files\\\\Microsoft Visual Studio 9.0\\\\Common7\\\\IDE\\\\devenv.com\\\" Radiance.sln /build Release /project ${MSVC_PACKAGE_NAME}\" ) \n  ENDIF( ${win_version} STREQUAL \"7\" )\n# Visual Studio Express 2008\nELSEIF( ${generator} STREQUAL \"Visual Studio 9 2008 Express\" )\n  SET( CTEST_CMAKE_GENERATOR \"Visual Studio 9 2008\" )\n  SET( MSVC_IS_EXPRESS \"ON\" )\n  IF( ${win_version} STREQUAL \"7\" )\n    SET( CTEST_BUILD_COMMAND \"\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 9.0\\\\Common7\\\\IDE\\\\vcexpress.exe\\\" Radiance.sln /build Release /project ${MSVC_PACKAGE_NAME}\" ) \n  ELSE()\n    SET( CTEST_BUILD_COMMAND \"\\\"C:\\\\Program Files\\\\Microsoft Visual Studio 9.0\\\\Common7\\\\IDE\\\\vcexpress.exe\\\" Radiance.sln /build Release /project ${MSVC_PACKAGE_NAME}\" ) \n  ENDIF( ${win_version} STREQUAL \"7\" )\n# Visual Studio 10\nELSEIF( ${generator} STREQUAL \"Visual Studio 10\" )\n  SET( CTEST_CMAKE_GENERATOR \"Visual Studio 10\" )\n  SET( MSVC_IS_EXPRESS \"OFF\" )\n  SET( CTEST_BUILD_COMMAND \"\\\"C:\\\\Program Files\\\\Microsoft Visual Studio 10.0\\\\Common7\\\\IDE\\\\devenv.com\\\" Radiance.sln /build Release /project ${MSVC_PACKAGE_NAME}\" )\n# Visual Studio Express 10\nELSEIF( ${generator} STREQUAL \"Visual Studio 10 Express\" )\n  SET( CTEST_CMAKE_GENERATOR \"Visual Studio 10\" )\n  SET( MSVC_IS_EXPRESS \"ON\" )\n  SET( CTEST_BUILD_COMMAND \"\\\"C:\\\\Program Files\\\\Microsoft Visual Studio 10.0\\\\Common7\\\\IDE\\\\vcexpress.exe\\\" Radiance.sln /build Release /project ${MSVC_PACKAGE_NAME}\" )  \nENDIF()\n\n\n\n\n###############################################################################\n# Start with a completely empty binary directory?\nIF( clean_build )\n  CTEST_EMPTY_BINARY_DIRECTORY( \"${CTEST_BINARY_DIRECTORY}\" )\nENDIF()\n\n\n\n\n###############################################################################\n# Start\nmessage(\"CTest: Starting ${model} in ${CTEST_BINARY_DIRECTORY}\")\nctest_start(\"${model}\" \"${CTEST_SOURCE_DIRECTORY}\" \"${CTEST_BINARY_DIRECTORY}\" )\n\n\n\n\n###############################################################################\n# Set the initial cache and other model specific variables\n\n\nSET( INITIAL_CACHE \"\n#  BUILD_TESTING:BOOL=ON\n  MSVC_IS_EXPRESS:BOOL=${MSVC_IS_EXPRESS}\n  CTEST_SITE:STRING=<%=site%>\n\")\n\n\n# Mac specific cache stuff\nIF( APPLE )\n  SET( INITIAL_CACHE \"\n     ${INITIAL_CACHE}\n     CMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.5\n     CMAKE_OSX_SYSROOT:STRING=/Developer/SDKs/MacOSX10.5.sdk\n     CMAKE_OSX_ARCHITECTURES:STRING=i386;x86_64\n  \")\nENDIF()\n\n\n###############################################################################\n# If binary directory does not exist, we create it and add the initial cache\n# If it does exist we just update the svn version\nIF( NOT EXISTS \"${CTEST_BINARY_DIRECTORY}/CMakeCache.txt\")\n  # Write initial cache.\n  file(WRITE \"${CTEST_BINARY_DIRECTORY}/CMakeCache.txt\" \"${INITIAL_CACHE}\")\nELSE()\n  file(READ \"${CTEST_BINARY_DIRECTORY}/CMakeCache.txt\" CACHE_TEXT) \n  string(REGEX REPLACE \"CMAKE_VERSION_BUILD:STRING=[A-Za-z0-9]*\"\n        \"CMAKE_VERSION_BUILD:STRING=${REPO_VERSION}\"\n        NEW_CACHE_TEXT \"${CACHE_TEXT}\" )\n  file(WRITE \"${CTEST_BINARY_DIRECTORY}/CMakeCache.txt\" \"${NEW_CACHE_TEXT}\") \nENDIF()\n\n\n\n\n###############################################################################\n# Configure\nmessage(\"CTest: Configuring ${model}\")\nctest_configure( BUILD \"${CTEST_BINARY_DIRECTORY}\" SOURCE \"${CTEST_SOURCE_DIRECTORY}\" RETURN_VALUE res )\nIF(NOT res EQUAL 0 )\n  message(\"CTest: Configure failed\")\nENDIF()\n\n\n\n\n###############################################################################\n# Build\nmessage(\"CTest: Building ${model}\")\nctest_build( BUILD \"${CTEST_BINARY_DIRECTORY}\" NUMBER_ERRORS res )\nIF(NOT res EQUAL 0 )\n  message(\"CTest: Build failed\")\nELSE()\n  message(\"CTest: Build succeeded\")\nENDIF()\n\n\n\n\n###############################################################################\n# Test\nmessage(\"CTest: Testing ${model}\")\nctest_test( BUILD \"${CTEST_BINARY_DIRECTORY}\" RETURN_VALUE res )\n\n\n\n\n###############################################################################\n# Submit\nmessage(\"CTest: Submitting results to CDash\")\nctest_submit(RETURN_VALUE res )\n\n\n# EOF\n\n\nThis is an entirely automated process, just a cron job. No reason why you couldn't request a \"make package\", here. I know that CMake supports the creation of RPMs too, I'm just not familiar with the specifics.\n\n\n- Rob\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2012-October/001279.html).</sup>", "attachments": [], "created_by_name": "Rob Guglielmetti", "created_at": "October 25, 2012 at 03:46PM", "created_by": "Rob_Guglielmetti", "parent_id": "radiance-dev_001266", "id": "radiance-dev_001279"}