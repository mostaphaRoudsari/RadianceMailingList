{"body": "Hi Rob/Thomas\n\n\nI have to express some ambivalence on this topic. Having reCently published a paper expressing my views on the quick 'performance sketch' approach to models, I confess to being a fan of small quick repetitive analysis tasks using fully capable software. Rather than using behemoth BIM models, lightweight models and sophisticated modelling software is The way to mainstream simulation. \n\n\nThat said, in trying to mainstream daylight and energy analysis and acoustic analysis with a class of 200 architecture, building science and interiors students, I am struggling to get them to think about modelling as an abstraction exercise. There is something inherently satisfying about the apparent reality of the behemoth BIM with its door handles modelled, which students are reluctant to turn away from. They want their models to look real in their 3D form, not to be a simple representation of the lighting (or thermal, or acoustic) principles at work in their design. \n\n\nit is hard enough to focus students on this form of abstraction. If I was also to ask them to work with a series of tools in an analysis  toolbox then the push back would be immense. My student engagement with the results of analysis has improved out of sight as we have moved from a command line or script interface towards a 3D model with associated calculation capabilities. If I look at the OpenStudio approach, then I am ecstatic that the people learning simulation now engage early with modelling the influence of their design ideas on performance, and are no longer struggling with text interfaces. They come back to those text interfaces with a clear idea of what more they want to do. But then they find the same problem that even experienced users of scripts / text interfaces find - that there are so many scripts / tools that knowing which one to use or finding whether is a mind boggling task. This applies even when you know the script / capability exists in the toolbox. I and some grad students face exactly this issue with OpenStudio - we know and useEnergyPlus/GenOpt, we want to compare it to openStudio/Dakota as weaving Radiance into the optimisation would be such an improvement. We know and can see examples of Ruby scripts for Dakota. But getting it running is something we do not have the time for..\n\n\nAnother architectural world is facing similar issues: scripting of parametric relationships in geometry within the Rhino modeller. There is some empirical research that suggests people are more effective modellers when they have the Grasshopper graphical interface to the scripts available. Grasshopper provides an interface to the Rhino script which represent snippets of script code as boxes which are graphically 'wired' together. However, even experienced users of Grasshopper+Rhino find it difficult to find the box/snippet of code that does the job they are thinking about. Many versions of the same geometrical operation are produced because the catalogue of box/snippets does not exist or describes them in unfamiliar ways. \n\n\nI am very keen to support this Python toolbox idea, but caution it is only as good as the database/interface to the tools. Clearly, the Ecotect approach is something to be learned from. It was constructed as a consistent interface to a bunch of analytical tools. It is best used in a mode where the interface is used to create different models for different analytical purposes, and the advantage is consistency of modelling environment. Unfortunately, this consistent modelling interface tempts the user to the notion it would be more efficient to have one model... With respect to the Python toolbox, it seems to me the Python part is the simple part. What we all need to think about when creating these suggested Python suitable tasks is\na) a set of tags/ key words that would make the code accessible in a world where many hundreds of tools are in the tool box;\nb) a set of modelling guidelines that are associated with each script that enable the user to group tools by abstraction level /type and hence plan how many models might be required;\n\n\nWith this assistance from us, Marcus, Clayton and Allen have a chance of building a set of tools that we all embrace. I am thinking, I'd like this kind of exercise to provide not just a few Python tools I can dream up, but make accessible a whole bunch of others' ideas as well. \n\n\nM\n\n\nMichael Donn\n+642161280\nMichael.Donn at gmail.com\n\n\nSent from my iPad\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2012-December/009101.html).</sup>", "attachments": [], "created_by_name": "Michael Donn", "created_at": "December 04, 2012 at 10:31AM", "created_by": "Michael_Donn", "parent_id": "radiance-general_009083", "id": "radiance-general_009101"}