{"body": "Hi Michael,\n\n\nthe question of extracting certain regions of interest from an HDR \noccupied me a couple of years ago. The box filter approach that Greg is \nsuggesting is certainly doable. However, if you want more than the \nneighbouring 8 pixel, you will have to think about how useful a 'box' is \nas opposed to all pixels within a certain radius, ie a 'circle'.\n\n\nIf you take this a little further (and out of your FC context), then you \nmight wish to extract a number of shapes from an HDR image:\n- circles, ellipses\n- squares, rectangles\n- points\n- lines\n- polygons\n- masked areas (b/w HDR image)\n\n\nThe latter is easily doable, but all the other shapes are not, unless \nthey are cast into a mask first. Well, I supposed arbitrary 'boxes' can \nbe done, too.\n\n\nBack then, I wrote a Python script that I named pextract. It never \nworked to my complete satisfaction, mostly because it was agonisingly \nslow. It took several minutes for a 3 or so megapixel HDR to be \nprocessed. Part of the reason might be that this was a pure Python HDR \nreader, and I did very little in terms of optimising the RGBE parser.\n\n\nHelp output is below to give you an idea of what it did:\n\n\n$ pyray_pextract.py -h\nUsage: pyray_pextract.py [options] file.hdr\n\n\nExactly one action is required.\n\n\nOptions:\n   --version             show program's version number and exit\n   -h, --help            show this help message and exit\n   -f, --flip            The origin of an HDR image is at the bottom-left\n                         corner. This switch inverts the row order, \nputting the\n                         origin at the top-left. This is the convention for\n                         most image processing software [default: False].\n   -a, --all             Instead of dropping all pixels outside of the \nshape,\n                         colour them black and output them, too. This can be\n                         used for reverse-assembling a new HDR image, and is\n                         useful for testing and debugging.\n   -d, --data-only       Output data only, do not print x and y pixel \nposition.\n\n\n   Actions:\n     -l x0,y0,x1,y1, --line=x0,y0,x1,y1\n                         Extract values along a line.\n     -r x0,y0,x1,y1, --rectangle=x0,y0,x1,y1\n                         Extract values inside a rectangle.\n     -e x0,y0,x1,y1, --ellipse=x0,y0,x1,y1\n                         Extract values inside an ellipse.\n     -p x0,y0,x1,y1,...,xn,yn, --polygon=x0,y0,x1,y1,...,xn,yn\n                         Extract values inside a polygon.\n\n\nWhat I am trying to say with all this is this: Yes, a box shaped extreme \nis doable, but I wonder how much use it would be for anything other than \na VERY specific purpose. It is also easy enough to create a circular b/w \nmask with pcomb and link this mask into FC, but this would put all sorts \nof if and but statements into the FC code, and might quickly become \nugly. In all likelihood, you will also wish to indicate the box/circle \ncoordinates in the legend or a caption, since by just looking at the FC \nimage, it would not be apparent how the label got there, and what it \nrepresents.\n\n\nIn that sense, I'd be inclined to say that the 'value at specific x,y' \nyou mentioned in your earlier post would probably be more generally \nuseful. As it happens, I am currently working at a project where exactly \nthis functionality might be required. My quick-n-dirty approach would be \nto extract the value with pvalue, grep for the pixel, then stick the \nlabel onto the FC image (or even the LDR image--ImageMagick is pretty \ncool) afterwards. I might look into this as a new feature for FC if \nthere is general interest.\n\n\nRegards\n\n\nAxel\n\n\n\n\nOn 12/11/13 20:10, Greg Ward wrote:\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2013-November/009866.html).</sup>", "attachments": [], "created_by_name": "Axel Jacobs", "created_at": "November 12, 2013 at 01:27PM", "created_by": "Axel_Jacobs", "parent_id": "radiance-general_009797", "id": "radiance-general_009866"}