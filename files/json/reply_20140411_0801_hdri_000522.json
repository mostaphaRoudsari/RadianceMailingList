{"body": "Dear Joshua,\n\n\nthe command pcomb allow you to do that. However, there are some caveats \nto be aware of:\n\n\n1) The center of the image in the meaning of x_max / 2, y_max / 2 is not \n(exactly) the centre of the lens. There is no perfectly aligned camera, \nthe optical axis will almost never pass the sensor exactly in its \ncenter. So your \"zero\" coordinates will be at x_max / 2 + x_off, y_max / \n2 + y_off.\n\n\n2) Do you have any information how uniform your sphere actually is? \nRelying on the uniformity of the source for such calibrations seams to \nbe a bit risky, unless the uncertainties are known.\n\n\nNeglecting these, with pcomb, you can create an image describing the \nvignetting such that for each pixel you have the ratio of pixel values \npv_observed / pv_uniform, with this ration being expected as one for the \ncentre and decreasing towards the edges. In this example, I avoid all \ncalculations regarding the fall-off from an image center, instead this \nwould simply divide the uncorrected image pixel-wise by the \"reference \nimage\", with all pixels having the value pv_max. You can get pv_max \nusing e.g. rvu, which allows you to select an area and get the average \nof the contained pixel values.\n\n\n1) create a \"reference image\" of uniform pixel values pv_max as \n\"measured\" at the centre of your image, e.g. using rvu (replace <max_x> \n<max_y> by the resolution of your images, and use your readings at the \nimage centre instead of 1,1,1 when assigning ro, go and bo):\n\n\npcomb -x <max_x> -y <max_y> -e 'ro=1; go=1; bo=1' > reference.hdr\n\n\n2) create a correction frame, where pixel values are pv_observed / \npv_max (so ration of observed pixel value when taking a picture of the \nsphere / pixel value measured at centre):\n\n\npcomb -e 'ro=ri(1)/ri(2); go=gi(1)/gi(2); bo=bi(1)/bi(2)' -o \nobserved.hdr -o reference.hdr > correction.hdr\n\n\n3) you may delete the reference frame now...\n\n\nrm reference.hdr\n\n\n4) apply the correction by dividing each uncorrected image you have by \nthe correction frame:\n\n\npcomb -e 'ro=ri(1)/ri(2); go=gi(1)/gi(2); bo=bi(1)/bi(2)' -o \nuncorrected.hdr -o correction.hdr > corrected.hdr\n\n\nIt is a bit paranoid but I got used to add the -o to all calls of pcomb \n- just in case I had exposure corrections applied to my images. It has \nbeen a while that I did such pixel corrections, so I hope I did not do \nanything wrong here, but basically this approach works well if you can \nrely on the readings for the image centre.\n\n\nCheers, Lars.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/hdri/2014-April/000522.html).</sup>", "attachments": [], "created_by_name": "Lars O. Grobe", "created_at": "April 11, 2014 at 08:01AM", "created_by": "Lars_O._Grobe", "parent_id": "hdri_000521", "id": "hdri_000522"}