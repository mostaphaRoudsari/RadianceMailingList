{"body": "Thanks Georg, and thanks Greg for hitting that one issue Schorsch raised\nthere. Other replies below...\n\n\nOn 3/9/16, 7:27 PM, \"Georg Mischler\" <schorsch at schorsch.com> wrote:\n\n\n>\n>It might be nice to be able to cross-compile at least for the\n>companion bit-architecture of the same platform, which should be\n>possible to do.\n>On the other hand, I'm not sure if its really worth the effort.\n>How many people are still running Radiance on 32 bit systems?\n>But at least the possibility should be kept open, so we won't\n>need another redesign when the first 128 bit systems come out in\n>a few years...\n\n\n\n\nWe gave up on providing 32-bit Mac and Linux packages here at NREL, but do\nstill make 32-bit Windows packages, only because we include Radiance with\nOpenStudio and we are still supporting 32-bit Windows for OpenStudio users\n(I forget why, but we just do). I was making universal Mac binaries, but\nit was a PITA to maintain the tifflib and the packages are 2x as large, so\nI dropped it.\n\n\n\n\n>On Windows, everything without third-party dependencies builds\n>fine with the current VC 2015 \"Community\" compiler.\n>I haven't yet gotten around to fetching the Windows dev packages\n>of Tifflib and QT, so those parts need some more work.\n>X11 is probably not worth the hassle (though there might be ways).\n>\n>The tifflib included with the NREL binaries didn't work, which\n>means they used a different compiler. In fact, they must be using\n>gcc on Windows, because I found (and fixed) some non-standard\n>allocation magic in src/cv/bsdftrans.cpp that only gcc accepts.\n\n\n\n\n\n\nI am \"they\". =) Not sure what didn't work for you, Georg. I use a 32-bit\nwindows tifflib from the interwebs\n(http://gnuwin32.sourceforge.net/packages/tiff.htm), and rolled my own\n64-bit when we started making 64-bit Windows packages. I do believe I used\ngcc, but I can't remember and can't find my notes. Please let me know if\nthere's a better recommended way.\n\n\n\n\n\n\n>I haven't looked at qtrvu very closely. But even on a cursory\n>glance it looks straightforward to build. This should not be a\n>problem for SCons and MSCC, once all the dependencies are in place.\n>Ah... can we standardize on a file name extension for C++ files in\n>Radiance? Right now we have both *.cxx and *.cpp.\n\n\n\n\nMaybe when you have time, you can look at qtrvu and help make it better.\nThe GUI was modeled after your Windows rvu, included with Rayfront. The\nfolks at Kitware wrote it, but only implemented the bits I felt were\nabsolutely necessary (limited budget). I haven't had access to Rayfront's\n'rvu' in a while but I do recall there were some things we left out. As\nfar as the multiple filename extensions, I had no idea. =) I ASSumed .cxx\nwas for headers or some shit. Pretty sure you're the first person to look\nat that code besides me since it was written! If it's a major deal, I\nguess we can change it, but it doesn't seem to be hurting anyone except\nfor the anal retentive types here. =)\n\n\nSo good to see your name in my inbox again, Schorsch!\n\n\n- Rob\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2016-March/001489.html).</sup>", "attachments": [], "created_by_name": "Rob Guglielmetti", "created_at": "March 10, 2016 at 09:05AM", "created_by": "Rob_Guglielmetti", "parent_id": "radiance-dev_001487", "id": "radiance-dev_001489"}