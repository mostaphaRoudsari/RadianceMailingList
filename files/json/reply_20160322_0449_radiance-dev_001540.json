{"body": "Am 2016-03-22 01:34, schrieb Gregory J. Ward:\n> Getting old?  That, I am!\n\n\nHehe, so am I!\n\n\n\n\n> Seriously, though, what's up with all the double-subscripts on string\n> arrays?  Seems you always need string[0][0] to access a word, when I\n> would expect just one subscript unless you want a character.\n\n\nWhere did you see a double-subscript?\n\n\nIt's essentially the equivalent of fixargv0() (two dozen lines of C).\nBut since it consists of just two nested library calls, there's no\npoint in turning it into an extra function.\n\n\n\n\n> And I\n> have absolutely no clue how the quoted line extracts the final file\n> component from a path, assuming that's its purpose.  Python seems to\n> introduce a whole new set of conventions, which if my mind weren't\n> already polluted by the conventions of half a dozen other languages,\n> probably wouldn't give me so much trouble.\n\n\nIf every language used the same concepts and conventions, there'd\nbe little point in having more than one of them, would there?\n\n\nThose are rather straightforward functions from the library module\n\"os.path\", accessing an attribute (in this case a list of strings)\nof the module \"sys\".\nOnce you have familiarized youself with the basics of how to invoke\nlibrary functions in Python, It's easy to guess what they do just by\nlooking at their names.\n\n\n\n\n> The only real benefit I see to your recommendation, other than having\n> just one language to deal with, is that we don't have to mess with\n> different quoting conventions between Windows and Unix shell\n> interpreters.\n\n\nThe problem here is that Radiance uses the shell (via posix system()\nand popen()) to invoke subprocesses. In a multi-platform environment,\nthose functions should be avoided to begin with, but that would be a\nlot of work to change now in Radiance.\n\n\nI have written win_popen.c and win_process.c many years ago to\ncircumvent (not solve!) the problem in Radiance itself.\n\n\nIn Python, using os.system() and os.popen() would result in the same\nproblems. That's why I'm using the \"subprocess\" library module, which\ninvokes processes directly and encapsulates the platform differences.\n\n\nOne of the consequences is that pipes aren't chained automatically,\nso we need some extra code to handle those (same as win_popen() does).\nBut that's a price we should be willing to pay in any language we use.\nThis functionality is tucked away in the pyradlib/pyrad_proc.py module,\nand - once finalized - should never need to be touched again.\n\n\n\n\n> That does simplify things a bit, but we still need to\n> change options around because Windows doesn't handle binary data\n> transfer reliably.  So, piped commands still are not 100% portable\n> even in Python.\n\n\nWindows can handle binary data transfers just fine.\nOr are you talking about \"\\r\\n\"?\nThat is a rather minor problem in Python, since we need to\ndistinguish between binary and text data streams anyway.\nYou don't want your binary data converted to Unicode, do you?\n\n\n\n\n> We'd still have to switch between data format (-f*)\n> command options on the two platforms, or suffer significant\n> performance penalties on Unix.\n\n\nSorry, not sure what you're talking about there.\n\n\n\n\nCheers\n-schorsch\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2016-March/001540.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "March 22, 2016 at 04:49AM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_001529", "id": "radiance-dev_001540"}