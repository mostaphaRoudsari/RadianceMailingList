{"body": ">> Am 2016-03-22 01:34, schrieb Gregory J. Ward:\n> \n> Well, it's still not obvious to me, even after Randoph's explanation\n> (which used different calls).  In any case, I was only trying to make\n> the point that Python isn't transparent, either.\n\n\nAn unknown language is never immediately transparent without some\nminimal learning effort. But that's not necessarily because it's\ndifficult - just because it's new.\n\n\n\n\n> Thinking on it some more, the main issue I have with Python is\n> probably the object-oriented structure, which moves it even further\n> from a command-line interpreter.  For me, the main benefit of using a\n> scripting language is that it is close to the command-line, which is\n> where Radiance (mostly) lives.  If you introduce too much structure,\n> you're getting back to something resembling a C program, and you may\n> as well just write it that way, instead.\n\n\nThere are (at least) two different classes of \"scripts\" in Radiance.\nSome are indeed little more than a listing of a few commands, and\nin a few cases it looks like they were one-off solutions to a very\nspecific problem. Most people will never use those, or they might\ncreate their own versions. It may or may not be worth to convert\nthem, and in some cases the Python version may actually become a\nliteral translation without any added structure.\n\n\nThe other class are programs like falsecolor or genBSDF, which are\nfar beyond that \"script\" stage. Those are \"real\" programs in the sense\nthat they solve tasks that most people will be confronted with\nregularly. This makes them unlikely to change very significantly over\ntime, other than to add features. In those cases, the effort is\nclearly justified to design an object oriented structure and add all\nthe bells and whistles most users expect from a complete tool.\n\n\nYou seem to think that object orientation will necessarily make a \nprogram\ninflexible. Well, for Java and C++, this is indeed usually the case.\nBut it doesn't have to be like that. A well crafted object oriented\ndesign will make adding features easier, not harder. And Python is one\nof the rare languages, where changing the code is actually fun, and\nnot something to be scared of.\n\n\nThis ease of maintenance is also one of the reasons why those things\nshould rather *not* be converted to C. There's simply no need to do \nthat,\nas long as we can delegate the number crunching to other tools.\n\n\n\n\n> Perl looks a lot like traditional interpreter shells with the added\n> benefit of more useful built-in commands and expression evaluation.\n> You can open a Perl script and read through it like you're reading a\n> sequence of commands.  User-defined functions have a bare-bones call\n> structure and don't have to be defined before they're used, so they\n> don't interrupt the flow as you read through the code.\n\n\nIf you look at Python, you'll find that all that is (or can be) the\ncase there as well, just without the uglyness.\n\n\n\n\n> Scripting languages need to be easy to write and easy to read to be\n> useful in my opinion.\n\n\nBut you're still full of praise for Perl...?\n\n\n\n\n> Also, relying heavily on add-on libraries comes at a cost, which is\n> expanded vocabulary one must learn.\n\n\nLibraries coming included with the language are not \"add-on\".\nWe won't get any bonus points for reinventing the wheel, or for\ndragging stuff around instead of wheeling it.\n\n\n\n\n> We chain up to 4 commands in genBSDF, which I guess will translate to\n> call_four() in your library?\n\n\nWe're going to have a call_many() then, which will accept and chain an\narbitrary number of commands. Win_popen() already does that.\n\n\n\n\n>>> We'd still have to switch between data format (-f*)\n>>> command options on the two platforms, or suffer significant\n>>> performance penalties on Unix.\n>> \n>> Sorry, not sure what you're talking about there.\n> \n> Well, we may need to devise some tests to be sure this is still a\n> problem, but in the past, Windows would deliver binary files in\n> 128-byte chunks, meaning that the last chunk might have garbage at the\n> end of it that was not actually produced by the program that sent it.\n\n\nThat sounds like a severely broken implementation. I can't possibly\nimagine this still to be the case. If there's a test case, I'll check\nit out.\n\n\n\n\nCheers\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2016-March/001545.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "March 22, 2016 at 12:30PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_001529", "id": "radiance-dev_001545"}