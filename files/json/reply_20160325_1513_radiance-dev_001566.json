{"body": "Sorry for the weird sequence in here...\n\n\nDeadlock issue resolved.\nNow the testing with call_two() also results in the output\nof rcalc being cut short by one or several values.\n\n\nThe problem starts at n=1330, where one value is lost.\nStarting with n=4833, the last two values get missing.\nStarting with n=9876, the last three values are dropped.\nAt least approximately. Sometimes it's a value less or more.\nAny logic to those numbers? I have no idea.\n\n\nBy the way, the effect is independent of the output format.\nThis also happens with ASCII output.\nSomehow I get the impression, this might be a different problem\nthan we were originally looking for, and I'm not sure yet if\ncnt or rcalc are to blame.\n\n\n-schorsch\n\n\n\n\nAm 2016-03-25 20:19, schrieb Georg Mischler:\n> Am 2016-03-25 15:35, schrieb Georg Mischler:\n>> Moving this to a seperate thread.\n>> \n>> \n>> The sequence below consistently gives me 703 on Vista, with the only\n>> difference that the DOS box asks for double quotes.\n>> \n>> But...\n>> \n>> turning up n to values beyond 2000, the MSC binary of rcalc begins to\n>> write(!) some bytes less(!) to stdout. Which obviously falsifies the\n>> result of the chain.\n>> \n>> Interesingly, the NREL binary doesn't do that.\n>> Rob mentioned using gcc, so there seems to be a disagreement between\n>> the two compilers as to the semantics of writing to stdout on program\n>> termination.\n>> \n>> Going to have some discussion with the debugger on this one.\n>> I'd only be too happy if a simple flush() would solve the problem...\n>> \n>> Ah, and first I should probably create a few test cases to cover this\n>> kind of bug.\n>> \n>> \n> round two:\n> \n> I've detected the problem by redirecting the output of rcalc\n> into a file, which ends up too small.\n> It always happens when running in bash.\n> It currently gives the correct output about one time out of\n> four running in cmd.exe.\n> When reading from a file instead of through a pipe from cnt,\n> the output is always correct.\n> Adding a fflush() doesn't change anyhting, as mentioned the\n> exit() will do that anyway.\n> There's no problem when feeding the same data through\n> call_one() from pyradlib.\n> Passing in the output of cnt through call_two() currently runs\n> into a deadlock that I can't quite explain.\n> \n> It's getting more and more mysterious...\n> \n> -schorsch\n> \n> \n>> Cheers\n>> -schorsch\n>> \n>> \n>>>> I've searched for similar complaints online. In the few instances \n>>>> I've\n>>>> found, it usually was because a terminating null byte wasn't written\n>>>> to the receiving buffer for some reason. The purportedly received\n>>>> garbage data was then simply the previous random contents of that\n>>>> buffer. That may or may not be the cause here as well.\n>>>> \n>>>> If there really was an inherent problem with using pipes on Windows,\n>>>> then I'm sure I would have found a lot more information about it.\n>>> \n>>> Well, in our case, it's not about null bytes not being sent -- it's\n>>> about knowing exactly when we've reached end-of-data, which we expect\n>>> the system to tell us in some cases.  Radiance's binary formats for\n>>> octrees, ambient files, pictures, etc., we know when we've reached \n>>> EOD\n>>> regardless because the file header tells us how much to expect.\n>>> However, when we're sending binary streams of floats to rcalc, which\n>>> is simply operating on them and counting on the OS to stop sending\n>>> data when it's out of data, we run into trouble if the OS doesn't \n>>> tell\n>>> us exactly when the party is over.\n>>> \n>>> I suppose a simple test would be something like:\n>>> \n>>> \tcnt 37 | rcalc -of -e '$1=recno' | total -if\n>>> \n>>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,\n>>> 37*(37+1)/2==703).  We could try running the above on a Windows box\n>>> with a FAT or ExFAT filesystem to determine if this is a problem or\n>>> not.  We should probably try it with some large numbers as well, \n>>> being\n>>> aware that we end on a 128-byte boundary when n is a multiple of 32.\n>>> \n>>> We can also try it while writing with an intermediate file between\n>>> rcalc and total, to see if that makes any difference.\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2016-March/001566.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "March 25, 2016 at 03:13PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_001558", "id": "radiance-dev_001566"}