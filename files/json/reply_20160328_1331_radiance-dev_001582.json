{"body": "I've checked a refactored version of the Python test framework\ninto CVS today. As with the other proposed scripts, it now works\nwith both Python 2.7 and Python 3.x, and the only dependencies\nare Python and Radiance. SCons simply invokes it, as can any\nother tool, or the user directly.\n\n\nThe file ray/test/run_tests.py is now both a script and a module,\nwith identical functionality. The caller can pass in the Radiance\nbinary and library paths (if they're not already covered by PATH\nand RAYPATH). If given, they are added to the local environment,\nwhich then gets passed along to the test cases.\n\n\nIt will run all the test cases it discovers in the subdirectories\nof ray/test/testcases/. Alternatively, one or several sections can\nbe tested seperately. More details are in README.txt and the\nmodule docstrings.\n\n\nThe support modules have moved to lib/pyradlib/, with lib/ being\nthe standard Radiance library (similar to lib/tcl/ for trad).\nRun_tests.py will find that directoy and add its parent to the\nPython search path. A test case can import them as:\n\n\n   from pyradlib import lcompare\n   from pyradlib.pyrad_proc import Error, PIPE, ProcMixin\n\n\nAs can be seen from the latter, I've switched the existing test\ncases to useing the same process management module as the scripts,\ninstead of os.system().\n\n\nThis same library can also be used by any other Python scripts,\nalthough each of those will be on its own in actually finding its\nlocation.\n\n\nTo avoid having to search all the relevant directories in each\ntest case again, the test runner temporarily injects an ad-hoc\nmodule into sys.modules. Test cases can \"import testsupport\",\nwhich will give them direct access to all the paths detected by\nthe runner. The information provided by that module can of course\nbe extended with whatever seems useful.\n\n\n\n\nI think this is the easiest way to go forward with our testing\nefforts.\n\n\nI had a look at the CTest stuff, and it seems like it would only\nrun on Robs machine, because it contains hardcoded paths to some\nlocal directories. That could be fixed, of course, but the\ndependency to a much less common third-party tool would still\nremain.\n\n\nSo what so you (or your build tool) need to do to use this?\n\n\n1. Make sure the contents of ray/src/common/pyradlib/ are copied\n    to lib/pyradlib/\n    (either in the build tree or in the final installation).\n\n\n2. Invoke ray/test/run_tests.py with suitable parameters.\n\n\n3. Sit back and smile :)\n\n\n\n\nOf course, there's still a lot to improve, or more flexibility\nto add. I'm open to suggestions!\n\n\n\n\nCheers\n-schorsch\n\n\n\n\nAm 2016-03-17 15:10, schrieb Georg Mischler:\n> The criteria I would apply are:\n> \n> - Which framework is easiest to install for end users?\n>   Or maybe better: Which is most likely to be already installed on the\n>   system of the average Radiance user, even when not part of the\n>   currently running build system?\n>   * On unix\n>   * on Mac (as far as different from other unixes)\n>   * on Windows\n> \n> - Which is easiest to maintain and to add test cases?\n>   More specificly: Which has the shortest learning curve for the\n>   average Radiance user before they can contribute tests?\n> \n> - And last but not least, which has all the capabilities we need?\n>   * Run a program with various arguments and input, and compare its\n>     output against a prepared set of expected data.\n>   * Eventually: Load a shared library and run similar tests on\n>     individual functions (not easily possible with the current state\n>     of librtrad, those pesky global variables once again).\n> \n> -schorsch\n> \n> \n> Am 2016-03-16 22:28, schrieb Guglielmetti, Robert:\n>> On 3/16/16, 3:02 PM, \"Georg Mischler\" <schorsch at schorsch.com> wrote:\n>>> \n>>> That sounds like a lot of duplicate work...\n>>> \n>>> Wouldn't it make more sense to maintain just one test suite, and\n>>> have either build system just invoke that?\n>> \n>> \n>> Definitely a lot of duplicate work, you're right. I was thinking maybe \n>> a\n>> little too specifically about a particular testing framework (CTest in \n>> my\n>> case).\n>> \n>> \n>> _______________________________________________\n>> Radiance-dev mailing list\n>> Radiance-dev at radiance-online.org\n>> http://www.radiance-online.org/mailman/listinfo/radiance-dev\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2016-March/001582.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "March 28, 2016 at 01:31PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_001520", "id": "radiance-dev_001582"}