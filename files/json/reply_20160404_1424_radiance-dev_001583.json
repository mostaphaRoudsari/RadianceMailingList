{"body": "Hi Wouter,\n\n\nsuch \"interactive\" scripts present a special challenge.\n\n\nI made an experiment with this one, and you'll find the resulting\nglaze.py on GitHub. The user interface works a bit different than\nin the original, but I'm sure you'll figure it out.\nAutomatic testing is difficult here, so I didn't systematically test\nall the possible permutations. But as far as I could tell so far it\nshould produce the same results as the original.\n\n\nCheers!\n-schorsch\n\n\n\n\nAm 2016-03-21 22:41, schrieb ascendilex | Wouter Beck:\n> Dear Georg,\n> \n> I would vote for the glaze csh script.\n> \n> Best,\n> Wouter\n> \n> On 03/21/2016 05:02 PM, Georg Mischler wrote:\n> \n>> Hi again!\n>> \n>> I have converted some of the original Radiance shell scripts into\n>> Python.\n>> https://github.com/gmischler/PyRad [1]\n>> \n>> The examples so far are exact drop-in replacements of the original\n>> csh\n>> or Perl versions, but with some extra functionality and benefits.\n>> \n>> * usage instructions (-H)\n>> * progress report (-V)\n>> * dry-run mode (-N)\n>> * detailed error diagnostics\n>> * compatible with Python 2.7 and Python 3.x\n>> * self contained (all functionality can be combined in one file)\n>> * truly cross-platform (no dependencies other than Python and\n>> Radiance)\n>> * direct process management (no intermediate shell calls)\n>> * immune to whitespace in file names\n>> * tamper-proof use of temporary files\n>> * instrumented for building a single-file *.exe with pyinstaller\n>> \n>> The current selection is still small, the examples were chosen for\n>> varying reasons:\n>> \n>> * falsecolor.py\n>> This one has been sitting on my disk (in much less refined form)\n>> for\n>> many years. Now I've updated it to using color palettes and to\n>> satisfy\n>> all the points above.\n>> \n>> * phisto.py\n>> * rlux.py\n>> * pveil.py\n>> Those three became test candidates because they are simple and\n>> have\n>> a straightforward command line.\n>> \n>> I'm looking for ideas (and contributions) on where to continue next.\n>> \n>> \n>> Good candidates are scripts that are commonly used.\n>> It is also very helpful if a script includes documentation about\n>> what\n>> it's actually supposed to do. Ideally with a set of test data to\n>> verify that it really does that.\n>> Actually, a solid set of test cases for the current collection would\n>> \n>> be very helpful too.\n>> \n>> Some of the csh/Perl scripts present a challenge, because they have\n>> rather unconventional command lines. In those cases, we might want\n>> to\n>> consider changing the interface to something more regular, provided\n>> this is possible.\n>> \n>> Not all of the existing scripts are really worth the effort.\n>> The Python versions with the extra functionality are definitively\n>> not\n>> as simple as the originals. Flexibility and safety has its price.\n>> On the other hand, they will definitively be *much* easier to\n>> maintain.\n>> \n>> Many of the current scripts (csh *and* Perl) blindly assume the\n>> existence of a unix type shell, a number of other posix tools\n>> (grep/awk/sed/etc.), and they often fail with spaces in file and\n>> directory names. Fixing this would introduce additional overhead\n>> in any language.\n>> \n>> Why Python?\n>> \n>> For developers, it is simply one of the most productive tools\n>> around.\n>> Python has grown into one of the most popular languages just by its\n>> practical merits, without any corporate backing, and without a very\n>> strong web appeal.\n>> \n>> Most Radiance users will already have it installed, no matter the\n>> platform.\n>> \n>> On unix, scripts can be invoked by \"#!\" (like any other).\n>> \n>> Any script can be \"compiled\" into a standalone executable file.\n>> This is important on Windows, because invoking scripts (Python,\n>> *.bat, or otherwise) from within programs is a real hassle there.\n>> In fact, it ended up being the simplest way to get winimage to\n>> perform falsecolor analysis.\n>> (This could also be done with Perl, but...)\n>> \n>> I expect Python to play an increasing role in Radiance development\n>> in\n>> the future, with or without my own involvement. So we might just as\n>> \n>> well embrace it.\n>> \n>> I would like to suggest adding Python versions of the most commonly\n>> used scripts to the distribution. There are several possible\n>> configurations how this could be done, so we'd have to discuss a\n>> number of technical details first. And yes, verification before\n>> inclusion would be an important step.\n>> \n>> Opinions?\n>> \n>> -schorsch\n> \n> \n> \n> Links:\n> ------\n> [1] https://github.com/gmischler/PyRad\n> \n> _______________________________________________\n> Radiance-dev mailing list\n> Radiance-dev at radiance-online.org\n> http://www.radiance-online.org/mailman/listinfo/radiance-dev\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2016-April/001583.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "April 04, 2016 at 02:24PM", "created_by": "Georg_Mischler", "parent_id": "radiance-dev_001529", "id": "radiance-dev_001583"}