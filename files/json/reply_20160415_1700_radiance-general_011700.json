{"body": "Somewhat off-topic, but...\n\n\nOut of curiosity, I played around with those examples a bit.\nI had to slightly modify all of them, first to get Perl and Ruby to run\nat all, and then to make sure all of them produce tabs instead of \nspaces.\nBtw: The Perl version adds an extra tab at the end of each line.\n\n\n\n\nperl -anF'\\t|\\n' -e'$n=@F-1 if \\!$n;for(0..$n){push@{$$m[$_]},$F[$_]} \nEND{print map{join\"\\t\",@$_,\"\\n\"}@$m}'\n\n\npython -c \"import sys; print('\\n'.join('\\t'.join(c) for c in \nzip(*(l.split() for l in sys.stdin.readlines() if l.strip()))))\"\n\n\nruby -e 'puts readlines.map(&:split).transpose.map(){|x|x*\"\\t\"}'\n\n\n\n\nThe result shows (as expected) that this kind of comparison is utterly\nmeaningless. There are simply too many factors out of your control\nthat can influence the result. Between Perl and Python, the\nexecutables that happen to be installed on my box pretty much get the\nopposite result than you reported. Maybe my Python is in better shape\nthan yours, because it gets more exercise... ;)\n\n\nI'm actually a bit surprised by the bad performance of Perl. One of\nthe reasons may be the suboptimal algorithm, which explicitly loops\nthrough the data in the interpreter. The other two use a functional\napproach, where the heavy lifting is handled in C. Ruby has a slower\nstartup time, but its operating performance is much closer to Python.\nI also didn't expect that much of a speed-up with Python 3 over 2.\n\n\nThe Python version is easy to understand, once you know that the\nbuiltin function zip() is equivalent to Rubys transpose(). The rest\nis IO and string manipulation. You also may not be familiar with\ngenerator expressions. Very powerful stuff!\n\n\n\n\n150 Kb  (160 x 160 matrix)\n\n\n0.2  perl 5\n0.1  python 2.7\n0.02 python 3.4\n0.4  ruby\n\n\n\n\n6 Mb  (1000 x 1000 matrix)\n\n\n1.02  perl 5\n0.36  python 2.7\n0.22  python 3.4\n0.48  ruby 2.1\n\n\n\n\n24 Mb  (2000 x 2000 matrix)\n\n\n4.11  perl 5\n1.74  python 2.7\n1.13  python 3.4\n2.41  ruby 2.1\n\n\n\n\nCheers\n-schorsch\n\n\n\n\nAm 2016-04-13 19:01, schrieb Christopher Rush:\n> For a trivial example of transposing a matrix tab delimited data\n> file... which of these is most easily understood, reproducible, and\n> fastest. Also note, I couldn't find a working Ruby example...\n> \n> \n> perl -anF'\\t|\\n' -e'$n=@F-1if!$n;for(0..$n){push@{$$m[$_]},$F[$_]}\n> END{print map{join\"\\t\",@$_,\"\\n\"}@$m}'\n> ^^ this takes a quarter of a second on 148K file, and doesn't look\n> particularly clean but I could probably figure it out by researching\n> the documentation\n> \n> python -c \"import sys; print('\\n'.join(' '.join(c) for c in\n> zip(*(l.split() for l in sys.stdin.readlines() if l.strip()))))\"\n> ^^ this takes half a second on 148K file but looks a bit baffling to me\n> \n> awk '{for (f=1;f<=NF;f++) col[f] = col[f]\":\"$f} END {for\n> (f=1;f<=NF;f++) print col[f]}' | tr ':' ' '\n> ^^ this takes 2 seconds on 148K file which isn't very good, but\n> probably the easiest to interpret by eye, in my opinion\n> \n> ruby -e 'puts readlines.map(&:split).transpose.map{|x|x*\" \"}'\n> ^^ I couldn't make this or any other Ruby examples I found online\n> work, which might mean I have a basic misunderstand of how to type\n> this in a single line workflow on the terminal. And all the examples I\n> could find look like a black box to me because apparently there are\n> functions built in to do this task.\n> \n> echo '' >tmp1;  cat m.txt |while read l ; do paste tmp1 <(echo $l | tr\n> -s ' ' \\\\n)>tmp2; cp tmp2 tmp1; done\n> ^^ this series of commands is basically disqualified because it takes\n> far too long\n> \n> \n> Taken from these threads:\n> http://stackoverflow.com/questions/1729824/transpose-a-file-in-bash\n> http://stackoverflow.com/questions/3249508/transpose-in-perl\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2016-April/011700.html).</sup>", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "April 15, 2016 at 05:00PM", "created_by": "Georg_Mischler", "parent_id": "radiance-general_011683", "id": "radiance-general_011700"}