{"body": "Hi Greg,\n\n\n\n\nOn 01/03/17 18:34, Greg Ward wrote:\n> Hi Axel,\n>\n> I thought you said that the actual obj2mesh call was taking forever,\nnot the oconv operation afterwards. If it's oconv, this is due to having\nmany overlapping volumes, which oconv attempts to resolve. If you didn't\nhave so many RTM's (instanced octrees are also an issue), this would not\nbe a problem.\n>\n\n\nSorry about this misunderstanding.  obj2mesh is always very fast, but \nmight fail.  What can take so long is the oconv compilation\n\n\n> The rules of thumb on RTMs and instanced octrees is that if you\n> don't\nhave multiple occurrences of something, don't use either. And if you do,\nthen still avoid them unless you can packaged together at least 10,000\nsurfaces or so per octree/RTM. Finally, it's best if your octree or RTM\nfills are more-or-less cubic volume, or is well-separated from other\ninstanced volumes. Overlapping volumes cause issues for oconv.\n>\n\n\nThis pretty much explains the issues we've been having occasionally. \nThank you so much for clarifying.  What I thought your mesh \npresentations at the workshops over the last few years were telling me \nis that RTMs are always better due to the small octree size and fast \noconv times.  Should have paid more attention to the small print, I guess.\n\n\n> If I understood correctly the first time, and it is obj2mesh that is\ntaking a long time, let me know which files to check out.\n\n\nNo, it's oconv.  Problem solved, I think.  Thank you so much for taking \nthe time to look into this.\n\n\nCheers\n\n\nAxel\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2017-March/012050.html).</sup>", "attachments": [], "created_by_name": "Axel Jacobs", "created_at": "March 01, 2017 at 11:30AM", "created_by": "Axel_Jacobs", "parent_id": "radiance-general_012038", "id": "radiance-general_012050"}