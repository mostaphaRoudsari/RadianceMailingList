{"body": "Dear all,\n\n\nI thought I give a quick update on this.\n\n\nTraditionally, we have been exporting our geometry to individual RTMs,\nwhich is typically one per layer and material.  The project where I\nfirst noticed this slow spawning behaviour with many artificial light\nsources (around 7,000 in this case) had 40 individual RTMs, but on\nsome larger projects this can be several hundreds.\n\n\nFor each RTM, there is one rad file with only the mesh primitive in\nit.  All those rad files are finally called from a master xform file,\nas we call it.\n\n\nRunning this project (only -ab 0) took around 40 minutes with this\napproach.  During almost all of this time, rtrace was only running as\na single thread, despite being called with -n 80.\n\n\nGreg suggested that this approach is not ideal, and that it could be sped up by:\na) instead of RTM geometry (obj2mesh), use polygons (obj2rad)\nb) expance all calls to xform in the master file (xform -e master.rad\n> master2.rad)\nc) compile a frozen octree (oconv -f master2.rad > test.oct)\n\n\nI ran some test to find out which of the above has the biggest impact\non render times.  Expectedly(?), it is the use of polygon geometry\ninstead of RTMs that makes all the difference here.  Rendering time\nwent down from 40 mins to somewhere between 10 and 20 seconds.  It is\nalso a good idea to expand all xform calls, but once this is done,\nusing frozen octrees does not make the calculation significantly\nfaster.\n\n\nHave a jolly good weekend, everyone\n\n\nAxel\n\n\n\n\n\n\nOn 22 February 2017 at 09:55, Axel Jacobs <jacobs.axel at gmail.com> wrote:\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2017-March/012052.html).</sup>", "attachments": [], "created_by_name": "Axel Jacobs", "created_at": "March 03, 2017 at 08:30AM", "created_by": "Axel_Jacobs", "parent_id": "radiance-general_012038", "id": "radiance-general_012052"}