{"body": "Hi Germ\u00e1n,\n\n\nYou could be suffering from memory allocation costs, not so much the operations themselves.  The rmtxop program uses doubles and 3 components per matrix entry, so that's (3x2048x2305 x 8 bytes) or 108 MBytes for each of your matrices.  When you multiply one such matrix by a sky vector, you only have the additional memory needed by the vector (54 KBytes).  When you add matrices, rmtxop keeps two of them in memory at a time, or 216 MBytes of memory.  That's not a lot for most PCs these days, but the allocation and freeing of that much space may take some time if malloc is not efficient.\n\n\nI should have asked if your matrices are stored as binary data.  If they are ASCII (text), then for sure the strtod()/atof() calls will dominate calculation time completely. Switching to a binary double matrix representation would be faster and a better measure of the time these operations actually take.\n\n\nYou would probably need to profile your code to get a clear idea of where it's spending its time.\n\n\nCheers,\n-Greg\n\n\nP.S.  The dctimestep uses floats instead of doubles, so takes half the memory.  It's also optimized for matrix multiplications where there are zero rows or columns, so it's substantially faster for annual sky matrix calculations.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2017-May/001693.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "May 10, 2017 at 09:43AM", "created_by": "Greg_Ward", "parent_id": "radiance-dev_001689", "id": "radiance-dev_001693"}