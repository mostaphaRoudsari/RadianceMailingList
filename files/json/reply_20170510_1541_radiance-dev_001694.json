{"body": "> You could be suffering from memory allocation costs, not so much the\noperations themselves.  The rmtxop\n\n\n> program uses doubles and 3 components per matrix entry, so that's\n(3x2048x2305 x 8 bytes) or 108 Mbytes\n\n\n> for each of your matrices.  When you multiply one such matrix by a sky\nvector, you only have the additional\n\n\n> memory needed by the vector (54 KBytes).  When you add matrices, rmtxop\nkeeps two of them in memory\n\n\n> at a time, or 216 MBytes of memory.  That's not a lot for most PCs these\ndays, but the allocation and freeing\n\n\n> of that much space may take some time if malloc is not efficient.\n\n\n> \n\n\nThe problem here is not the amount of memory, but of the CPU's access to it.\nWhen the CPU is accessing the arrays, the data is stored in a hierarchy of\ncaches. For a modern Intel Core i7, for example,  there are typically four\nL2 caches of 256 KB each and a slower L3 cache of 8 MB that is shared by the\nCPU cores.\n\n\n\n\n\n\nIf the arrays can be stored in the L2 cache, the processor can usually run\nat full speed. If not, then the CPU will typically have to wait while the\ndata is retrieved from the slower L3 cache.\n\n\n\n\n\n\nThe caches are on-chip. If the arrays exceed the L3 cache capacity, then the\ndata will need to be retrieved from the much slower main memory and\ntransferred over the memory bus. With 216 MB of array data to contend with,\nthis is most likely the culprit.\n\n\n\n\n\n\nPerformance optimization typically involves arranging the array data in\nmemory such that it can be loaded in cache lines, organizing the array\nstride, splitting the arrays into subarrays for multithreaded processing,\nand so on. However, these are mostly processor-family specific. (For Intel\nCPUs, SSE and AVX instructions are also available to improve parallelism.\nOptimizing compilers can help here, but hand coding may be needed for\noptimal performance on specific processors.)\n\n\n\n\n\n\nIf the arrays are stored in ASCII rather than binary, you will typically see\na performance hit of several hundred times as the CPU spends most of its\ntime parsing the strings into floating-point data.\n\n\n\n\n\n\nIan Ashdown, P. Eng. (Ret.), FIES\n\n\nSenior Scientist\n\n\nSunTracker Technologies Litd.\n\n\nwww.suntrackertech.com <http://www.suntrackertech.com>\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2017-May/001694.html).</sup>", "attachments": [], "created_by_name": "Ian Ashdown", "created_at": "May 10, 2017 at 03:41PM", "created_by": "Ian_Ashdown", "parent_id": "radiance-dev_001689", "id": "radiance-dev_001694"}