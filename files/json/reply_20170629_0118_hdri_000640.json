{"body": "Hi Jan,\n\n\nI spent some more time on this on my flight, and realized that the problem is with pcomb, not any of your calculations or assumptions.\n\n\nBasically, pcomb operates by keeping a certain cache of scanline buffers above and below the current one, and is therefore limited as to how far it can reach up & down in y when using the offsets that fisheye_corr.cal relies on to distort the input image.  I actually increased this buffer reach from whatever it was to +/- 63 scanlines.  Unfortunately, this still isn't enough in your 15000x15000 image (or even the original 5000x5000 one).  Our tests were not performed on such large images.  I suppose I should increase src/px/pcomb.c's WINSIZ constant further, and just accept the memory cost.  Originally, I was only thinking of local resampling kernels and the like.\n\n\nWhat happens when you ask for a pixel that is too far up or down in y, it gives the closest scanline it has, which gives the wrong distortion in this case.  If your sun were moving right-left instead of top-bottom, you wouldn't suffer this limitation of pcomb.  I verified this by passing your image through protate prior to pcomb:\n\n\n\tprotate sk_$i.hdr | pcomb -f fisheye_corr.cal -o - | getinfo -a \"VIEW= -vta -vh 180 -vv 180\" >sk_$i\"corr.hdr\"\n\n\nWe then get good agreement using your comparison method, within a 2% or so, which is about what I would expect using an 8-bit mantissa allowing for cumulative error.\n\n\nCheers,\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/hdri/2017-June/000640.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "June 29, 2017 at 01:18AM", "created_by": "Greg_Ward", "parent_id": "hdri_000633", "id": "hdri_000640"}