{"body": "Hi Germ\u00e1n,\n\n\nI don't really understand your question, even with the code snippet.\n\n\nMultiple processes typically share indirect cached values via the ambient file (using a locking and update mechanism).  Therefore, it makes the most sense to use the same file name for all processes.  This has nothing to do, however, with the fact that \"ambfile\" is a global variable.  Multiprocessing in Radiance involves spawning Unix processes via fork(), at which point even global variables become local to each process.  There is no other mechanism for multiprocessing that is supported by the library, in part at least to the reliance on global variables.  All the memory is shared on a \"copy-on-write\" basis, meaning that an OS (like Unix) that can share memory across processes will do so to the extent possible.\n\n\nWhat is it that you really want to do?  Do you want to have different ambient files for different processes?  There is nothing to stop you from doing this -- you just have to reset the ambient file with a call to setambient() after forking a new process.  The disadvantage of course is that processes will do a lot of duplicate calculation, and you will mostly negate the benefit of running multiple processes.\n\n\nCheers,\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2017-December/001729.html).</sup>", "attachments": [], "created_by_name": "Greg Ward", "created_at": "December 12, 2017 at 07:52AM", "created_by": "Greg_Ward", "parent_id": "radiance-dev_001728", "id": "radiance-dev_001729"}