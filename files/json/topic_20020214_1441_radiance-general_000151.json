{"topic": "Bug in replmarks", "category": "radiance-general", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "February 14, 2002 at 02:41PM", "body": "Hi all,\n\n\none of my customers has just tripped over a bug that is present\nin all Radiance versions I have looked at so far, but only has\nany consequences on Windows. I haven't had the time to look at\n3.4 yet, but it's quite likely to around there too.\n\n\nThe function replace() in replmarks.c allocates a string buffer\non the stack, but doesn't worry about its contents any further\nat this point. The assumption seems to be that the function\nbuildxf() will do so, which it does most of the time. The problem\nis, that for octree instances that are not scaled, and are exactly\naligned with the parent coordinate system, this is not the case.\nIn this situation, strlen() is applied to the *unaltered* string,\nand the remaining transformation arguments are written *after*\nanything that is already present there.\n\n\nAs a result, the output data will almost always contain\narbitrary and usually binary characters. On unix, this doesn't\nseem to be a problem very often, as the parser appears to simply\nignore binary data in scene files. The Windows version correctly\nreports 'bad arguments for instance \"xxxx\"'.\n\n\nFortunately, the fix is simple. At the beginning of the replace()\nfunction in replmarks.c, include the following line:\n\n\n\tbuf[0] = '\\0'; /* make sure we don't include any garbage */\n\n\nThis garantees that the string in the buffer has a length of\nzero to begin with, and avoids all further confusion.\n\n\n\n\nHave fun!\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch.com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2002-February/000151.html).</sup>", "id": "radiance-general_000151", "created_by": "Georg_Mischler"}