{"topic": "Octree blocks", "category": "radiance-general", "attachments": [], "created_by_name": "Greg Ward", "created_at": "May 11, 2002 at 07:20AM", "body": "Kurt Altmann wrote:\n\n\n> I also spent some time on tests on the export of blocks from AutoCAD to\n> instances in Radiance.\n> At least it's working in a more or less rough manner (even with nested\n> blocks).\n> Beside the consistency problems Georg already mentioned, problems arose\n> concerning the paths\n> (to texture files or IES-data) and the shape of the octree hierarchy.\n> Especially thin long Objects, like railings, or flat Objects, like\n> leafs, produce the biggest problems.\n> I had to reorganize the blocks to get the expected savings in memory and\n> file sizes (which could be enormous, of course).\n> In other words - I must create the geometry in terms Radiance likes it\n> most - which isn't always the most efficient way to build 3D-Modells.\n> As I understood, the octree is based on cubes. Looking at a leaf\n> parallel to the xy-plane inside a cube, there is a lot of 'emptiness'\n> inside this cube. The cubes of other nearby leaves are interconnected\n> which often result in an error by oconv.\n> As a result I have to reorganize the blocks or increase the n-parameter\n> dramatically.\n> For these problems it could help a lot, if the 'cage' around objects\n> could be handled in a more relaxed way, i.e. in terms of a real bounding\n> box.\n> Are there any thoughts done already in that direction? Could it be a\n> feature for the future?\n> Or is it impossible due to the existing octree organization?\n> Any comments are welcome.\n>\n> Kurt\n> EMAIL   mail@kurt-altmann.de\n\n\nIt is terribly inefficient to create instances with only a few \nprimitives in them.\nAn octree should have a few hundred geometric primitives to make it\nworthwhile in terms of rendering time.  Given such a constraint, it is \nusually\npossible to partition geometry so it is roughly cubical in terms of \nvolume,\nthough I agree this is an inconvenience.  The only reason it was done \nthis\nway is to stick with a strict octree as opposed to a binary partition \ntree,\nwhich is more complicated to code and takes up more space in memory.\nOne could have an octree with a non-cubical bounding box, but the\nefficiency of tracing rays through long, thin subcubes would be awful.\n\n\nI don't recommend putting individual leaves into instances -- when I have\nused instances for trees, I put groups of leaves or needles together into\nan instance.  It may be better to put in the entire tree in many cases.\nRailings and walls should never go into instances.\n\n\nAs I suggested to Rob, the replmarks program offers the ability to \ngenerate\nxform calls to place raw geometry into the scene, and this is far \npreferable\nfor long or thin geometry such as you describe.  Instancing should be\nreserved for cases where duplicating geometry causes memory problems\nduring rendering, such as when you are modeling a forest of trees or\na great number of similarly complicated geometric objects.  For simple,\nreplicated geometry, you will get faster renderings and less hassle if\nyou just duplicate it throughout your scene, even if it means having\nhundreds of identical objects floating around.\n\n\nHere's a good rule of thumb for when instances might be appropriate:\n\n\nN_p > 200, and\nN_o * N_p > N_t / 5\n\n\nwhere:\n\tN_p = number of geometric primitives in instanced object\n\tN_o = number of instances\n\tN_t = total scene size (excluding other instances)\n\n\nOtherwise, it is better to use xform and just duplicate geometry.\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2002-May/000241.html).</sup>", "id": "radiance-general_000241", "created_by": "Greg_Ward"}