{"topic": "Radiance, POV-Ray and parallel global illumination?", "category": "radiance-general", "attachments": [], "created_by_name": "George Pantazopoulos", "created_at": "February 01, 2003 at 11:49AM", "body": "Hello all,\n\n\n\tI am a programmer working with the POV-Ray raytracer. As you may know, for \nglobal illumination, POV-Ray uses a version of the irradiance caching \nalgorithm from Mr. Ward's paper \"A Ray Tracing Solution for Diffuse \nInterreflection\" (Ward, Rubenstein, and Clear). Presumably Radiance uses a \nsimilar, but more advanced version of the same algorithm for its global \nillumination simulation.\n\n\n\tI'm trying to get parallel rendering working, but there is a problem. If \nthe image is divided into tiles, and rendered with POV-Ray and global \nillumination, each finished tile has a different basic brightness level. \nAnd when the final image is reassembled from the tiles, the effect is like \na checkerboard or patchwork. In short, it ruins the final image. Apparently \neach render slave *needs* to have the entire scene octree available to it, \nsomehow. There has been an effort to share the octree data with the other \nslaves as soon as it is generated, however this is only partially \nsuccessful and does not always suppress the artifacts I mentioned. (Here is \na link to the pvmegapov page http://www.wozzeck.net/images/pmp/ )\n\n\n\tI'm wondering if Radiance handles this problem in a fundamentally \ndifferent way, which I could learn from. Some basic parallel Radiance info \nI read did not mention this problem at all, so hopefully you guys already \nhave a solution. Any suggestions would be most appreciated!\n\n\n\n\nThanks,\nGeorge Pantazopoulos\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2003-February/000544.html).</sup>", "id": "radiance-general_000544", "created_by": "George_Pantazopoulos"}