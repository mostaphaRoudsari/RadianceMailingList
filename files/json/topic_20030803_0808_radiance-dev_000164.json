{"topic": "SCons [was: Radiance quality assurance...]", "category": "radiance-dev", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "August 03, 2003 at 08:08AM", "body": "Peter Apian-Bennewitz wrote:\n>\n> Randolph Fritz wrote:\n>>\n>> In terms of Scons* (which I haven't actually tried yet),* well, is\n>> requiring Python 1.5.2 for build (not execution) such a terrible\n>> thing?  1.5.2 is pretty old now, and it runs on every platform\n>> Radiance runs on, as far as I know.  It is even preinstalled on Mac OS\n>> X and most Linuxen.  Greg?\n>\n> Wouldn't it be good if you gain some solid experience with something new\n> first, /before/ going to lengthly theoretical arguments ?\n> P.\n\n\n\n\nIf that was a good counter-argument, then nobody would ever try\nanything new, or even think about it... This list is for thinking\ncollectively about the Radiance development process, I'm not\nquite sure why you dislike this particular thought so much.\n\n\nSCons has a proven track report, and it is being used in other\nprojects with great success. And nobody suggested to throw out\nthe makefiles now, and to think about a way to replace them\nafterwards. If someone finds the time to setup the necessary\nSCons environment, both methods can coexist without the slightest\nproblems until we have established which is favourized by the\npeople out there trying to compile Radiance.\n\n\n\n\nErwin Rol wrote:\n>\n> It always seems that writing yer own keeps things simpler in the\n> beginning until you project grows and than you hit the same problems\n> other ppl already had and solved.\n\n\nYou make a few good points there (even though you don't seem to\nbe fully aware of the specific experience and skill sets of the\ndevelopers involved). Although you didn't say so explicitly, you\nseem to want us to use autoconf and friends. But in line with\nyour own arguments: Making things simpler is one of the most\ninteresting goals here.\n\n\nWhile autoconf is very powerful and solves lots of problems, it\nisn't exactly simple, and brings quite a few problems of its own.\nMost noteably, it is itself based on inadequate and platform\n(unix) dependent tools, a limitation it shares with the current\nmakeall script in Radiance (and parts of the Radiance codebase).\n\n\nAutoconf is generally used for several distinct tasks:\n\n\na) establish the toolchain\n     (figure out which compiler and other tools to use)\nb) analyze the system environment\n     (find the necessary system headers, and check whether they\n     contain specific declarations)\nc) build the software\nd) install the software\n\n\nThe biggest and most convoluted part of that is b). Radiance has\nvery few platform dependencies, the idea actually is to reduce\nthem to none between unix systems. So in effect, we don't need b).\n\n\nThe simplest part is d), so we don't need any premade tools for\nthat one either.\n\n\nWhich leaves us with a) and c). SCons offers a much simpler and\nyet more powerful solution for both, and it does so on platforms\nthat autoconf will never know about.\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000164.html).</sup>", "id": "radiance-dev_000164", "created_by": "Georg_Mischler"}