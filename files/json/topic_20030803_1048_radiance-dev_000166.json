{"topic": "SCons (and other build tools)", "category": "radiance-dev", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "August 03, 2003 at 10:48AM", "body": "Erwin Rol wrote:\n\n\n> Simple depends on yer point of view, for simple programs autoconf\n> scripts can be very simple, for complex programs ( complex as in complex\n> dependencies on the system , not complex as in complex math in the code)\n> the scripts get more complex.\n\n\nAs long as configure is only used to determine the right compiler\noptions, I'll agree with you without hesitation (at least on\nunix). As soon as feature selection comes into the picture,\nautoconf mandates that certain cpp macros be used in the code,\nwhich causes my complexity meter to jump by several notches.\n\n\nI'd still like to eventually get away from shell script based\nsolutions completely. In my view, shell scripts are an obsolete\nheritage from the time when all \"real\" programming languages\nrequired complicated procedures to build programs.  Nowadays we\nhave Python (Perl, Tcl, Ruby, etc.), which bridge the gap between\nlanguage functionality and ease of use in a much more effective\nand platform independent way.\n\n\nThere's no rational justification for writing any *new* shell\nscripts larger than 5 lines in 2003. Unfortunately, maintaining\nexisting scripts is a different story.\n\n\n\n\n>> Most noteably, it is itself based on inadequate and platform\n>> (unix) dependent tools, a limitation it shares with the current\n>> makeall script in Radiance (and parts of the Radiance codebase).\n>\n> True. Altough the radiance scripts limitations are worse, since it\n> can't find out the type of Unix on its own.\n\n\nI don't consider this a big problem (the person doing the compile\nshould know, right?), even if an automatic detection would be\nmore elegant.\n\n\nThe serious problems are with scripts like falsecolor etc.\nThere are C replacements available from Radiance 3.3 (as in\nDesktopRadiance and Rayfront) for some of them, but those will\nhave to be fixed to work reliably (eg. to accept file names with\nspaces, etc.). Maybe I should just check them into CVS, so that\nanyone feeling adventurous enough can start playing around with\nthem.\n\n\n\n\n> How well does SCons for example deal with building shared libraries ?\n> (whcih is part of point c ).\n\n\nThat's an integral part of the basic functionality. SCons isn't a\ngeneric tool like make, it contains a lot of builtin intelligence\nabout standard build procedures. Check the manpage for a very\ncursory overview of the target types and tools directly supported:\n\n\n  http://www.scons.org/doc/HTML/scons-man.html\n\n\nOther target types and tools can be easily added (at least by a\nsomewhat experienced Python programmer).\n\n\n\n\n> But anyway, i would vote for any more sophisticate build system than\n> hand written scripts, not just autoconf.\n\n\nUltimately, we'll have to convince Greg about any alternatives.\nIn the mean time, I'd have no problem with people experimenting\nwith whatever tools they know and like. I assume we have several\npeople with autoconf experience reading here, and we already have\ntwo who expressed interest in SCons. Competition furthers\ninnovation, doesn't it? The best way to decide about the right\ntool is to compare contributed solutions side by side.\nGentlemen, start your engines!\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000166.html).</sup>", "id": "radiance-dev_000166", "created_by": "Georg_Mischler"}