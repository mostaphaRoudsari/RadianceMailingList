{"topic": "A first look at scons", "category": "radiance-dev", "attachments": [], "created_by_name": "Randolph Fritz", "created_at": "August 07, 2003 at 10:04PM", "body": "--Apple-Mail-4-407514449\nContent-Transfer-Encoding: 7bit\nContent-Type: text/plain;\n\tcharset=US-ASCII;\n\tformat=flowed\n\n\nI decided to put my money where my mouth was, and try to make scons \nbuild the Radiance libraries in \"src/common\".\n\n\nIn general, \"scons\" works fairly well.  Starting from a general \nknowlege of Python, it took me perhaps eight hours of work to learn \nscons well enough to assemble an overall configuration script, and one \nwhich builds the common libraries.\n\n\nScons uses a directory hierarchy model.  At the top of the hierarchy, a \nfile named, by default, \"SConstruct\" is used, which sets up the build, \ndetermining system configuration, and including the various build files \n(by convention named \"SConscript\") from subdirectories.  To build the \nwhole thing, one then uses the command \"scons\" in the top-level \ndirectory.  To build parts, one uses \"scons <subdirectory>\" to build a \nsubdirectory's files from the top or \"scons -u\" from within a \nsubdirectory.\n\n\nScons uses a two-phase build model, where a description of the build is \nconstructed first, and then targets are built.  The build description \nis constructed by the Python script, SConstruct, which includes the \nsubsidiary SConscript scripts.  The scripts are themselves run in a \nspecial environment provided by scons which includes three special \nclasses: one of describing build environments, one for describing \ncommand-line options, and one for testing the build system \nconfiguration.  The build portion is impressively well-worked out, and \nautomatically includes dependencies for many languages--there is never \na need to specify dependencies on .h files, as far as I can tell.\n\n\nWhat I have is a global configuration script, and a script that \ndescribes the build of the common library.  They are attached, and you \ncan read them and try them.  I think they're pretty straightforward.\n\n\nSo far, I think this is a winner.  There are some rough \nspots--forgetting to use Python lists in certain places can produce \namazingly Python-esque messages, but, those being identified, it works \nfairly well.  Keep in mind I've yet to build and install any actual \nexecutables--I may change my mind once I have.\n\n\nFiles are attached--unless someone screams \"NO! NO!\" my next step will \nbe to write a build and install script for the programs in src/meta.\n\n\nRandolph\n\n\n\n\n--Apple-Mail-4-407514449\nContent-Disposition: attachment;\n\tfilename=SConstruct\nContent-Transfer-Encoding: 7bit\nContent-Type: application/octet-stream;\n\tx-unix-mode=0644;\n\tname=\"SConstruct\"\n\n\n# XXX still needs install code\n\n\n# Notes to people who come after:\n#\n# In general, only use '/' as a path separator in *nix-specific code, use\n# join() for everythign else\n\n\nfrom os.path import isdir, join\nfrom sys import platform\n\n\ndef set_opts(env):\n    # XXX add some caching\n    opts = Options(None, ARGUMENTS)\n    opts.Add ('RAYLIB', 'Radiance library directory', '/usr/local/ray')\n    opts.Add ('EXECDIR', 'Executables placed here', '/usr/local/bin')\n    opts.Update(env) \n    Help(opts.GenerateHelpText(env, sort=cmp))\n\n\ndef gen_setup(env):\n    # Radiance headers\n    # This must be a Python list (hence the square brackets).  If it is\n    # not, Bad Things happen.\n    env.Append (CPPPATH = [join (\"#\", \"src\", \"common\")])\n\n\ndef nix_setup(env):\n    # XXX X11 and OGL probably would be better as options.  In fact, all this\n    # stuff would probably be better as options\n    # Look for X-Windows directory\n    d = None\n    for t in (\"/usr/X11R6\", \"/usr/X11\", \"/usr/openwin\"):\n        if isdir (t):\n            d = t\n            break\n    # Check for the presence of -lX11 and OpenGL, set flags,  and add the\n    # X11 library and include directories to the appropriate paths\n    if d:\n        # These must be Python lists (hence the square brackets).  If they are\n        # not, Bad Things happen.\n        env.Append (LIBPATH = [join (d, \"lib\")]) \n        env.Append (CPPPATH = [join (d, \"include\")])\n        conf = Configure (env)\n        conf.env['X11'] = conf.CheckLibWithHeader (\"X11\", \"X11/X.h\", \"C\")\n        conf.env['OGL'] = conf.CheckCHeader (\"GL/gl.h\")\n        env = conf.Finish ()\n\n\n    # Set up the C preprocessor flags, the C flags, and special local\n    # versions of library files.\n    if platform == 'darwin':\n        env.Append (CPPFLAGS = Split (\"-DBSD -DNOSTEREO -Dfreebsd -DSPEED=200\"))\n        env.Append (CFLAGS = Split (\"-O2\"))\n        env['COMPAT'] = (\"bmalloc.c\")\n    else:\n        # generic *nix\n        env.Append (CPPFLAGS = \"-DNOSTEREO\")\n        env.Append (CFLAGS = \"-O\")\n        env['COMPAT'] = Split (\"bmalloc.c erf.c strcmp.c\")\n\n\nenv = Environment()\nset_opts(env)\n\n\n# Set up platform-independent build environment\ngen_setup(env)\n\n\n# Set up platform-specific build environment\nif env['PLATFORM'] == \"posix\":\n    nix_setup(env)\nelse:\n    print \"Sorry--*nix only, so far\"\n    Exit(2)\n\n\n# Bring in all the actual things to build\nExport (\"env\")\nfor d in Split (\"common meta cv gen ot rt px hd util cal\"):\n    SConscript (join (\"src\", d, \"SConscript\"))\n\n\n--Apple-Mail-4-407514449\nContent-Disposition: attachment;\n\tfilename=SConscript\nContent-Transfer-Encoding: 7bit\nContent-Type: application/octet-stream;\n\tx-unix-mode=0644;\n\tname=\"SConscript\"\n\n\nImport (\"env\")\n\n\nRT = Split (\"cone.c face.c free_os.c instance.c readobj.c readoct.c otypes.c \\\n\tobjset.c octree.c readfargs.c modobject.c \\\n\taddobjnotify.c zeroes.c mesh.c readmesh.c tmesh.c sceneio.c\")\n\n\nRT.append (env.StaticObject (\"getlibpath.c\", CPPFLAGS = '-DDEFPATH=\\\\\":' + \n                            env['RAYLIB'] + '\\\\\"'))\n\n\nPIC = Split (\"color.c header.c image.c lamps.c resolu.c rexpr.c spec_rgb.c \\\n\tcolrops.c font.c tonemap.c tmapluv.c tmaptiff.c \\\n\ttmap16bit.c\")\n\n\nPIC.append (env.StaticObject (\"tmapcolrs.c\", CPPFLAGS = '-DPCOND=\\\\\"pcond\\\\\"'))\n\n\nSTD = Split (\"fgetline.c fropen.c linregr.c xf.c mat4.c invmat4.c fvect.c urand.c \\\n\turind.c calexpr.c caldefn.c calfunc.c calprnt.c biggerlib.c multisamp.c \\\n\tunix_process.c process.c getpath.c error.c savestr.c savqstr.c \\\n\tbadarg.c fgetword.c words.c expandarg.c wordfile.c fgetval.c \\\n\tclip.c plocate.c eputs.c wputs.c quit.c lookup.c \\\n\tloadvars.c tcos.c fputword.c chanvalue.c dircode.c paths.c\")\n\n\nSYS = Split (\"ealloc.c fdate.c portio.c myhostname.c\")\nSYS.append (env['COMPAT'])\n\n\nRGL = Split (\"rglfile.c rglmat.c rgldomat.c rglsurf.c rglinst.c rglsrc.c\")\n\n\nenv.Append (LIBS = env.StaticLibrary (\"rt\", RT + PIC + STD + SYS))\nif env['OGL']:\n    env.Append (LIBS = env.StaticLibrary (\"rgl\", RGL))\n\n\n--Apple-Mail-4-407514449--\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000176.html).</sup>", "id": "radiance-dev_000176", "created_by": "Randolph_Fritz"}