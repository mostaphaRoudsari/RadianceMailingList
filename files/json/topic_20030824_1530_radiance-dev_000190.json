{"topic": "scons status?", "category": "radiance-dev", "attachments": [], "created_by_name": "Randolph Fritz", "created_at": "August 24, 2003 at 03:30PM", "body": "--Apple-Mail-2--294849766\nContent-Transfer-Encoding: 7bit\nContent-Type: text/plain;\n\tcharset=US-ASCII;\n\tformat=flowed\n\n\nI got very busy with other things & didn't have time to work on this.  \nSo here's my last notes--I added an install (note that it doesn't \nrequire a separate environment) and build for meta.  What's the status \nof the scons scripts for Radiance--has anyone else done work on them?  \n(I would like to do a cvs diff so that I don't have to bother anyone \nwith that question.  I plead yet again for read-only access to the CVS \ndatabase.  Surely there is some simple, secure way?)\n\n\nRandolph\n\n\n\n\n--Apple-Mail-2--294849766\nContent-Disposition: attachment;\n\tfilename=SConstruct\nContent-Transfer-Encoding: 7bit\nContent-Type: application/octet-stream;\n\tx-unix-mode=0644;\n\tname=\"SConstruct\"\n\n\n# XXX still needs install code\n\n\n# Notes to people who come after:\n#\n# In general, only use '/' as a path separator in *nix-specific code, use\n# join() for everythign else\n\n\nfrom os.path import isdir, join\nimport sys\n\n\nOPTFILE = 'rayopts.py'\n\n\ndef set_opts(env):\n    # XXX X11, OGL, and control for the optional build files need to go here\n    # XXX X11 = 0 -- don't build X11 stuff\n    #         = <string> -- use string as X base\n    # XXX OGL = 0 don't build OGL stuff\n    opts = Options(OPTFILE, ARGUMENTS)\n    opts.Add ('RAYLIB', 'Radiance library directory', '/usr/local/ray')\n    opts.Add ('EXECDIR', 'Executables placed here', '/usr/local/bin')\n    opts.Update(env) \n    opts.Save(OPTFILE, env)\n    Help(opts.GenerateHelpText(env, sort=cmp))\n\n\ndef gen_setup(env):\n    # Radiance headers\n    # This must be a Python list (hence the square brackets).  If it is\n    # not, Bad Things happen.\n    env.Append (CPPPATH = [join (\"#\", \"src\", \"common\")])\n    env.Append (LIBPATH = [join (\"#\", \"src\", \"common\")])\n    env.Alias (\"install\", [env['RAYLIB'], env['EXECDIR']])\n\n\ndef nix_setup(env):\n    # XXX X11 and OGL probably would be better as options.  In fact, all this\n    # stuff would probably be better as options\n    # Look for X-Windows directory\n    for d in (\"/usr/X11R6\", \"/usr/X11\", \"/usr/openwin\"):\n        if isdir (d):\n            libdir = join (d, \"lib\")\n            incdir = join (d, \"include\")\n            # These must be Python lists (hence the square brackets).\n            # If they are not, Bad Things happen.\n            env.Append (LIBPATH = [libdir]) \n            env.Append (CPPPATH = [incdir])\n            conf = Configure (env)\n            conf.env['X11'] = conf.CheckLibWithHeader (\"X11\", \"X11/X.h\", \"C\")\n            conf.env['OGL'] = conf.CheckCHeader (\"GL/gl.h\")\n            env = conf.Finish ()\n            if env['X11']:\n                break\n            env['LIBPATH'].remove(libdir)\n            env['CPPPATH'].remove(incdir)\n\n\n    # Set up the C preprocessor flags, the C flags, and special local\n    # versions of library files.\n    if sys.platform == 'darwin':\n        env.Append (CPPFLAGS = \"-DBSD -DNOSTEREO -Dfreebsd -DSPEED=200\")\n        env.Append (CFLAGS = \"-O2\")\n        env['COMPAT'] = Split(\"bmalloc.c\")\n    else:\n        # generic *nix\n        env.Append (CPPFLAGS = \"-DNOSTEREO\")\n        env.Append (CFLAGS = \"-O\")\n        env['COMPAT'] = Split (\"bmalloc.c erf.c strcmp.c\")\n\n\nenv = Environment()\nset_opts(env)\n\n\n# Set up platform-independent build environment\ngen_setup(env)\n\n\n# Set up platform-specific build environment\nif env['PLATFORM'] == \"posix\":\n    nix_setup(env)\nelse:\n    print \"Sorry--*nix only, so far\"\n    Exit(2)\n\n\n# Bring in all the actual things to build\nExport (\"env\")\n\n\nfor d in Split (\"common meta cv gen ot rt px hd util cal\"):\n    SConscript (join (\"src\", d, \"SConscript\"))\n\n\n\n\n--Apple-Mail-2--294849766\nContent-Disposition: attachment;\n\tfilename=SConscript\nContent-Transfer-Encoding: 7bit\nContent-Type: application/octet-stream;\n\tx-unix-mode=0644;\n\tname=\"SConscript\"\n\n\nImport (\"env\")\n\n\nmenv = env.Copy()\nmenv.Append (CPPFLAGS = ' -DMDIR=\\\\\"' + menv['RAYLIB'] + '\\\\\"')\n\n\ncommon = Split(\"mfio.c syscalls.c misc.c\")\n\n\n# XXX is libmeta to be made available to other Radiance modules? \nlibmeta = [menv.StaticLibrary (\n    \"meta\",\n    Split (\"metacalls.c primout.c progname.c\") + common)]\n\n\nexecs = []\nexecs.append(menv.Program (\n    \"meta2tga\",\n    Split(\"meta2tga.c rplot.c plot.c palloc.c\") + common))\nexecs.append(menv.Program (\n    \"pexpand\",\n    Split(\"pexpand.c expand.c segment.c palloc.c\") + common))\nexecs.append(menv.Program (\n    \"psort\",\n    Split(\"psort.c sort.c palloc.c\") + common))\nexecs.append(menv.Program (\n    \"cv\",\n    Split(\"cv.c mfio.c cvhfio.c syscalls.c misc.c\")))\nexecs.append(menv.Program (\n    \"psmeta\",\n    Split(\"psmeta.c psplot.c\") + common))\nexecs.append(menv.Program (\n    \"plotin\",\n    Split(\"plotin.c primout.c\") + common))\nexecs.append(menv.Program (\n    \"x11meta\",\n    Split(\"plotin.c primout.c\") + common))\nexecs.append(menv.Program (\n    \"bgraph\",\n    Split(\"bgraph.c mgvars.c mgraph.c\") + libmeta))\nexecs.append(menv.Program (\n    \"igraph\",\n    Split(\"igraph.c mgvars.c mgraph.c gcalc.c cgraph.c\") + libmeta))\nexecs.append(menv.Program (\n    \"dgraph\",\n    Split(\"dgraph.c cgraph.c mgvars.c\")))\nexecs.append(menv.Program (\n    \"gcomp\",\n    Split(\"gcomp.c gcalc.c mgvars.c\")))\nexecs.append(menv.Program (\n    \"plot4\",\n    Split(\"plot4.c primout.c\") + common))\n\n\n# XXX add the optional \"meta\" files\n\n\nenv.Install (env['EXECDIR'], execs)\n\n\n--Apple-Mail-2--294849766\nContent-Disposition: attachment;\n\tfilename=SConscript\nContent-Transfer-Encoding: 7bit\nContent-Type: application/octet-stream;\n\tx-unix-mode=0644;\n\tname=\"SConscript\"\n\n\nImport (\"env\")\n\n\nRT = Split (\"cone.c face.c free_os.c instance.c readobj.c readoct.c otypes.c \\\n\tobjset.c octree.c readfargs.c modobject.c \\\n\taddobjnotify.c zeroes.c mesh.c readmesh.c tmesh.c sceneio.c\")\n\n\nRT.append (env.StaticObject (\"getlibpath.c\", CPPFLAGS = '-DDEFPATH=\\\\\":' + \n                            env['RAYLIB'] + '\\\\\"'))\n\n\nPIC = Split (\"color.c header.c image.c lamps.c resolu.c rexpr.c spec_rgb.c \\\n\tcolrops.c font.c tonemap.c tmapluv.c tmaptiff.c \\\n\ttmap16bit.c\")\n\n\nPIC.append (env.StaticObject (\"tmapcolrs.c\", CPPFLAGS = '-DPCOND=\\\\\"pcond\\\\\"'))\n\n\nSTD = Split (\"fgetline.c fropen.c linregr.c xf.c mat4.c invmat4.c fvect.c urand.c \\\n\turind.c calexpr.c caldefn.c calfunc.c calprnt.c biggerlib.c multisamp.c \\\n\tunix_process.c process.c getpath.c error.c savestr.c savqstr.c \\\n\tbadarg.c fgetword.c words.c expandarg.c wordfile.c fgetval.c \\\n\tclip.c plocate.c eputs.c wputs.c quit.c lookup.c \\\n\tloadvars.c tcos.c fputword.c chanvalue.c dircode.c paths.c\")\n\n\nSYS = Split (\"ealloc.c fdate.c portio.c myhostname.c\")\nSYS = SYS + (env['COMPAT'])\n\n\nRGL = Split (\"rglfile.c rglmat.c rgldomat.c rglsurf.c rglinst.c rglsrc.c\")\n\n\nenv.StaticLibrary (\"rt\", RT + PIC + STD + SYS)\nenv.Append (LIBS = \"rt\")\n\n\nif env['OGL']:\n    env.StaticLibrary (\"rgl\", RGL)\n    env.Append (LIBS = \"rgl\")\n\n\n\n\n--Apple-Mail-2--294849766--\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-August/000190.html).</sup>", "id": "radiance-dev_000190", "created_by": "Randolph_Fritz"}