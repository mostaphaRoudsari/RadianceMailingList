{"topic": "-ar, -ad, -as, ahh $#*@!", "category": "radiance-general", "attachments": [], "created_by_name": "Greg Ward", "created_at": "September 09, 2003 at 08:52AM", "body": "Hi Rob,\n\n\nThis seems to be a classic example of where you just can't rely on the \ninterreflection calculation in Radiance to solve your problem for you.  \nThe basic assumption in this approximation is that the indirect \nillumination varies slowly over surfaces, which clearly isn't the case \nin this scene.\n\n\nSolution: you need to apply mkillum to create pseudo light sources \n(imposters) for your indirect luminaires.  To do so, put a shallow box \nwith an open top around a single ceiling-mounted light source (5 \nrectangles) and use the \"void\" modifer for these, making sure they face \nout into your room.  Let's say you called this file \"light_in.rad\".  \nUsing either the octree for your room or a reduced one that just has \nthat one light source switched on (better), you would run mkillum thus:\n\n\n% mkillum -ab 1 -ad 512 -as 256 -ar 16 < light_in.rad > light_out.rad\n\n\nIn addition to creating the light_out.rad file, mkillum will generate 5 \ndata files containing the computed output distribution for your \nluminaire.  You may then take the light_out.rad and use an array \ntransform to place it over all the light sources in your scene.  For \nthe sake of calculational efficiency, I recommend that you also change \nthe light primitives in your original luminaire files to the \"glow\" \ntype with an effective distance equal to the diagonal of your luminaire \ndimension, so as to avoid sending shadow rays to these sources \nunnecessarily.\n\n\nThe net result should be a fast and accurate rendering of your space.\n\n\n-Greg\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2003-September/000963.html).</sup>", "id": "radiance-general_000963", "created_by": "Greg_Ward"}