{"topic": "SCons/Windows status", "category": "radiance-dev", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "October 27, 2003 at 09:43AM", "body": "Hi all,\n\n\n\n\nI think I figured out why xform (and others) had troubles with\nmultiline !commands on Windows in my earlier attempts. The thing\nis, that cmd.com doesn't handle \"\\\\\\n\" escapes. I now redirected\nall calls to popen() to my own win_peopen(). This one correctly\nemulates the \"|\" handling of unix shells, and removes any\ndisturbing character sequences before invoking the external\nprograms through Windows native tools. At the moment, it only\nsupports mode \"r\", though, which means that igraph, plot4,\nra_rgbe, rad, and rlux will fail during runtime, even if they\nsuccessfully compile.\n\n\nI added a gethomedir.c for posix and Windows, which simplifies\nthe internals of getpath.c.\n\n\nI added a util/win_netproc.c, which I found in the Radiance 3.2\nsources. It actually only defines stubs to most of the required\nfunctions, so that ranimate will compile but may not do anything\nuseful (haven't tried). All in all we now can compile 111\nexecutables on Windows, including the \"special\" targets.\n\n\n\n\nI updated the SCons files, so that it is now possible to create a\ndebug build with the commandline argument DEBUG=1. This will be\nremembered, so you need to use DEBUG=0 for your next release\nbuild after that. I'm more and more leaning towards the idea of\nbuilding into seperate trees for release/debug builds and\ndiffernt platforms. As long the build paths remain constant, a\nswitch between release and debug mode will automatically rebuild\nall affected dependencies.\n\n\n\n\nAs an experiment, I reconfigured SCons to create several smaller\nlibraries instead of one big librt.a from the common directory.\nThe currently resulting number of libraries may be excessive, but\nI wanted to see how far we can go. It's likely that the final\nsplitting will look different. Turns out that having two build\nsystems next to each other really helps for this kind of testing.\n\n\nAs another positive consequence, it seems that the duplicate file\nand function names throughout Radiance don't prevent us from\nbuilding stuff on Windows anymore. We should probably still\neliminate most of those redundancies, but that's not quite as\nurgent anymore as it first looked like.\n\n\n\n\nHere's the current setup, with files and dependencies for\neach library:\n\n\nlibrterror.a\n\teputs.c\n\terror.c\n\tquit.c\n\twputs.c\n\t->\n\n\nlibrtmem.a  # allocate and free memory\n\tbmalloc.c\n\tealloc.c\n\t-> error\n\n\nlibrtcont.a   # containers: generic in-memory storage and retreival\n\tsavestr.c\n\tsavqstr.c\n\tlookup.c\n\t-> error\n\n\nlibrtmath.a\n\tfvect.c\n\tinvmat4.c\n\tlinregr.c\n\tmat4.c\n\ttcos.c\n\turand.c\n\turind.c\n\tzeroes.c\n\tdircode.c\n\terf.c\n\tclip.c\n\tmultisamp.c\n\tplocate.c\n\t-> error\n\n\nlibrtfunc.a\n\tbiggerlib.c\n\tcaldefn.c\n\tcalexpr.c\n\tcalfunc.c\n\tcalprnt.c\n\tchanvalue.c\n\t-> error\n\t-> math (error)\n\t-> mem (error)\n\t-> cont (error)\n\n\nlibrtio.a  # reading from and writing to files\n\tfdate.c\n\tfgetline.c\n\tfgetval.c\n\tfgetword.c\n\tfputword.c\n\tloadvars.c\n\tportio.c\n\twordfile.c\n\twords.c\n\theader.c\n\t-> (frexp.c)\n\t-> mem (error)\n\t-> error\n\n\nlibrtargs.a   # process arguments within processes\n\tbadarg.c\n\texpandarg.c\n\tfixargv0.c\n\t-> mem (error)\n\t-> io (mem error)\n\n\nlibrtpic.a  # picture file handling\n\tcolor.c\n\tcolrops.c\n\tresolu.c\n\timage.c\n\t-> math (error)\n\t-> mem (error)\n\t-> io (mem error)\n\t-> args (io mem error)\n\n\nlibrtcolor.a  # color math\n\tspec_rgb.c\n\t->\n\n\ntonemap  # picture tone mapping\n(this is actually included in librtpic.a at the moment)\n\ttmapcolrs.c\n\ttmapluv.c\n\ttmaptiff.c\n\ttmap16bit.c\n\ttonemap.c\n\t-> color\n\t-> pic (math mem io error)\n\t-> tiff\n\t-> io (mem error)\n\n\nlibrtpath.a  # manipulating file names and files (but not the contents)\n\tgetpath.c\n\tgethomedir.c\n\tpaths.c\n\tgetlibpath.c\n\t-> io (string manipulation)\n\n\nlibrtproc.a  # processes: call them, feed them, kill them\n\tprocess.c\n\tunix_process.c\n\twin_process.c\n\twin_popen.c\n\t-> paths\n\t-> io (error)\n\n\nlibrtnet.a\n\tmyhostname.c\n\t->\n\n\nlibrtscene.a  # scene and octree files\n\tcone.c\n\tface.c\n\tfont.c\n\tmesh.c\n\tinstance.c\n\ttmesh.c\n\tsceneio.c\n\treadobj.c\n\tmodobject.c\n\tobjset.c\n\treadfargs.c\n\totypes.c\n\tfree_os.c\n\taddobjnotify.c\n\toctree.c\n\treadmesh.c\n\treadoct.c\n\txf.c (args/math.h)\n\n\nlibrgl.a  # OpenGL\n\trgldomat.c\n\trglfile.c\n\trglinst.c\n\trglmat.c\n\trglsrc.c\n\trglsurf.c\n\t-> error\n\t-> mem (error)\n\t-> io (mem error)\n\t-> math (error)\n\t-> sys\n\t-> scene/octree\n\t-> xf.c\n\n\nlibrtlamps.a\n\tlamps.c\n\trexpr.c\n\tfropen.c [use getpath.c instead?]\n\t-> color\n\n\nstuff that gets used to replace system functions on some\nplatforms:\n\tpopen.c\n\tmktemp.c\n\tstrcmp.c\n\tpreadwrite.c\n\tfrexp.c\n\tfwrite.c\n\trandom.c\n\tmalloc.c -> getpagesize.c\n\t  [getpagesize.c]\n\n\nunused\n\tbcopy.c\n\tpeano.c\n\n\n\n\nComments:\n\n\nThe most obvous candidate for merging are librtcont.a and\nlibrtmem.a. Although there are several programs that only use one\nof them, they are related and small enough to be packed together.\n\n\nI'm not sure how tricky it would be to split up librtio.a\nfurther, to seperate plain string manipulation from those\nfunctions that are actually used to access files. I don't know\nyet whether that would make sense either.\n\n\nYes, librtcolor.a is very small. It's used seperately of\nlibrtpic.a several times, as a dependency of librtlamps.a.\n\n\nThe tonemapping could justifiably be seperated from librtpic.a,\nthere are only dependencies in one direction.\n\n\nLibrtargs.a and librtpath.a both provide rather specialized\nfunctionality, which depends on the string functions (and only\nthose) from librtio.a.\n\n\nLibrtnet.a may eventually grow, when (and if) we add remote\nambient file access in some way or another. It might be worth\nconsidering to merge librtpath.a, librtproc.a, and librtnet.a\ninto a librtsys.a. Those three libraries all have a lot of OS\ndependencies to deal with, and they are likely to be used in\ncombination.\n\n\nI didn't find the time and energy yet to analyze all the\ndependencies within librtscene.a yet, but it probably depends on\nalmost anything else.\n\n\nThere are two identical copies of x11findwind.c around. Maybe\nwe can find a few more files that could be combined into a\nlibrtx11.a?\n\n\nWhen did anyone check which of the OS replacement functions are\nreally necessary anymore? Some of them seem to be written to\nreplace really old and buggy implementations that may have gone\nout of use by now anyway.\n\n\nCan we remove those files that aren't used at all?\n\n\n\n\nThe parts that currently still don't compile on Windows are\neverything to do with the tifflib, the holodeck, and the GUI\nprograms, as well as makedist and ranimove (the latter two\nbecause they use fork()/exec() and friends).\n\n\n\n\nOh, you're still reading that far down? Congrats! ;)\n\n\n\n\n-schorsch\n\n\n\n\nGeorg Mischler  --  simulations developer  --  schorsch at schorsch com\n+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2003-October/000237.html).</sup>", "id": "radiance-dev_000237", "created_by": "Georg_Mischler"}