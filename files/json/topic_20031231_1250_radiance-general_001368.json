{"topic": "New occlusion testing optimization", "category": "radiance-general", "attachments": [], "created_by_name": "Greg Ward", "created_at": "December 31, 2003 at 12:50PM", "body": "I just checked in a new optimization for light source testing that \nseems to speed renderings up by about a factor of 2, depending on the \nnumber and arrangement of light sources in the scene.  There is no \ncommand-line option associated with the algorithm, as it is strictly a \ntime vs. memory trade-off, and a pretty good one at that.  Using the \ndefault cache resolution of 20x20, the memory cost is a little over 4 \nKbytes per light source, so a scene with 100 sources will take an \nadditional 400 Kbytes of memory during rendering.  This seems like a \nsmall price for a doubling in rendering speed, so I decided not to make \nit a runtime option.  (You can add a -DSHADCACHE=0 compile option if \nyou really want to switch it off, or use -DSHADCACHE=40 if you want to \nuse 4 times as much memory for even faster renderings.)\n\n\nThe way it works is simple:  with each light source, we associate an \narray of SHADCACHExSHADCACHE OBJECT indices listing occluders in each \ndirection as seen from the source.  Each time we're about to test for \nshadows, we first check against the cached occluder.  Since it doesn't \nmatter where in the path a surface occludes the source, we don't really \nhave to trace a ray to find the first blocker -- any blocker will do.  \nIf the cached occluder does not block the point being tested, but \nanother blocker is found for this point, then the new blocker replaces \nthe previous one in the cache.  This tends to save the largest \noccluders over time, since they'll have better cache longevity.\n\n\nThis is actually a very old and widely used technique for reducing \nshadow tests, but the way it is implemented in most ray tracers is to \nstore just one blocker per source -- the most recent.  This of course \ndoesn't work if your test points are randomly distributed in your \nscene, as they are during most Radiance renderings by the indirect \n(ambient) calculation.  My earlier test of this simpler approach many \nyears ago showed no improvements in rendering time.  So, the innovation \nhere use an array of recent occluders per source, which works for any \nsample ordering provided the shadows in the scene are not caused \nentirely by teeny obstructions.  (Shadows cast by the leaves of a tree \nwill not be sped up much by this technique.)\n\n\nThe way I implemented it in Radiance, it tends to improve the accuracy \nof the -dt and -dc settings, even when it does not substantially reduce \nthe rendering time.  Also, it allows you to specify -dt 0 without \nincurring nearly as great a cost as it used to for those who need the \nutmost in accuracy.  Since the occlusion cache does not introduce any \nerrors (at least none that I've seen), you can get 100% reliable source \ntests at a fraction of the expected cost.\n\n\nI'm hoping that some of you will download tomorrow's HEAD release and \ngive it a try.  I have only experimented with it extensively on one \n(rather complicated) scene, so I'm curious what effect it has on \nothers.\n\n\nHappy New Year everyone!\n-Greg\n\n\nP.S.  Rob's latest post makes it sound like he's taking after me -- \nforgetting what he's said as well as what he knows!\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2003-December/001368.html).</sup>", "id": "radiance-general_001368", "created_by": "Greg_Ward"}