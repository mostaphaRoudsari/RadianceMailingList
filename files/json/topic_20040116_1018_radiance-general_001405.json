{"topic": "query about accurately modellingglazing", "category": "radiance-general", "attachments": [], "created_by_name": "Phillip Greenup", "created_at": "January 16, 2004 at 10:18AM", "body": "A quick correction to myself....\n\n\nthe second law of thermodynamics, not the third...  entropy, as Georg said.\n\n\nPhil.\n\n\n>>> Phillip.Greenup@arup.com.au 16/01/2004 9:41:36 am >>>\nHi again,\n\n\nI'm afraid i don't have on hand a good reference for transmittance being the same either way through a glazing system.  i like the explanation given on that web site.  such a glazing system would probably break the third law of thermodynamics.\n\n\nabout your comparison below...  the desktop radiance glass material file contains definitions of three different materials (clear3_glass, clear3_front, clear3_back).  but, when DR creates the associated geometry files, they refer only to one of these materials (clear3_glass in this example).  so, the created BRTDfunc materials are not used.  that means that you will not get different reflectances from different sides of the materials, and that you will get a normal reflectance that doesn't necessarily match what is measured.  the only way to get both the transmittance and reflectance you are after with the glass primitive is to alter the refractive index.  you still don't get different reflectances for the different sides.  but, normally, you are only concerned with one side of the glass (eg. creating visualisation or predicting illums inside and not outside), so just use the reflectance of that side (eg inside face).\n\n\nthe BRTDfunc you created with the inbuilt functions will likely work better than the glass primitive with an altered refractive index.  the new forms (glass1.cal, glass2.cal and glaze.csh) will probably be better yet.\n\n\nPhil.\n\n\n>>> zrogers@archenergy.com 16/01/2004 3:35:40 am >>>\nHello,\n\n\n>secondly, what does this do to the transmittance?  physically, the transmittance going one way should be the same as the transmittance going the other way.  should the (rtrns, gtrns, btrns) variables then be the same for both front and back panes?  or does it not matter, as long as the product of their transmittances is equal to that of the combination.\n>\nThis is true for a symetric glass composition (ie. single pane no low-e, \ndouble pane, clear, no low-e) but not true for non-symetric glass which \nis often the case for glass with low-e and glass with one of the panes \ntinted.  I believe the front and back transmittance is always really \nclose, (ie. it can't be 10% in one direction and 90% in the other) but \nthey can vary slightly.  This is what desktop radiance and optics 5 \ndefinition method allows you to do.\n\n\n>finally, there are no functions built in.  that means that there is no dependence on angle of incidence for either transmittance or reflectance.  this is unrealistic, as transmittance generally reduces and reflectance generally increases with increasing angle of incidence.\n>\nI do think Desktop Radiance and Optics 5 both make use of the angular \ntransmittance function.  This is part of the glass primitive.  And in my \nexample, the BRTDFunc calls glazing.cal which provides the angular \ntransmittance function.  Also, from my comparisions a while ago now, the \ntwo methods gave me identical results.  That is:\n\n\nvoid glass      clear3_glass\n0\n0\n3    0.92189    0.98612    0.972\n\n\nvoid BRTDfunc    clear3_front\n10   \n    0.84636    0.90553    0.89251   \n    0.07428    0.08322    0.08556   \n    0 0 0\n    .   \n0\n9 0 0 0 0 0 0 0 0 0\n\n\nvoid BRTDfunc    clear3_back   \n10\n    0.84636    0.90553    0.89251\n    0.07567    0.08418    0.08538\n    0 0 0\n    .   \n0\n9 0 0 0 0 0 0 0 0 0\n\n\nis equivalent to:\n\n\nvoid BRTDfunc clear3_glass\n    10    rrho    grho    brho\n          rtau    gtau    btau\n          0    0    0\n          glazing.cal\n    0\n    18    0    0    0\n          0    0    0\n          0    0    0\n          0.07428    0.08322    0.08556\n          0.07567    0.08418    0.08538\n          0.84636    0.90553    0.89251\n\n\nAlso, you might want to check out glass1.cal and glass2.cal which is \npart of the newest HEAD radiance release.  It just distinguishes between \nsingle pane and double pane which have different angular dependance \nfunctions.  Also, check out glaze.csh in the latest release, I was just \ninformed of this and have not checked it out personally, but I \nunderstand it helps create these definitions.\n\n\nSo, I think the BRTDFunc methods can provide greater accuracy than the \nglass primitive.\n\n\nI hope I have not mistated any of this, anyone please correct me if so.\n\n\nRegards,\nZack\n\n\n\n\n\n\n_______________________________________________\nRadiance-general mailing list\nRadiance-general@radiance-online.org \nhttp://www.radiance-online.org/mailman/listinfo/radiance-general \n\n\n_______________________________________________\nRadiance-general mailing list\nRadiance-general@radiance-online.org \nhttp://www.radiance-online.org/mailman/listinfo/radiance-general\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2004-January/001405.html).</sup>", "id": "radiance-general_001405", "created_by": "Phillip_Greenup"}