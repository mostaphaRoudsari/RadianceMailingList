{"topic": "Worley Cellular Basis Function", "category": "radiance-dev", "attachments": [], "created_by_name": "Jack de Valpine", "created_at": "July 08, 2004 at 10:38PM", "body": "Hi all,\n\n\nSteven Worley has source code available for his cellular basis function. \nSee www.texturingandmodeling.com\n\n\nIs this something that could be incorporated as another function to call \nin procedural materials, similar to fnoise and others?\n\n\nThe copyright (see below) would seem to allow for use of the code in a \npretty open manner.\n\n\nRegards,\n\n\n-Jack de Valpine\n\n\n/* Copyright 1994, 2002 by Steven Worley\n   This software may be modified and redistributed without restriction\n   provided this comment header remains intact in the source code.\n   This code is provided with no warrantee, express or implied, for\n   any purpose.\n\n\n   A detailed description and application examples can be found in the\n   1996 SIGGRAPH paper \"A Cellular Texture Basis Function\" and\n   especially in the 2002 book \"Texturing and Modeling, a Procedural\n   Approach, 3rd edition.\" There is also extra information on the web\n   site http://www.worley.com/cellular.html .\n\n\n   If you do find interesting uses for this tool, and especially if\n   you enhance it, please drop me an email at steve at worley.com. */\n\n\n\n\n\n\n/* Worley()\n\n\n   An implementation of the key cellular texturing basis\n   function. This function is hardwired to return an average F_1 value\n   of 1.0. It returns the <n> most closest feature point distances\n   F_1, F_2, .. F_n the vector delta to those points, and a 32 bit\n   seed for each of the feature points.  This function is not\n   difficult to extend to compute alternative information such as\n   higher order F values, to use the Manhattan distance metric, or\n   other fun perversions.\n\n\n   <at>    The input sample location. \n   <max_order>  Smaller values compute faster. < 5, read the book to extend it.\n   <F>     The output values of F_1, F_2, ..F[n] in F[0], F[1], F[n-1]\n   <delta> The output vector difference between the sample point and the n-th\n            closest feature point. Thus, the feature point's location is the\n            hit point minus this value. The DERIVATIVE of F is the unit\n            normalized version of this vector.\n   <ID>    The output 32 bit ID number which labels the feature point. This\n            is useful for domain partitions, especially for coloring flagstone\n            patterns.\n\n\n   This implementation is tuned for speed in a way that any order > 5\n   will likely have discontinuous artifacts in its computation of F5+.\n   This can be fixed by increasing the internal points-per-cube\n   density in the source code, at the expense of slower\n   computation. The book lists the details of this tuning.  */\n\n\n\n\n\n\n#\tJohn E. de Valpine\n#\tpresident\n#\n#\tvisarc incorporated\n#\thttp://www.visarc.com\n#\n#\tchanneling technology for superior design and construction\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2004-July/000371.html).</sup>", "id": "radiance-dev_000371", "created_by": "Jack_de_Valpine"}