{"topic": "GUI / Open-GL", "category": "radiance-dev", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "July 09, 2004 at 11:54PM", "body": "Georg Mischler wrote:\n\n\n>Lars O. Grobe wrote:\n>\n>  \n>\n>>Why not continuing one of the existing projects?\n>>    \n>>\n>\n>Most existing projects have one or several disadvantages:\n>- platform specific\n>- limited scope of functionality\n>- obsolete technology (eg. tcl)\n>- not available for free\n>  \n>\nfor those interested some thoughts on Open-GL:\n\n\ntcl is used in rshow for the GUI part. Tcl is surely slightly a little \ndusted, at the time it was one of the free GUIs running on UNIX and \nWindows. And it still compiles, so why should I go porting it to a new lib ?\n\n\nIMHO, more relevant for daily work is the way Radiance geometry is fed \nto Open-GL by the core rendering engine (written in ANSI-C in rshow):\nRshow is based on my experience that being close to the hardware and its \nOpen-GL calls is being close to happiness. If you know the concept of \nthe Open-GL pipeline and your data structure, you know how to speed \nthings up. That worked pretty excellent on Fraunhofer's SGI VGX a dozen \nyears ago. And it saved me substantial megabytes in the current rshow \nwhen I got rid of the more general concept of display lists and fed 3- \nand 4 sided polygons directly to the pipeline. While the docs on the \nstructure of current ATI graphic cards are not as good as on the VGX, \nprogramming on the \"bare metal\" offers still the advantage of knowing \nwhat you're doing. And for merging rholo/Open-gl-texture that seems a \ngood thing, as shown by other people's experience.\nIn the other hand: The reason for using 3d libraries is that the may \nhave effective ways of dealing with 3d objects on a higher level. \nCulling and level-of-detail are essential key features for handling \nlarge data sets. As an example, the way high-glass CAD programs handle \ncomplex geometry with 30fps on an ATI X1 while zooming in on a small \ndetail is impressive. But they spent a long time building their data \nstructures when the object loads initially from disk and they are RAM \nintensive.\n\n\nHigher libraries, like Java 3D classes, are interesting if they handle \nat least one of the above aspects well.\n\n\n-Peter\n\n\n\n\n pab-opto, Freiburg, Germany, http://www.pab-opto.de\n [see web page to check digital email signature]\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2004-July/000372.html).</sup>", "id": "radiance-dev_000372", "created_by": "Peter_Apian-Bennewitz"}