{"topic": "New rtcontrib program", "category": "radiance-general", "attachments": [], "created_by_name": "Greg Ward", "created_at": "May 26, 2005 at 09:17PM", "body": "Hi All,\n\n\nSomewhat related to the light pipe discussion, I have just completed  \nwork on a new utility called \"rtcontrib,\" for computing arbitrary  \nlight contributions.  This is a culmination of earlier work I did on  \nrtrace to allow for the correct reporting of ray weights in trace  \noutput (the new -oTW option), which I mentioned on radiance-dev a  \nlittle over a month ago.  The benefits of this facility will not  \nreally be felt or known until a third (C-shell script) layer is added  \nfor calculating daylight coefficients and the like.  Right now, the  \nsimplest thing you can do with rtcontrib is arrive at a set of images  \ncorresponding to the different light sources in your scene, such that  \nyou can recombine them with dimming multipliers to simulate lighting  \ncontrols.  An example of this is given in the man page, attached.\n\n\nRtcontrib can also be used by the more adventurous among you to  \ncompute input/output relations for devices such as light pipes and  \nshading systems, although I have yet to test such an approach,  \nmyself.  I expect we'll be learning more about what one can do with  \nthis in the coming months, and I hope to work with Christoph Reinhart  \nand John Mardaljevic on standardizing daylight coefficient  \ncalculations for starters.\n\n\n-Greg\n\n\n\n\n\n\nRTCONTRIB(1)                                                       \nRTCONTRIB(1)\n\n\n\n\n\n\nNAME\n        rtcontrib - compute contributions in a RADIANCE scene\n\n\nSYNOPSIS\n        rtcontrib  [ -n nprocs ][ -e expr ][ -f source ][ -o fspec ] \n[ -b binv ]\n        -m mod ..  [ $EVAR ] [ @file ] [ rtrace options ] octree\n\n\nDESCRIPTION\n        Rtcontrib computes ray contributions  (i.e.,  color   \ncoefficients)  for\n        objects  whose  modifiers  are named in one or more -m  \nsettings.  These\n        modifiers are usually materials associated with light   \nsources  or  sky\n        domes, and must directly modify some geometric primitives to  \nbe consid-\n        ered in the output.  The output of rtcontrib has many   \npotential  uses.\n        Source contributions can be used as components in linear  \ncombination to\n        reproduce any desired variation, e.g., simulating lighting  \ncontrols  or\n        changing  sky  conditions  via  daylight coefficients.  More  \ngenerally,\n        rtcontrib can be used to compute arbitrary  input-output   \nrelationships\n        in  optical  systems,  such  as  luminaires,  light  pipes,  \nand shading\n        devices.\n\n\n        Rtcontrib calls rtrace(1) to calculate the contributions for  \neach input\n        ray,  and the output tallies are sent to one or more files  \naccording to\n        the -o specification.  If an output specification contains a  \n\"%s\"  for-\n        mat,  this will be replaced by the modifier name.  The -b  \noption may be\n        used to further define a \"bin number\" within each object if  \nfiner reso-\n        lution is needed, and this will be applied to a \"%d\" format  \nin the out-\n        put file specification if present.  The actual bin number   \nis  computed\n        at  run  time  based  on  ray  direction  and  surface  \nintersection, as\n        described below.  The most recent -b and -o options to the  \nleft of each\n        -m  setting  affect only that modifier.  (The ordering of  \nother options\n        is unimportant.)\n\n\n        If a -b expression is defined for a particular modifier, the  \nbin number\n        will  be  evaluated  at run time for each ray contribution  \nfrom rtrace.\n        Specifically, each ray's world intersection point will be   \nassigned  to\n        the  variables Px, Py, and Pz, and the normalized ray  \ndirection will be\n        assigned to Dx, Dy, and Dz.  These parameters may be combined  \nwith def-\n        initions given in -e arguments and files read using the -f  \noption.  The\n        computed bin value will be rounded to the nearest whole   \nnumber.   This\n        mechanism  allows the user to define precise regions or  \ndirections they\n        wish to accumulate, such as  the  Tregenza  sky   \ndiscretization,  which\n        would  be  otherwise  impossible to specify as a set of  \nRADIANCE primi-\n        tives.  The rules and predefined functions available for  \nthese  expres-\n        sions are described in the rcalc(1) man page.\n\n\n        If  no  -o  specification is given, results are written on  \nthe standard\n        output in order of modifier (as given on the  command  line)   \nthen  bin\n        number.  Concatenated data is also sent to a lone output file  \n(i.e., an\n        initial -o specification without formatting strings).  If a \"% \ns\" format\n        appears  but  no  \"%d\" in the -o specification, then each  \nmodifier will\n        have its own output file, with multiple values per record in   \nthe  case\n        of  a  non-zero  -b  definition.  If a \"%d\" format appears  \nbut no \"%s\",\n        then each bin will get its own output file, with  modifiers   \noutput  in\n        order  in each record.  For text output, each RGB coefficient  \ntriple is\n        separated by a tab, with a newline at the end of each ray  \nrecord.   For\n        binary  output  formats,  there is no such delimiter to mark  \nthe end of\n        each record.\n\n\n        Input and output format defaults to plain text, where each  \nray's origin\n        and  direction (6 real values) are given on input, and one  \nline is pro-\n        duced per output file per ray.  Alternative data  \nrepresentations may be\n        specified  by  the  -f[io] option, which is described in the  \nrtrace man\n        page along with the associated -x and -y resolution  \nsettings.  In  par-\n        ticular, the color ('c') output data representation together  \nwith posi-\n        tive dimensions for -x and -y will  produce  an   \nuncompressed  RADIANCE\n        picture, suitable for manipulation with pcomb(1) and related  \ntools.\n\n\n        If  the  -n  option  is specified with a value greater than  \n1, multiple\n        rtrace processes will be used to accelerate  computation  on   \na  shared\n        memory  machine.  Note that there is no benefit to using more  \nprocesses\n        than there are local CPUs available to do the work, and  the   \nrtcontrib\n        process itself may use a considerable amount of CPU time.\n\n\n        Options  may be given on the command line and/or read from  \nthe environ-\n        ment and/or read from a file.  A command argument beginning  \nwith a dol-\n        lar  sign  ('$')  is  immediately replaced by the contents of  \nthe given\n        environment variable.  A command argument beginning  with   \nan  at  sign\n        ('@') is immediately replaced by the contents of the given file.\n\n\nEXAMPLES\n        To  compute  the  proportional  contributions  from sources  \nmodified by\n        \"light1\" vs. \"light2\" on a set of illuminance values:\n\n\n          rtcontrib -I+ @render.opt -o c_%s.dat -m light1 -m light2 \\\n         scene.oct < test.dat\n\n\n        To generate a pair of images corresponding to these two  \nlights' contri-\n        butions:\n\n\n          vwrays -ff -x 1024 -y 1024 -vf best.vf | rtcontrib -ffc \\\n         `vwrays -d -x 1024 -y 1024 -vf best.vf` @render.opt \\\n          -o c_%s.pic -m light1 -m light2 scene.oct\n\n\n        These images may then be recombined using the desired outputs  \nof light1\n        and light2:\n\n\n          pcomb  -c  100  90  75  c_light1.pic  -c 50 55 57  \nc_light2.pic \\\n         > combined.pic\n\n\n        To compute an array of illuminance contributions according   \nto  a  Tre-\n        genza sky:\n\n\n          rtcontrib -b tbin -o sky.dat -m skyglow -b 0 -o ground.dat \\\n          -m groundglow @render.opt -f tregenza.cal scene.oct < test.dat\n\n\nAUTHOR\n        Greg Ward\n\n\nSEE ALSO\n        cnt(1), getinfo(1), pcomb(1), pfilt(1), ra_rgbe(1), rcalc(1),  \nrpict(1),\n        rtrace(1), vwrays(1), ximage(1)\n\n\n\n\n\n\nRADIANCE                            5/25/05                        \nRTCONTRIB(1)\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2005-May/002710.html).</sup>", "id": "radiance-general_002710", "created_by": "Greg_Ward"}