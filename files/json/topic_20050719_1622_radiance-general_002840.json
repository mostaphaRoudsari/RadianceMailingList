{"topic": "image filtering", "category": "radiance-general", "attachments": [], "created_by_name": "Jelle Feringa", "created_at": "July 19, 2005 at 04:22PM", "body": "Hi all,\n\n\n\n\n\n\nCurrently I'm working on a booklet showing my Radiance work.\n\n\nAlso some of the technicalities of Radiance are discussed.\n\n\nI have to agree with what 'Rendering with Radiance' states on this topic;\nits hard to explain precisely what makes Radiance fundamentally different\nfrom other rendering solutions. Call me a pretentious prick, but I find it\neffective in communicating Radiance' value to consider an image a virtual\nprototype rather than just a rendering. To get this point across, its\nimportant to show a potential client the different levels of significance a\nRadiance rendering has. It all comes down to filtering in the end.\n\n\nI think its important to explain how a pcond -h image differs from a\nnon-filtered image (well, pfilt) \n\n\n\n\n\n\nI'm trying to sum up the different levels of information one can extract\nfrom a single Radiance image using:\n\n\n\n\n\n\nPcond,\n\n\nGlare,\n\n\nFalsecolor (nits, Dayfact, lux)\n\n\n\n\n\n\nWhich is basically what one can expect from someone who has reasonable\ncontrol over Radiance.\n\n\nOf course, there's lots of more ways of extracting different levels of\ninformation from Radiance / a Radiance image.\n\n\nSpeaking for myself, I have been messing around piping rtrace intersections\nto a .dxf file, showing a beautiful diagram of the way Radiance is computing\nits light interactions. But I'm not that funky with image filtering. \n\n\n\n\n\n\nAny suggestions of interesting / original ways of extracting information of\na Radiance image?\n\n\n\n\n\n\n\n\n\n\nCheers,\n\n\n\n\n\n\nJelle.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2005-July/002840.html).</sup>", "id": "radiance-general_002840", "created_by": "Jelle_Feringa"}