{"topic": "Linux,multi-cpu,NFS,Mosix,PVM,MPI", "category": "radiance-general", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "November 23, 2005 at 12:10AM", "body": "Dear Nick,\n\n\nfollowing your question about Radiance on multi-cpu systems:\nYou've probably found the many postings on radiance-online (search for \n'mosix' or 'parallel'). My two-cent thoughts on this from my experiences \nover the years at an institute (50 Linux machines) and at my office (6 \nmachines):\n\n\n    * Having the CPUs on one board is a lot easier than over the network\n      dual Pentium or AMDs are easy to get and relatively cheap, quad\n      boards are a bit more expensive, but might be worth it if you're\n      really digging into it.\n      Sharing the scene and ambient data in RAM is build into rpict\n      (rather crude and simple, but it works). Both animations and large\n      images use the CPUs in parallel. Parametric studies with different\n      octrees require multiple copies of the geometry, of course, but I\n      haven't found a scene which is limited by RAM yet (typically other\n      limits like ambient rendering times, function files, etc. limit\n      rendering before that).\n      With a few GB of RAM, RAID-1 or RAID-5 disks, a dual power supply\n      and an UPS,  the machine constitutes a reliable and fast\n      production system.\n    * Distributing over the network via NFS works too\n      http://www.ise.fhg.de/alt-aber-aktiv/radiance/animation/ shows an\n      animation from my Fhg-ISE days and was rendered on the 50 or so\n      Linux machines we had at that time. They shared all data via NFS,\n      which works, contrary to an apparent common subliminal feeling.\n      (well, you have to use nfs-3 and the kernel NFS server on Linux to\n      get file locking, which is essential for the sharing of ambient\n      data). Distribution across the machines was done by a small but\n      effective and failsafe job distribution system I wrote.\n      We had tried Open-Mosix, but never used it for productions. The\n      main drawback in my view is that the process 'swims' between\n      non-homogeneous machines and this adds an extra layer to keep\n      track of. E.g. rpict's logfile will not tell where the process has\n      run or is running. In case some machine has faulty hardware it\n      gets increasingly hard to track, and that's not really what one\n      wants or needs when rendering a few thousand images under time\n      constraints. Your mileage may vary, maybe folks out there do use\n      Mosix happily for production now.\n    * PVM (parallel virtual machine) is a library and system to\n      distributed parts of a program across machines (MPI, message\n      parsing interface is similar, with different concepts). It\n      requires modifying the source (as far as I recall from the times\n      when porting to LBNL's Cray-T3 had been a pending idea). Carsten\n      Bauer ported Radiance to PVM and others checked out MPI/PVM as\n      early as 1997 (see\n      http://radsite.lbl.gov/radiance/pub/digest/no_Z/v3n2 and seach for\n      PVM).\n      If anyone uses an MPI/PVM enhanced Radiance for commercial or\n      research grade production I (and others) would be delighted and\n      enlighted to hear about.\n\n\nopen to all new facts and insights-\ncheers\nPeter\n\n\n\n\n pab-opto, Freiburg, Germany, http://www.pab-opto.de\n [see web page to check digital email signature]\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2005-November/003084.html).</sup>", "id": "radiance-general_003084", "created_by": "Peter_Apian-Bennewitz"}