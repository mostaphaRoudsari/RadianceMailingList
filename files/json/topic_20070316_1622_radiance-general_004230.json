{"topic": "Radiance-general Digest, Vol 37, Issue 7", "category": "radiance-general", "attachments": [], "created_by_name": "Jelle Feringa", "created_at": "March 16, 2007 at 04:22PM", "body": "Hi Martin,\n\n\nI agree with Francesco, (t)vtk is a good option, there is a powerful surface\nreconstruction method.\nhttps://svn.enthought.com/enthought/wiki/*TVTK*\nSomething else you might want to look into is cgal's alpha-shapes.\nIf you allow me for yet-another-python-plug:\nhttp://cgal-python.gforge.inria.fr/\nimplements this functionality:\nhttp://www.cgal.org/Manual/3.2/doc_html/cgal_manual/Alpha_shapes_3/Chapter_main.html\n\n\nHere's a tvtk snippet that might of some use:\n\n\n\n\n\n\nimport random\nfrom pickle import loads\nfrom pprint import pprint\nfrom enthought.pyface import GUI\n\n\nimport numpy as np\nimport scipy as sp\n\n\nfrom enthought.tvtk.tools import ivtk\nfrom enthought.tvtk.api import tvtk\nfrom enthought.pyface.tvtk import actors\n\n\ngui = GUI()\nwindow = ivtk.IVTKWithCrustAndBrowser(size=(800,600))  # Size is optional.\nwindow.open()\n\n\n# note that this data is generated with ALL rtrace output flags enabled!\nf =\nopen('E:\\\\EZCT\\\\EZCT___projects\\\\Seroussi_House\\\\01_Correspondance\\\\send_program_to_marc\\\\rtrace_values.pickle')\nrtrace_values = loads(f.read())\n\n\nradiance_origin     = rtrace_values[:,:3]\nradiance_direction  = rtrace_values[:,3:6]\nradiance_value      = rtrace_values[:,6:9]\nradiance_value      = ((radiance_value * sp.array((0.265, 0.670,\n0.065),'f'))*110.)/3683.\n# -> Lux conversion\nradiance_vec_length = rtrace_values[:,9:10]\n\n\n\n\nradPts  = tvtk.Points(data=radiance_origin)\nradPoly = tvtk.PolyData(points=radPts)\nradPoly.point_data.vectors = radiance_direction\nradPoly.point_data.scalars = radiance_value\n\n\nreducedRadPts = tvtk.MaskPoints(input=radPoly, on_ratio=10)\nreducedRadPts.output.point_data.vectors = radiance_direction\nreducedRadPts.output.point_data.scalars = radiance_value\n\n\n\n\n\n\nthresh  = tvtk.ThresholdPoints(input=radPoly)\nthresh.threshold_between(radiance_value.mean(), radiance_value.max())\n\n\nugrid = tvtk.UnstructuredGrid(points=radPts)\n\n\n\n\n\n\n#srf         = tvtk.ContourFilter(input=thresh.output)\n\n\n\n\nsrf     = tvtk.SurfaceReconstructionFilter(input=thresh.output)\n\n\n\n\ncf = tvtk.ContourFilter(input=srf.output)\ncf.set_value(0, 0.0)\n\n\nsrfMap  = tvtk.PolyDataMapper(input=cf.output)\nsrfProp = tvtk.Property(representation='s')\nsrfActor= tvtk.Actor(mapper=srfMap, property=srfProp)\nwindow.scene.add_actor(srfActor)\n\n\n\n\n\n\nfrom here use window.scene.(save_obj?) to export the reconstructed surface\nto a polygon file.\n\n\nBy the way, are you still working on top-down-lighting design approaches\nMartin?\nVery inspiring research!\n\n\n-jelle\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2007-March/004230.html).</sup>", "id": "radiance-general_004230", "created_by": "Jelle_Feringa"}