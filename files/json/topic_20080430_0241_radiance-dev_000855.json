{"topic": "time needed for octree reading (was setting buffer size on octree reads (setvbuf) )", "category": "radiance-dev", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "April 30, 2008 at 02:41AM", "body": "Hi all,\n\n\nThe observed slow reading of frozen octrees happens if and only if:\n- the geometric object (polygons in this case) each have their own, \ndifferent modifier. This is probably rare, but  may happen if each \npolygon uses a texfunc to interpolate the normal.\n- each of these modifiers have a unique name\nIt is only relevant if there are millions of such objects (e.g. \ntessellated surfaces imported from CAD).\n\n\nThen the octree reading spends 96% of its time in otndx() (readoct.c), \nwhich handles a hash table. I would *guess* (not be field of expertise \nanyway) that the hash algorithm is slow under these extreme \ncircumstances, since these unique modifier names are only inserted, but \nnever ever re-used. Effectively this exotic scenario screws up the idea \nof having a hash table.\n\n\nThe solution (thanks Greg) was to use a modifier name for the texfunc \nthat applies to all polygons with the same material, although each \ntexfunc is different. This works since the texfunc is specified just \nprior to its polygon.\nThe decrease in loading time is noticeable: 18 versus 148 seconds for \n320MB of frozen octrees.\n\n\nIt is worth to note that, in a wider context and from a different \nperspective, this specific use of texfunc/polygons might be better \nserved with the Radiance mesh primitive, resulting in less file and \nmemory use and with faster reading and rendering.\n\n\nAs a general hint, reading of non-frozen octrees may be slower. Use of \nfrozen octrees is recommended for speed (by Greg).\n\n\nRegarding my suggestion to increase the stream buffer size for octree \nreadings: The above timings use a 2MB buffer. Likely the 4k standard \nbuffer size doesn't matter much for local discs, although I'm inclined \nto stick with the 2MB, because of the reduced. number of system calls. \nIt may have a larger influence on NFS mounts, depending on the mount \noptions. The only reason not to change the source is that *any* \nnon-urgent change may introduce unforeseen side effects on some systems. \nEven if setvbuf seems to be a pretty much standardized call.\n\n\nThanks to Greg and the gprof profiler\n\n\ncheers\nPeter\n\n\n\n\n pab-opto, Freiburg, Germany, http://www.pab-opto.de\n [see web page to check digital email signature]\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2008-April/000855.html).</sup>", "id": "radiance-dev_000855", "created_by": "Peter_Apian-Bennewitz"}