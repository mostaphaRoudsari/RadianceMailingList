{"topic": "proposal: switching executables from within rad?", "category": "radiance-dev", "attachments": [], "created_by_name": "Lars O. Grobe", "created_at": "December 17, 2008 at 07:27PM", "body": "Hi folks,\n\n\nthis is something that was first proposed by Carsten in his Radzilla \ndocumentation:\n\n\n\"'radz' has one additonal option: you can set the name of the executable \nto call. This is very helpful in case you have several RADIANCE versions \nin parallel. The option name is '-x', example:\n\n\n$> radz -x rzvu -o x11 test.oct /or/\n$> radz -x rpict_xyz25_b test.oct /or whatever/...\n\n\nIf -x is not set, the RADZILLA execs will be run (either 'rzpict' or \n'rzvu', dependent on the additional setting of -o x11).\"\n\n\nObviously noone ever cared about it later. Still, I think it may be \nuseful, so I try to describe...\n\n\nRadzilla provides a radz-tool, compareable to rad, which controls the \nrendering and filtering processes. As Radzilla heavily depends on \nRadiance, Carsten spent some time on integrating both, and one thing he \ndid was adding an x-option to radz, which specifies the renderer to use.\n\n\nE.g. radz -x rpict will use rpict, radz -x rzpict would run rzpict, radz \n-x rvu would open the preview.\n\n\nI think this is a very elegant solution, even better then using the -o \ndevices, as it allows e.g. combining binaries from different releases, \nor alternative projects such as radzilla, or patched tools, and still \ncontrol all by rad without a need of symlinks, PATHs and so on.\n\n\nWhile I like the solution in Radzilla, I guess it would become even \nbetter if these options would not be set as a command line option, but \neither as a optional variable in the rif-file or as an environment \nvariable. I would also propose this to be a general mechanism for all \ntools that are called from inside rad. So my proposal would add optional \nxrpict, xmkillum, xoconv, xrvu, ... variables, which by default would be \nthe radiance distribution's (that rad came witch) binaries, overwritten \nby environment variables, overridden by rif-file variables.\n\n\nSo... I could use all filters e.g. from the most recent radiance \nrelease, and combine with a pmap-extended rpict. Or I could run my \nrenderings using radiance's rad, and by setting  an environment variable \nxrpict=rzpict could re-run all using rzpict to compare.\n\n\nThe reason I would like to have this is that I am currently processing \nthe same scene, views using radiance classic, and older radiance+pmap \nand radzilla. I could go with scripts setting PATHs, doing symlinks and \nall that - but this is errorprone and not very transparent. I also think \nthat these variables would be both helpful for folks having different \nradiance-releases installed (but only on is called from the PATH) or for \ndebugging and development. So what do you think, would this be a \nreasonable addition to the already crowded rad-world of options and \nvariables?\n\n\nCU Lars.\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2008-December/000959.html).</sup>", "id": "radiance-dev_000959", "created_by": "Lars_O._Grobe"}