{"topic": "Compiling from source on Windows platforms", "category": "radiance-dev", "attachments": [], "created_by_name": "Pally Sandher", "created_at": "September 06, 2012 at 09:10AM", "body": "As http://radiance-online.org/download-install/installation-information/windows-installation.html has nothing other than a placeholder for a link and neither does http://openstudio.nrel.gov/getting-started-developer/getting-started-radiance I thought I'd post my experience with this now that I've had some time to give it a go.\n\n\nBuilding a project which implements CMake on Windows is usually quite straightforward but this ultimately depends on the project being built. Thankfully Radiance isn't much of an exception to this.\n\n\nStuff you'll need:\n1 - A Windows system (obviously). I used Windows 7 x64.\n2 - A compiler (obviously). I used Visual Studio 2010 SP1 but the steps should be similar for Visual Studio 2008. minGW will likely require extra hoops as it doesn't have an IDE to simplify the build process.\n3 - CMake (obviously). I used CMake 2.8.9 since it's the latest release as of 9th August -> http://www.cmake.org/cmake/resources/software.html \n4 - The Radiance source including CMake files. Easiest way to get these is to go to http://public.kitware.com/gitweb?p=radiance.git;a=tree & click the \"snapshot\" link in the top left corner to download a .tar.gz archive. The 4.1 release of the source doesn't have any of the CMake files so you have to use the latest from the repository until an official 4.2 is released.\n5 - Qt libraries. These can either be installed using the pre-built packages or built from source, all of which are available from http://qt.nokia.com/downloads. I had built the Qt v4.8.2 libraries from source previously so used that.\n6 - Tiff library for Windows. Again this can either be installed using a pre-built package or built from source. You can find this at http://gnuwin32.sourceforge.net/packages/tiff.htm I used the pre-built package as the sources are configured to be built with Visual Studio 6 & wasn't in the mood to update it just to build a .lib file.\n\n\nYou should then be able to load up CMake, point it at the root of the Radiance source tree, give it a build directory (I suggest something like \"build\" inside the extracted source directory to keep things together) & click Configure. Assuming no errors, you should then be able to click Generate & you'll get a load of projects & solutions built. You can then open the solution and build the projects. It will output the files to <build directory>\\bin\\Release or <build directory>\\bin\\Debug\\\n\n\nAt this point I suggest you download the zip archive of binaries and library files from https://openstudio.nrel.gov/getting-started-developer/getting-started-radiance as you only have a load of binaries which is great but you'll be missing crucial library files so you can't really do anything with your binaries (and no manuals either).\n\n\nA few issues I have with the above are as follows:\n1 - Qt and libtiff are *required* for CMake to generate a build source. They should be optional & when not available the relevant projects which require them (rvu, ra_tiff etc) should be omitted from the generated source. Zlib can be omitted without issue (not sure which project uses it though).\n\n\n2 - CMake generates projects using Absolute paths rather than Relative paths. Major failure point as this requires manual updating of over 100 projects with a minimum of 5 paths per project if you wish to fix this otherwise you must replicate the file structure on every machine you want to use the CMake generated build source. All other projects I've used which implement CMake will give you the option of using relative paths if you so wish.\n\n\n3 - falsecolor , genBSDF, genklemsamp, genskyvec & objview don't exist in the CMake build source. I assume this is due to them being Perl & Ruby scripts in the NREL binaries archive (falsecolor appears to have C source code available?)\n\n\n4 - manuals are in unix man/postscript format which unsurprisingly isn't widely supported on Windows. Should preferably be Compiled HTML Help (.chm) or at the very least converted to HTML or PDF to make them more readable.\n\n\n5 - Radiance source is littered with the now defunct Scons build files. Not a massive issue but they should probably be cleaned out since they're no longer relevant.\n\n\n6 - Building using Shared libraries doesn't work. Code is generated but attempting to build generates loads of linker errors. Again not a massive issue since static builds work fine & the compiled binaries are small enough that they're unlikely to save much anyway but I thought I should mention it.\n\n\n7 - 2107 warnings during build. Some of these may be due to me using VS 2010 while NREL use VS 2008 however but even still it's rather high for such a small code base. \n\n\n\n\nThat's it so far. I have to say it's a giant leap from the old decrepit Scons system. Building now takes minutes once you've downloaded the code rather than hours (and actually works 'out of the box' without requiring a load of manual tweaking).\n\n\nPalbinder Sandher \nSoftware Platform Engineer \nT: +44 (0) 141 945 8500\nF: +44 (0) 141 945 8501\nhttp://www.iesve.com \n\n\n**Design, Simulate + Innovate with the <Virtual Environment>** \nIntegrated Environmental Solutions Limited. Registered in Scotland No. SC151456\nRegistered Office - Helix Building, West Of Scotland Science Park, Glasgow G20 0SP\nEmail Disclaimer\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2012-September/001242.html).</sup>", "id": "radiance-dev_001242", "created_by": "Pally_Sandher"}