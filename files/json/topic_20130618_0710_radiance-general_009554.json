{"topic": "Radiosity method implementation on Radiance", "category": "radiance-general", "attachments": [], "created_by_name": "Germ\u00e1n Molina Larrain", "created_at": "June 18, 2013 at 07:10AM", "body": "Dear everyone,\n\n\nI am thinking on implementing a hybrid methodology between Radiosity method\nand Ray-tracing, for accelerating some calculations (by giving up accuracy,\nmaybe)\n\n\nAs everyone here knows, Radiance ray-tracing works awesome; however, I\ncould not find anything related to any Radiosity implementation.\n\n\nI think I can make algorythms to subdivide polygons into meshes, however,\nwhat I do not know how to do is:\n\n\n*1.- Calculation of View (Form) Factors:* I guess a straitforward way is to\ncalculate them by randomly sending rays from one surface to the rest of\nthem, but I do not know how to do that (or use octrees). (k/N would be the\nview factor Fij... where k is the number of rays that falled into j from i,\nand N the total number of rays sent)\n\n\n*2.- Render:* After I have the Radiosities of every polygon. How can I make\na render? I guess I can use *vwrays *somehow, but I am not sure how to\ncheck which polygon am I \"seeing\", in order to use the calculated values.\n\n\nAny information is useful,\n\n\nTHANKS\n\n\nGerman\n\n\nPS: I know people here might like Ray-tracing more than anything else, but\nstill... This implementation might help\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2013-June/009554.html).</sup>", "id": "radiance-general_009554", "created_by": "Germ\u00e1n_Molina_Larrain"}