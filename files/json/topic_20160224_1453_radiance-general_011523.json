{"topic": "Revit to Radiance proof of concept", "category": "radiance-general", "attachments": [], "created_by_name": "Georg Mischler", "created_at": "February 24, 2016 at 02:53PM", "body": "Hi all,\n\n\nI have recently had access to a Revit installation and decided to \nexperiment\na bit with its API. The resulting Python file is attached for anyone to \ntry.\nI consider this a proof of concept implementation at the moment. There \nare many\nrough edges, and lots of features missing that would be expected in a \nfull blown\ntranslator. It has been tested on the sample files supplied with Revit, \nbut not\non any other files.\n\n\nI may or may not have access to Revit in the coming months, so this is \nwhat\nyou get for now...\n\n\n\n\nTechnical considerations\n\n\nRevit doesn't have the same geometry primitives as Radiance, but\nuses B-Rep geometry in winged edge representation.\nSurface elements don't close in on themselfes. This eliminates\nambiguous positioning issues for the software. For an exporter,\nit means that eg. a cylinder is not one surface, but typically\ncomposed of two half-cylinders. A circle consists of two half\narcs, etc.\nRecognizing simple volume types requires analyzing and reassembling\nseveral surface elements. This only seems to make sense for\ncircles/rings and cylinders (cones?) which are sufficiently easy.\n\n\n\n\nWorking features:\n\n\n* Exports all geometry visible in the active 3D view (minus RPCs)\n* Seperate function for exporting topography meshes.\n* cylinders and circles/rings as Radiance primitives.\n* Planar faces as polygons (including holes)\n* All other surfaces tesselated into triangles (rectangles for\n   partial cylinders.\n* Names based on level and leaf node family name (type name for\n   non-family types) and material\n* Metric or imperial export (configured in code)\n\n\n\n\nTo do\n\n\n* Turn into an external add-in\n* Export RPCs in some way\n* Export regions (parts of a surface using different color/material)\n* Alternative primitive naming options (substitution lists?)\n* Possibly split up the output into several files (eg. by level?)\n* Detect cones (are those always coaxial in Revit?)\n* Export unmodified (other than positioning/scaling) Family instances\n   as seperate objects to be included via replmarks.\n* Export (sufficiently large) meshes as Radiance meshes\n* Export normals with curved surfaces for smoothing\n* Export material properties in addition to the names\n* Export light sources\n* Export views\n* Maybe export elements via selection instead of a complete view\n* Dialog box to configure output interactively\n* others?\n\n\n\n\nIssues to research\n\n\n* It's not always easily possible to figure out on which level a certain\n   element resides (assuming they are associated with a level at all).\n* Small objects with fine detail may result in many zero-area polygons.\n* Installing an export function as a macro is clumsy. There may be a way \nto create\n   an external installable via the Revit Python Shell.\n\n\n\n\nInstallation\n\n\nDue to my lazyness, I created the exporter as an \"Application Macro\".\nNot sure if it can be installed as an external add-on without changes to \nthe code.\nTo install as a macro, select the \"Manage\" tab, click on \"Macros\".\nSelect the \"Application\" tab in the opening dialog, and press \"Create \nModule\".\nGive your new application a name, chose \"Python\" as a language and press \n\"Ok\".\nThe SharpDevelop IDE should open with a new project containing \nboilerplate\ncode. Replace that with the contents of my file and press F8 to compile.\n\n\nNow open the \"Macros\" dialog again, and your Module will have sprouted \ntwo macros\nnamed \"ExportToRadiance\" and \"ExportTopoToRadiance\". Select one of those \nand\npress \"Run\" (only works if the current view is a 3D-view).\n\n\n\n\nConfiguration\n\n\nCurrently all relevant configuration happens in the code, near the top \nof\nthe file. Configuration options are:\n\n\n* Metric or Imperial\n* Output file name (default: \"revout.rad\" on your desktop)\n* Output file name for topography (default: \"revout_topo.rad\" on your \ndesktop)\n\n\n\n\nThe attached jpg is from one of the Revit samples. The scene file is \naround 50MB.\nIronically, just in this example, the Brown chair at left shows some \nmissing\nfaces at the front of the armrest... Not sure if this is my fault or \nRevit's.\n\n\nAnyone who wants to try improving and extending RRadout, just go ahead \nand share your\nresults. Depending on the feedback, I may create a Github project.\n\n\n\n\nHave fun!\n\n\n-schorsch\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2016-February/011523.html).</sup>", "id": "radiance-general_011523", "created_by": "Georg_Mischler"}