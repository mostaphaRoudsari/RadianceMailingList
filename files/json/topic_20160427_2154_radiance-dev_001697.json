{"topic": "Radiance and Open-Gl [Was: Radiance-dev Glrad on Linux]", "category": "radiance-dev", "attachments": [], "created_by_name": "Peter Apian-Bennewitz", "created_at": "April 27, 2016 at 09:54PM", "body": "Hi folks,\n\n\nbefore you get all carried away with Xlib events for mouse scroll , - and to add \nsome thoughts on the rediscovery of glrad:\n\n\nRshow, http://www.pab-opto.de/progs/rshow/ , the current Open-Gl version of my \n1993 rshow on the then Iris-Gl, is still existing. Comes with GUI and some extra \nfeatures, like generating image mapping, data display, grid generation, \nraytracing and multiple windows. Not much advertising for it over the years \n(except this one, also see 1998 paper on rshow), it is still in daily use here \nand at Fraunhofer ISE. (Note to LBNL: ISE is /not/ IBP, in case you shift all \ncredit to IBP again).\n\n\nLessons learned:\nThe core problem with Open-Gl display in practice seems complexity. E.g.: Being \ninside a cabin with a forest outside doesn't matter for raytracing speed, but it \ndoes for plain Open-Gl, since it tries to draw all trees outside, visible or \nnot. Today\u2019s entry graphic cards have more power then a 1995 SGI Onyx2 , yes, \nbut scenes have become more complex too, so brute force works only so much.\nRshow has a commandline option to ignore geometry below a certain size, so that \nallow interactive navigation with smooth, tessellated CAD surfaces, but it is a \nrather amateurish solution. Its Tcl/Tk GUI is a bit dated too, although, Tcl/Tk \nlibraries are still supported by Debian and others. Apart from all this, I had \nnot a single project in the last 20 years where rshow was not used, - \"works for \nme\".\n\n\nThere's at least one other Radiance geometry renderer out there, written by \nAndreas Gerber, based on some graphics library, but I don't further details at hand.\nAnd one of the nicest Open-GL renderers had been the one in \"Ecotect\", - before \nit disappeared in the garbage bin of Autodesk.\n\n\nActually, I would have a look at the rendering engines available for some games \nif I were to start a very fast hardware Radiance-previewer from scratch today. \nThey probably solved the Level-of-detail problem neatly. The drawback is, of \ncourse, the dependency on their feature library.\n\n\ncheers\nPeter\n\n\nOn 04/28/16 05:17, Douglas L Reeder wrote:\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2016-April/001697.html).</sup>", "id": "radiance-dev_001697", "created_by": "Peter_Apian-Bennewitz"}