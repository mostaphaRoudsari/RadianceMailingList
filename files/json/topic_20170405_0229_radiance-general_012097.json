{"topic": "epw2wea and how it processes EPW field 'Number of Records per hour'", "category": "radiance-general", "attachments": [], "created_by_name": "Philip Schwarz", "created_at": "April 05, 2017 at 02:29AM", "body": "Hello all,\n\n\nIn the EPW data dictionary documentation (http://bigladdersoftware.com/\nepx/docs/8-3/auxiliary-programs/energyplus-weather-file-epw-\ndata-dictionary.html), I see the following:\n\n\n\n\nDATA PERIODS,\nN1, \\field Number Number of Data Periods\nN2, \\field Number of Records per hour\n...\nA weather file may contain several \u201cdata periods\u201d though this is not\nrequired (and, in fact, may be detrimental). In addition, *a weather file\nmay contain multiple records per hour* BUT these must match the Number of\nTime Steps In Hour for the simulation.\n\n\n\n\n\n\nIf I look at the program that converts EPW files to WEA files (\nhttp://www.radiance-online.org/cgi-bin/viewcvs.cgi/ray/src/cv/epw2wea.c),\nIt seems to make use of the  'Records per hour' field. I see that the code\nhas a 'minute' variable that it initialises to 60, and it also has the\nfollowing chunk of logic that manipulates the minute variable:\n\n\n\tfprintf(WEA_FILE,\"site_elevation %s\\nweather_data_file_units 1\\n\",elevation);\n\n\n\tfscanf(EPW_FILE,\"%*[^\\n]\");fscanf(EPW_FILE,\"%*[\\n\\r]\");\n\tfscanf(EPW_FILE,\"%*[^\\n]\");fscanf(EPW_FILE,\"%*[\\n\\r]\");\n\tfscanf(EPW_FILE,\"%*[^\\n]\");fscanf(EPW_FILE,\"%*[\\n\\r]\");\n\tfscanf(EPW_FILE,\"%*[^\\n]\");fscanf(EPW_FILE,\"%*[\\n\\r]\");\n\tfscanf(EPW_FILE,\"%*[^\\n]\");fscanf(EPW_FILE,\"%*[\\n\\r]\");\n\tfscanf(EPW_FILE,\"%*[^\\n]\");fscanf(EPW_FILE,\"%*[\\n\\r]\");\n\tfscanf(EPW_FILE,\"%*[^\\n]\");fscanf(EPW_FILE,\"%*[\\n\\r]\");\n\n\n\t/* read in time step interval */\n\tfscanf(EPW_FILE,\"%[^,]s\",keyword);\n\tfscanf(EPW_FILE,\",%[^,]s\",keyword);\n\tfscanf(EPW_FILE,\",%[^,]s\",minute_string);\n\tminute=atoi(minute_string);\n\tif(minute==1)   /* one measurement per hour equals a 60 minute time step */\n\t\tminute=60;\n\tfscanf(EPW_FILE,\"%*[^\\n]\");fscanf(EPW_FILE,\"%*[\\n\\r]\");\n\n\n\twhile( EOF != fscanf(EPW_FILE,\"%d,%d,%d,%d\",&year,&month,&day, &hour_in)){\n\n\n\t\tfprintf(WEA_FILE,\"%d %d %.3f \",month,day,hour_in*1.0-minute*(0.5/60));\n\n\n\n\nIf we look at a sample EPW file, e.g. https://energyplus.net/we\nather-location/north_and_central_america_wmo_region_4/USA/\nNY/USA_NY_New.York-LaGuardia.AP.725030_TMY3,\n\n\n\n\nLOCATION,New York Central Prk Obs Belv,NY,USA,TMY3,725033,40.78,\n-73.97,-5.0,40.0\nDESIGN CONDITIONS,0\nTYPICAL/EXTREME PERIODS,6,Summer - Week Nearest Max Temperature For\nPeriod,Extreme,7/17,7/23,Summer - Week Nearest Average Temperature For\nPeriod,Typical,6/ 5,6/11,Winter - Week Nearest Min Temperature For\nPeriod,Extreme,1/18,1/24,Winter - Week Nearest Average Temperature For\nPeriod,Typical,11/22,11/28,Autumn - Week Nearest Average Temperature For\nPeriod,Typical,9/26,10/ 2,Spring - Week Nearest Average Temperature For\nPeriod,Typical,3/29,4/ 4\nGROUND TEMPERATURES,3,.5,,,,1.45,0.37,2.28,5.28,13.13,19.19,23.27,\n24.51,22.40,17.69,11.41,5.58,2,,,,5.43,3.50,3.89,5.49,10.\n74,15.48,19.28,21.32,20.88,18.22,13.89,9.30,4,,,,8.72,6.74,\n6.31,6.91,9.88,13.08,16.01,18.05,18.53,17.37,14.83,11.72\nHOLIDAYS/DAYLIGHT SAVINGS,No,0,0,0\nCOMMENTS 1,Custom/User Format -- WMO#725033; NREL TMY Data Set (2008);\nPeriod of Record 1973-2005 (Generally)\nCOMMENTS 2, -- Ground temps produced with a standard soil diffusivity of\n2.3225760E-03 {m**2/day}\nDATA PERIODS,1,1,Data,Sunday, 1/ 1,12/31\n1976,1,1,1,0,?9?9?9?9E0?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9*9*9*9*\n9*9,2.2,-1.1,79,100400,0,0,295,0,0,0,0,0,0,0,40,9.3,10,10,\n14.5,1070,9,999999999,100,0.0840,0,88,999.000,999.0,99.0\n...\n\n\n\n\nthen it seems to me that the chunk of logic is targeted at the 'Records per\nhour' field. When execution reaches the logic chunk, the program has just\nfinished processing line 1 of the data,\n\n\nLOCATION,New York Central Prk Obs Belv,NY,USA,TMY3,725033,40.78,\n-73.97,-5.0,40.0\n\n\nso it skips seven lines and gets to the following:\n\n\nDATA PERIODS,1,1,Data,Sunday, 1/ 1,12/31\n\n\nIt then skips 'DATA PERIODS' and the first '1' and reads the second '1'\ninto the minute variable. It then looks at the value in the minute\nvariable, and if it is one, it overwrites that value with 60.\n(Why overwrite in with 60 if it was already initialised to 60?)\nI then goes into a loop in which it repeatedly\n* reads in year, month, day and hour_in\n* writes out to the WEA file the month, day and hour_in, but in doing so,\nit adjusts hour_in based on the content of the minute variable:\nhour_in*1.0-minute*(0.5/60).\nIt looks like it is adjusting say 9 (9AM) to 8.30 when minute=60 and\nleaving 9 alone when minute=0.\n\n\nCan someone please explain why the code is doing that?\nWhy does it set the value of the minute variable if the 'Records per hour'\nfield is 1, but not if it is other values? What other values can it be? 0,\n2, 3, 15, 30, 60, other?\n\n\nThank you in advance for your help,\n\n\nPhilip Schwarz\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-general/2017-April/012097.html).</sup>", "id": "radiance-general_012097", "created_by": "Philip_Schwarz"}