{"topic": "Setting up a local ambient file within ray_calls library", "category": "radiance-dev", "attachments": [], "created_by_name": "Germ\u00e1n Molina Larrain", "created_at": "December 12, 2017 at 07:29AM", "body": "Hello Greg and everyone else,\n\n\nI am working with the raycalls library (src/rt/raycalls.c file) in Radiance\nin order to execute lighting simulation internally in a C++ program. I have\nmanaged to trace rays (validation remains to be performed), and I have to\nsay that the library is pretty awesome. What I am doing is:\n\n\n// Expose the provided options to global variables\n    options->exposeOptions();\n\n\n// set the ambient file\n    ambfile = &amb[0];\n\n\n// save the parameters\n    RAYPARAMS rp;\n    ray_save(&rp);\n\n\n// set up Radiance\n    ray_init(&octname[0]);\n// calculate\n    rayorigin(&(*rays)[i], PRIMARY, NULL, NULL);\n\n\n\n\n\n\nHowever, I have one doubt: I would like to run several processes at the\nsame time, using ambient cache; but the char * ambfile is a global\nvariable, so I would need to use the same ambient file for all processes\n(which is not what I want). How crazy is it to call  ray_init with a local\nambient file? Does that just destroy Radiance basic functioning? It already\nuses a local octree... that is why I think could be possible. I was going\nto try this myself, but I am affraid to mess with the core Radiance code;\nso I'd rather ask first.\n\n\nBest,\n\n\nGerm\u00e1n\n___\n<sup>Automatically generated content from [radiance mailing-list](https://radiance-online.org/pipermail/radiance-dev/2017-December/001728.html).</sup>", "id": "radiance-dev_001728", "created_by": "Germ\u00e1n_Molina_Larrain"}