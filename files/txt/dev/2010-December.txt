From bernd at bzed.de  Wed Dec  1 02:31:06 2010
From: bernd at bzed.de (Bernd Zeimetz)
Date: Wed Dec  1 02:31:03 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <53E06D79-F37F-44AC-B9DD-95436E0AFB4C@gmail.com>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>	<22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>	<20101129.9514700.2026204402@gyor.oxdrove.co.uk>	<506FE4FB-2366-4BCF-AAF3-7AEB53685A5B@gmail.com>	<20101129.19493700.3603303133@gyor.oxdrove.co.uk>	<22042040-D1CA-47FB-AD94-7AE641C7605E@gmail.com>	<4CF4C894.1000300@bzed.de>
	<53E06D79-F37F-44AC-B9DD-95436E0AFB4C@gmail.com>
Message-ID: <4CF623EA.5070809@bzed.de>

Hi Greg!

> Most of the hassle with putting together a new release can be resolved with website changes we're planning for next year.  Right now, we have depositories in a few different places, automatic updates that sort-of work most of the time, and documentation that is spread all over the place.  It's really more a matter of organization and putting others in charge than it is one of CVS and the way that works.
> 
> To give you an idea, posting a new release involves:
> 
> 1) Putting together the latest source and creating a version in CVS (this is the easy part).

> 2) Updating documentation with new release information (easy to forget things, and I do).

A lot of software projects fix this by writing proper commit messages and then
dump the commit messages for a release and probably just reformat and fix them.
Obviously that requires to have one useful commit instead of a ton of tiny ones.
These things are easy with distributed RCSs - you just create a topic branch,
hack and then merge it into one useful commit and apply that to your master branch.

> 3) Gathering the auxiliary data files together (easy to miss things here as well).

What about keeping them in a revision control system?


> 4) Making source-only, overlay, and combined tar balls (simple, but I've still screwed this up in the past).

This is something which could be done automatically with make and friends. Once
defined properly, it should be easier to do and harder to forget things.
Also - looking at 3) there are tools like mr which allow to work with several
independent repositories and merge them.


> 5) Checking compile and building for the few supported systems (sometimes days of delay and looping back to step 1).

If it would be easier to create a new release, you could release a -RC version
and wait for feedback. So finding a fast way to create releases would fix that
point for large parts.

> 6) Uploading release to website locations and relinking everything, while archiving the old stuff (painful but straightforward enough).

That sounds like a task for merging all locations into one so people could go to
one place and retrieve everything from there. Generally something like redmin or
trac would be nice to have as bugtracker and central plce to browse repositories.

> 7) Updating man pages on website (usually comes last and often forgotten altogether).

What about doing that with a cronjob which pulls the manpages from
cvs/git/whatever and builds the html version automatically?


> 8) Making announcement to user group of new release availability.


> 9) Depending on feedback, possibly making a patch release to fix build problems encountered by users (sigh).

Same issue here - if making a release would be easy and automated, this step
would be easy and fast to do, too.

> Very little of this can be automated, which is part of why it doesn't happen very often.  Having a HEAD version has been a huge help, since people who want the latest bug fixes and feature adds can get them in real-time, at the expense of doing their own compiles and taking a little risk that their results will not agree with earlier runs.  Radiance development benefits greatly from the feedback of these brave users and allows for build fixes along the way, so that patch releases are not as necessary as they used to be.

I think there are a lot of things which could be automated. I know projects
which are run by one developer mainly and they release several times a year -
which is pretty easy as the only thing you need to do is to change the version
number and type make dist. There are a lot of platform-independent tools which
help with such tasks these days.

Let me know if I can help you with these things.

Cheers,

Bernd

-- 
 Bernd Zeimetz                            Debian GNU/Linux Developer
 http://bzed.de                                http://www.debian.org
 GPG Fingerprint: ECA1 E3F2 8E11 2432 D485  DD95 EB36 171A 6FF9 435F

From bernd at bzed.de  Wed Dec  1 02:52:23 2010
From: bernd at bzed.de (Bernd Zeimetz)
Date: Wed Dec  1 02:52:11 2010
Subject: [Radiance-dev] releases, revisions, radiance, rage - some thoughts
	on packaging Radiance
In-Reply-To: <201011301908.oAUJ86Jd028379@mta1.lbl.gov>
References: <201011301908.oAUJ86Jd028379@mta1.lbl.gov>
Message-ID: <4CF628E7.2030409@bzed.de>

Hi!

On 11/30/2010 08:08 PM, Peter Apian-Bennewitz wrote:
> a) getting Radiance into distributions, IMHO, is very helpful and much
> appreciated by anyone in the community. This will get the tool to the
> end user more easily.

I could ask the Fedora people if somebody would be willing to maintain it in
Fedora, but usually that needs somebody who is willing to keep a spec file
uptodate and test it. Which requires somebody who knows at least the basics of
radiance... If somebody from the radiance community is willing to work on it, I
could bring them into contact with some people from Fedora.

Since radiance is in Debian and Ubuntu we have more and more installations -
here are the popcon stats from Debian for example: http://deb.li/n7tU


> b) Radiance code is not always easy to handle, e.g. since the built
> process never followed the mainstream. On the other hand, when it
> started, the now standard "configure; make" sequence wasn't mainstream
> anyway. If you never got mad over "string.h" versus "strings.h", you're
> lucky. Apache, the Linux kernel, all more modern.

Most build systems are fugly in some way. Automake and friends are a pain in the
ass but you can make them work very well. CMake doesn't support that many
platforms and I find it pretty confusing, too. Same for SCons, which is at least
written in Python...

In the debian/rules file I'm using the RMakefiles, but I've patched a lot in
them before it was easy to use for building the packages with them. Thanks to
Greg the patches are applied in CVS these days. Took me some time to figure out
what the best way is to build the packages, but it was not too hard to do.



> d) There are a number of enhancements that would be very useful to have
> in Radiance: Algorithmic features that actually extend the work that can
> be done with Radiance, thoughts on getting the code more modular, built
> process, test process. For me, for example, the first would be the
> utmost important. For you, packaging comes with other priorities. In
> regard to some emails lately, please be prepared that your view might
> not be the greatest common divisor among Radiance users or folks concern
> with Radiance development.

Having a test framework would be *really* nice. I'm always wondering if we hit
alignment or endianess or other issues on the various platforms which are
supported by Debian.

> 
> e) make, dmake, gmake, RCS, GIT, subversion etc. : All nice and cool and
> useful. Newer tools could be used to Radiance's advantage. If you want
> my two cent recommendation on how to get them: Explain to LBNL why
> Radiance differs from other packages that you maintain, what the
> advantages for the end user are (e.g. thinking of 'correct' version
> numbers like 4.5.0.1 instead of 'HEAD from 11/12/2010' when Radiance is
> included on Debian's next release), and how many people are potentially
> using your release (estimated numbers for your distribution).
> The situation that Radiance is included with Linux distros is
> comparatively new to Radiance. If you require principal changes to the
> upstream system, explain the advantages for the end-user and yourself
> (see last sentence) to folks managing the funds. Same goes for Solaris,
> Windows, Mac, etc.
> 
> f) Most any release process can be streamlined. The RCS/CVS I added in
> 2003 on the then pirate-state radiance-online, is by no means cast in
> gold. It had been a step forward from the very first SCCS and came after
> an intermediate interval with no source revisions. Maybe CVS can be
> extended or used more fully, maybe another tool is more powerful.

I'm all for having a properly maintained git with redmine or some other tool as
bugtracker. I wouldn't even mind to host it...

Cheers,

Bernd

-- 
 Bernd Zeimetz                            Debian GNU/Linux Developer
 http://bzed.de                                http://www.debian.org
 GPG Fingerprint: ECA1 E3F2 8E11 2432 D485  DD95 EB36 171A 6FF9 435F

From pally.sandher at iesve.com  Wed Dec  1 03:30:26 2010
From: pally.sandher at iesve.com (Pally Sandher)
Date: Wed Dec  1 03:30:18 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <4CF623EA.5070809@bzed.de>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>	<22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>	<20101129.9514700.2026204402@gyor.oxdrove.co.uk>	<506FE4FB-2366-4BCF-AAF3-7AEB53685A5B@gmail.com>	<20101129.19493700.3603303133@gyor.oxdrove.co.uk>	<22042040-D1CA-47FB-AD94-7AE641C7605E@gmail.com>	<4CF4C894.1000300@bzed.de><53E06D79-F37F-44AC-B9DD-95436E0AFB4C@gmail.com>
	<4CF623EA.5070809@bzed.de>
Message-ID: <7E4EF7766063EC4091542B5B3E671EC403306E80@MAIL.iesve.com>

>> 5) Checking compile and building for the few supported systems
(sometimes days of delay and looping back to step 1).
>
>If it would be easier to create a new release, you could release a -RC
version and wait for feedback. So finding a fast way to create releases
would fix that point for large parts. 

This is one of the major bugbears I have with Radiance releases. I've
never seen a single software package which has only HEAD or major
releases available because it just doesn't work as we've seen here.
Releasing betas and/or release candidates from the HEAD would allow
people to test using a known package & would make people a lot more
likely to build & test before a release. Also the bake time for betas
and/or release candidates give you time to fix known issues & the
pressure to make sure everything works for release should be eased by
this. The down side is that you'd either need to create a release branch
for each release which from what I've heard isn't easy in CVS (I'm used
to Perforce where everything is easy) or lock HEAD until a release is
ready.

If you're dead set against releasing patches/minor updates such as 4.0.1
etc then betas/release candidates are the only workable solution that I
can see.

Palbinder Sandher 
Software Deployment & IT Administrator
T: +44 (0) 141 945 8500 
F: +44 (0) 141 945 8501 

http://www.iesve.com 
**Design, Simulate + Innovate with the <Virtual Environment>**
Integrated Environmental Solutions Limited. Registered in Scotland No.
SC151456 
Registered Office - Helix Building, West Of Scotland Science Park,
Glasgow G20 0SP
Email Disclaimer



From guy.vaessen at gmail.com  Fri Dec  3 14:56:48 2010
From: guy.vaessen at gmail.com (Guy Vaessen)
Date: Fri Dec  3 14:56:42 2010
Subject: [Radiance-dev] Fix for ra_tiff.c and normtiff.c
Message-ID: <AANLkTiktweUneaQzZQZiAFAoxv2ifcWbpp5hHBxCNwQt@mail.gmail.com>

Dear Greg,

The fix made (in the latest HEAD) to glareval.c works for Windows, but
should (to my opinion) also be applied to: ra_tiff.c (and I think
normtiff.c).

Best Regards,

Guy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://radiance-online.org/pipermail/radiance-dev/attachments/20101203/3eddc89d/attachment.html
From gregoryjward at gmail.com  Fri Dec  3 16:52:16 2010
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Fri Dec  3 16:52:04 2010
Subject: [Radiance-dev] Fix for ra_tiff.c and normtiff.c
In-Reply-To: <AANLkTiktweUneaQzZQZiAFAoxv2ifcWbpp5hHBxCNwQt@mail.gmail.com>
References: <AANLkTiktweUneaQzZQZiAFAoxv2ifcWbpp5hHBxCNwQt@mail.gmail.com>
Message-ID: <8FB9E51A-BCEC-46DF-ABC5-4649194A059E@gmail.com>

Hi Guy,

Good point -- seems we're finding the missing calls to SET_FILE_BINARY() in tools that were not traditionally compiled under Windows, and there may be more lurking in the source tree.  I have added fixes for these to HEAD.

Thanks for spotting them.

-Greg.

> From: Guy Vaessen <guy.vaessen@gmail.com>
> Date: December 3, 2010 2:56:48 PM PST
> 
> Dear Greg,
> 
> The fix made (in the latest HEAD) to glareval.c works for Windows, but should (to my opinion) also be applied to: ra_tiff.c (and I think normtiff.c).
> 
> Best Regards,
> 
> Guy

From grobe at gmx.net  Wed Dec  8 05:10:24 2010
From: grobe at gmx.net (Lars O. Grobe)
Date: Wed Dec  8 05:10:13 2010
Subject: [Radiance-dev] gensky: solar time and warning about standard
	meridian deviation
Message-ID: <4CFF83C0.7090702@gmx.net>

Hi,

I get

"gensky: warning: XXX hours btwn. standard meridian and longitude"

warnings even though specifying solar time. Should we have a conditional 
in gensky.c testing for solar time before writing out the message? 
Either I use gensky in the wrong manner, or it is a bit confusing 
towards users here ;-)

Cheers, Lars.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3740 bytes
Desc: S/MIME Cryptographic Signature
Url : http://radiance-online.org/pipermail/radiance-dev/attachments/20101208/4d929a69/smime.bin
From gregoryjward at gmail.com  Wed Dec  8 08:19:50 2010
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Wed Dec  8 08:19:38 2010
Subject: [Radiance-dev] gensky: solar time and warning about standard
	meridian deviation
In-Reply-To: <4CFF83C0.7090702@gmx.net>
References: <4CFF83C0.7090702@gmx.net>
Message-ID: <937D1604-F230-4D48-9FDB-9DA36702DCD5@gmail.com>

Little help, here.  What was the command you issued?  I suppose we should disable the warning when it's irrelevant; I agree.

-Greg

> From: "Lars O. Grobe" <grobe@gmx.net>
> Date: December 8, 2010 5:10:24 AM PST
> 
> Hi,
> 
> I get
> 
> "gensky: warning: XXX hours btwn. standard meridian and longitude"
> 
> warnings even though specifying solar time. Should we have a conditional in gensky.c testing for solar time before writing out the message? Either I use gensky in the wrong manner, or it is a bit confusing towards users here ;-)
> 
> Cheers, Lars.

From rfritz at lbl.gov  Thu Dec  9 10:45:15 2010
From: rfritz at lbl.gov (Randolph Fritz)
Date: Thu, 9 Dec 2010 10:45:15 -0800
Subject: [Radiance-dev] Test!
Message-ID: <81069ADB-D085-4626-93D5-CA959A0178F4@lbl.gov>

...up and running on the new server, I hope.

Randolph






From maricanis at gmail.com  Thu Dec 16 02:42:48 2010
From: maricanis at gmail.com (Marija Velickovic)
Date: Thu, 16 Dec 2010 11:42:48 +0100
Subject: [Radiance-dev] Algorithm for contour bands in falsecolor program
Message-ID: <AANLkTimCtGB8i+VzHNeiSSKuDAMkcphJVrOELCk_n_sO@mail.gmail.com>

Hi,

I was exploring falsecolor.csh to see how exactly contour bands are defined
in it. Since method it is mixture of shell command + cal files and various
functions inside them, I couldn't determine how is exactly defined "width"
of contour bands.

I understand that idea is to color areas in image with radiance in some
range above and below each radiance value in the scale.
For example if blue color is defined with 500lux, on final image in blue
will be colored areas with luminance ranging *from 500-x to 500+y *values.
Question is how *x and y* values are calculated? I suppose they depend on
maximal scale value and number of color, but cant determine exact equation
from falsecolor script.

Thanks in advance,
Marija
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20101216/63b224ec/attachment.html>

From gregoryjward at gmail.com  Thu Dec 16 07:11:38 2010
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Thu, 16 Dec 2010 07:11:38 -0800
Subject: [Radiance-dev] Algorithm for contour bands in falsecolor program
In-Reply-To: <AANLkTimCtGB8i+VzHNeiSSKuDAMkcphJVrOELCk_n_sO@mail.gmail.com>
References: <AANLkTimCtGB8i+VzHNeiSSKuDAMkcphJVrOELCk_n_sO@mail.gmail.com>
Message-ID: <A9FD285F-8C8F-4050-B6DA-807A9F508CC1@gmail.com>

Hi Marija,

It is a bit difficult to sort through.  Search for the following line:

	iscontb = if(btwn(0,v,1),btwn(.4,frac(ndivs*v),.6),-1);

Changing the 0.4 and 0.6 values will affect the width of the bands.  These fractions are relative to the spacing of band values.

Hope this helps.
-Greg

> From: Marija Velickovic <maricanis at gmail.com>
> Date: December 16, 2010 2:42:48 AM PST
> 
> Hi,
> 
> I was exploring falsecolor.csh to see how exactly contour bands are defined in it. Since method it is mixture of shell command + cal files and various functions inside them, I couldn't determine how is exactly defined "width" of contour bands.
> 
> I understand that idea is to color areas in image with radiance in some range above and below each radiance value in the scale.
> For example if blue color is defined with 500lux, on final image in blue will be colored areas with luminance ranging from 500-x to 500+y values.
> Question is how x and y values are calculated? I suppose they depend on maximal scale value and number of color, but cant determine exact equation from falsecolor script.
> 
> Thanks in advance,
> Marija


