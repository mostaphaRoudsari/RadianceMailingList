From dbs176 at gmail.com  Mon Nov  8 21:13:58 2010
From: dbs176 at gmail.com (David Smith)
Date: Mon Nov  8 21:13:50 2010
Subject: [Radiance-dev] Re: [Radiance-general] Re: Python Radiance Package
In-Reply-To: <ib9fps$75g$1@dough.gmane.org>
References: <AANLkTimwYfk4rFE6p+xsKgkX8kv1s_rKVHp0R3+k0JwW@mail.gmail.com>
	<loom.20101108T145929-866@post.gmane.org>
	<C9FC79B1-1499-437F-A9BD-F750CC1C6FB5@lmi.net>
	<AANLkTinRBS_KFi1TbaO=6SZM0nx7+S=GMnjmZZSB7=3N@mail.gmail.com>
	<ib9fps$75g$1@dough.gmane.org>
Message-ID: <AANLkTimXuVN7OCZLThqW9JiO6CZAYfoa1eJ1t4OepkNy@mail.gmail.com>

Wow, thanks to all who replied. I'll try to address some of the raised
eyebrows now, and answer the more technical ones later.

My goal was an easier way to do some analysis that would require more
than simple shell scripts. Or rather, a way to do some things that
would probably be easier in a higher level language. I just so happen
to do a lot in Python, and I think it's a relatively simple language
to pick up, and its syntax looks like pseudocode.

Some more complicated scripts can get hard to follow with lots of
system calls, stringing together variables, or keeping track of and
deleting temporary files. I think that a Python package could be more
user friendly by making a simple interface and taking care of that
sort of thing automatically and invisibly. Also it could take
advantage of some of the more interesting Python capabilities such as
using distributed tasks (multiprocessor/multi-machine), pre-written
data processing libraries, image libraries, etc.

Since, as has been pointed out, the same code can run essentially
unmodified on any modern system that can run Radiance, there is the
possibility that this can create an easy way to exchange ideas and
create novel approaches to analysis. The architecture scripting
community is surprisingly active.

However, all I really wanted to do initially was provide a simple
interface back to Radiance, then step back and maintain/optimize it. I
hadn't given much technical thought other than it ought to at least
start out as a wrapper program. Because of the modularity of it all,
that could be changed later. I wasn't really aiming to replace things
like the csh scripts, although this would make it easy for someone to
do so if they wanted. I wanted for it to be as transparent as possible
through to Radiance proper.

Finally, I really appreciate the volunteers. I'm not a programming
novice, but I'm certainly not a guru either. Collaboration is much
appreciated.

I've registered a Google code page (for now, Mercurial, because I've
never used it and want to learn it - I hear it's like subversion with
the benefits of git) at http://code.google.com/p/python-radiance . I
think that the conversation should be continued in the
code-development thread, where it will likely get more technical.

--Dave




On Mon, Nov 8, 2010 at 1:33 PM, Randolph M. Fritz <RFritz@lbl.gov> wrote:
> If people are interested, the Labs is offering subversion server space on
> one of our servers. ?When we get the website update project a bit further
> along, we'll be able to give the project a page, too.
>
> --
> Randolph M. Fritz ? RFritz@lbl.gov
> Environmental Energy Technologies Division ? Lawrence Berkeley Labs
>
>
>
>
> On 2010-11-08 08:58:45 -0800, Thomas Bleicher said:
>
>> On Mon, Nov 8, 2010 at 11:36 AM, Greg Ward <gregoryjward@gmail.com> wrote:
>>>
>>> Well, it sounds like there is significant groundswell around this idea.
>>> I suggest that interested parties/developers organize a host site for
>>> this effort and someone (Dave?) take charge of the project.
>>
>> Google code projects are easy to set up and almost everyone
>> in this thread already has a gmail account. It may be more difficult
>> to find a source control system that everybody agrees on ...
>>
>>> Ongoing maintenance is something to think about as well,
>>> as new Radiance releases will likely continue to have some
>>> minor changes and some major additions.
>>
>> Since everybody is happy with a simple 'subprocess' wrapper
>> around the Radiance binaries there shouldn't be much ongoing
>> maintenance. Python 2 vs 3 is more likely to cause additional
>> work than the Radiance interface.
>>
>> However, I can see that an additional advantage of this project
>> could be that the remaining CSH scripts (and possibly Perl scripts)
>> in the main Radiance distribution get finally pythonized. In that
>> case should the new scripts be kept separately or should they
>> find their way back into the distribution?
>>
>> Thomas
>
>
> --
> Randolph M. Fritz ? RFritz@lbl.gov
> Environmental Energy Technologies Division ? Lawrence Berkeley Labs
>
>
>
> _______________________________________________
> Radiance-general mailing list
> Radiance-general@radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-general
>

From rfritz at lbl.gov  Mon Nov  8 21:42:59 2010
From: rfritz at lbl.gov (Randolph Fritz)
Date: Mon Nov  8 21:42:46 2010
Subject: [Radiance-dev] Re: [Radiance-general] Re: Python Radiance Package
In-Reply-To: <AANLkTimXuVN7OCZLThqW9JiO6CZAYfoa1eJ1t4OepkNy@mail.gmail.com>
References: <AANLkTimwYfk4rFE6p+xsKgkX8kv1s_rKVHp0R3+k0JwW@mail.gmail.com>
	<loom.20101108T145929-866@post.gmane.org>
	<C9FC79B1-1499-437F-A9BD-F750CC1C6FB5@lmi.net>
	<AANLkTinRBS_KFi1TbaO=6SZM0nx7+S=GMnjmZZSB7=3N@mail.gmail.com>
	<ib9fps$75g$1@dough.gmane.org>
	<AANLkTimXuVN7OCZLThqW9JiO6CZAYfoa1eJ1t4OepkNy@mail.gmail.com>
Message-ID: <AANLkTimR0U-P9Cn8ZpGD2R59h9qXVVcMKFH=GT1hgCYN@mail.gmail.com>

Sounds pretty good, and we don't even have to run the server. :-)

Sign me up. I don't know how much I'll be contributing--I've got, as my
managers and colleagues remind me, plenty of other work--but I want to at
least have the opportunity.
--
Randolph M. Fritz ? RFritz@lbl.gov
Environmental Energy Technologies Division ? Lawrence Berkeley Labs

On Mon, Nov 8, 2010 at 9:13 PM, David Smith <dbs176@gmail.com> wrote:

> Wow, thanks to all who replied. I'll try to address some of the raised
> eyebrows now, and answer the more technical ones later.
>
> My goal was an easier way to do some analysis that would require more
> than simple shell scripts. Or rather, a way to do some things that
> would probably be easier in a higher level language. I just so happen
> to do a lot in Python, and I think it's a relatively simple language
> to pick up, and its syntax looks like pseudocode.
>
> Some more complicated scripts can get hard to follow with lots of
> system calls, stringing together variables, or keeping track of and
> deleting temporary files. I think that a Python package could be more
> user friendly by making a simple interface and taking care of that
> sort of thing automatically and invisibly. Also it could take
> advantage of some of the more interesting Python capabilities such as
> using distributed tasks (multiprocessor/multi-machine), pre-written
> data processing libraries, image libraries, etc.
>
> Since, as has been pointed out, the same code can run essentially
> unmodified on any modern system that can run Radiance, there is the
> possibility that this can create an easy way to exchange ideas and
> create novel approaches to analysis. The architecture scripting
> community is surprisingly active.
>
> However, all I really wanted to do initially was provide a simple
> interface back to Radiance, then step back and maintain/optimize it. I
> hadn't given much technical thought other than it ought to at least
> start out as a wrapper program. Because of the modularity of it all,
> that could be changed later. I wasn't really aiming to replace things
> like the csh scripts, although this would make it easy for someone to
> do so if they wanted. I wanted for it to be as transparent as possible
> through to Radiance proper.
>
> Finally, I really appreciate the volunteers. I'm not a programming
> novice, but I'm certainly not a guru either. Collaboration is much
> appreciated.
>
> I've registered a Google code page (for now, Mercurial, because I've
> never used it and want to learn it - I hear it's like subversion with
> the benefits of git) at http://code.google.com/p/python-radiance . I
> think that the conversation should be continued in the
> code-development thread, where it will likely get more technical.
>
> --Dave
>
>
>
>
> On Mon, Nov 8, 2010 at 1:33 PM, Randolph M. Fritz <RFritz@lbl.gov> wrote:
>
>> If people are interested, the Labs is offering subversion server space on
>> one of our servers.  When we get the website update project a bit further
>> along, we'll be able to give the project a page, too.
>>
>> --
>> Randolph M. Fritz ? RFritz@lbl.gov
>> Environmental Energy Technologies Division ? Lawrence Berkeley Labs
>>
>>
>>
>>
>> On 2010-11-08 08:58:45 -0800, Thomas Bleicher said:
>>
>>  On Mon, Nov 8, 2010 at 11:36 AM, Greg Ward <gregoryjward@gmail.com>
>>> wrote:
>>>
>>>>
>>>> Well, it sounds like there is significant groundswell around this idea.
>>>> I suggest that interested parties/developers organize a host site for
>>>> this effort and someone (Dave?) take charge of the project.
>>>>
>>>
>>> Google code projects are easy to set up and almost everyone
>>> in this thread already has a gmail account. It may be more difficult
>>> to find a source control system that everybody agrees on ...
>>>
>>>  Ongoing maintenance is something to think about as well,
>>>> as new Radiance releases will likely continue to have some
>>>> minor changes and some major additions.
>>>>
>>>
>>> Since everybody is happy with a simple 'subprocess' wrapper
>>> around the Radiance binaries there shouldn't be much ongoing
>>> maintenance. Python 2 vs 3 is more likely to cause additional
>>> work than the Radiance interface.
>>>
>>> However, I can see that an additional advantage of this project
>>> could be that the remaining CSH scripts (and possibly Perl scripts)
>>> in the main Radiance distribution get finally pythonized. In that
>>> case should the new scripts be kept separately or should they
>>> find their way back into the distribution?
>>>
>>> Thomas
>>>
>>
>>
>> --
>> Randolph M. Fritz ? RFritz@lbl.gov
>> Environmental Energy Technologies Division ? Lawrence Berkeley Labs
>>
>>
>>
>> _______________________________________________
>> Radiance-general mailing list
>> Radiance-general@radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-general
>>
>>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev@radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://radiance-online.org/pipermail/radiance-dev/attachments/20101108/15f8d0c2/attachment.htm
From bernd at bzed.de  Tue Nov  9 01:18:08 2010
From: bernd at bzed.de (Bernd Zeimetz)
Date: Tue Nov  9 01:18:02 2010
Subject: [Radiance-dev] Re: [Radiance-general] Re: Python Radiance Package
In-Reply-To: <AANLkTimXuVN7OCZLThqW9JiO6CZAYfoa1eJ1t4OepkNy@mail.gmail.com>
References: <AANLkTimwYfk4rFE6p+xsKgkX8kv1s_rKVHp0R3+k0JwW@mail.gmail.com>	<loom.20101108T145929-866@post.gmane.org>	<C9FC79B1-1499-437F-A9BD-F750CC1C6FB5@lmi.net>	<AANLkTinRBS_KFi1TbaO=6SZM0nx7+S=GMnjmZZSB7=3N@mail.gmail.com>	<ib9fps$75g$1@dough.gmane.org>
	<AANLkTimXuVN7OCZLThqW9JiO6CZAYfoa1eJ1t4OepkNy@mail.gmail.com>
Message-ID: <4CD911D0.2060806@bzed.de>

On 11/09/2010 06:13 AM, David Smith wrote:
> Finally, I really appreciate the volunteers. I'm not a programming
> novice, but I'm certainly not a guru either. Collaboration is much
> appreciated.
> 
> I've registered a Google code page (for now, Mercurial, because I've
> never used it and want to learn it - I hear it's like subversion with
> the benefits of git) at http://code.google.com/p/python-radiance . I
> think that the conversation should be continued in the
> code-development thread, where it will likely get more technical.

I could drop some debian packaging into th erepository as soon as there is
something worth to be packaged. Just ping me.


Bernd
-- 
 Bernd Zeimetz                            Debian GNU/Linux Developer
 http://bzed.de                                http://www.debian.org
 GPG Fingerprint: ECA1 E3F2 8E11 2432 D485  DD95 EB36 171A 6FF9 435F

From rfritz at lbl.gov  Wed Nov 10 11:58:33 2010
From: rfritz at lbl.gov (Randolph Fritz)
Date: Wed Nov 10 11:58:34 2010
Subject: [Radiance-dev] Re: Python Radiance Package
Message-ID: <55620959-AAF1-4C0D-AE20-52DFA6CDFC4E@lbl.gov>

On 2010-11-09 20:57:15 -0800, Guglielmetti, Robert said:

> This leads me to another topic, that of a reliable Windows build  
> environment for Radiance. As part of our efforts mentioned above,  
> NREL is looking into getting a cmake-based cross-platform build env  
> for Radiance and hosting it. The goal is to get a cmake dashboard  
> setup for Radiance (nightly) builds. This would allow us to provide  
> a repository for Windows Radiance binaries, updated nightly and  
> monitored for breakage. Windows functionality is important to us for  
> our tools mission, so we are currently scoping this effort. Stay  
> tuned!

Hmmm.  Have you considered fixing up the scons scripts?  Cmake doesn't  
work on Macs worth noticing.  It has some Mac functionality, but it is  
very limited.  (At least the best book on it now only costs $60; this  
is better than a few years ago when Kitware was selling the book for  
$200.)

-- 
Randolph M. Fritz ? RFritz@lbl.gov
Environmental Energy Technologies Division ? Lawrence Berkeley Labs


From guy.vaessen at gmail.com  Wed Nov 10 12:43:07 2010
From: guy.vaessen at gmail.com (Guy Vaessen)
Date: Wed Nov 10 12:42:56 2010
Subject: [Radiance-dev] Re: Python Radiance Package
Message-ID: <AANLkTim40Lr=2L1k-K96e_p5-K0K2qfcSmwxzBJP4e2N@mail.gmail.com>

I have posted this before to the mailing list, I know it is not nice to
double post but since there are still some questions on the Scons scripts I
re-posted everything (in one large message, with a fix or two):

This is my procedure to compile Radiance 40 HEAD with Scons:
If something is not working let me know then I can look into it.

General procedure for installation, is the one described on
Francesco's Wiki page
How to compile Radiance using the MinGW tools and Scons
http://www.bozzograo.net/radiancewiki/doku.php?id=how_to_compile_radiance_using_the_mingw_tools_and_scons

For compilation I used:
Radiance 4.0 from
http://radsite.lbl.gov/radiance/dist/rad4R0all.tar.gz(Includes
auxiliary files)
+ latest HEAD archive from
http://www.radiance-online.org/software/snapshots/radiance-HEAD.tgz
MinGW with gcc 4.5.0
Python 2.7 + scons 1.3.1 (You might also have to set the PATH variable to
Python and Scons)

Extract Radiance 4.0 and HEAD and place HEAD files over Radiance 4.0 files
overwriting the old ones.
Extracting can be done with the tools listed on the radiancewiki site
mentioned above.
or possibly also with winzip or 7-zip.

Gendaylit
To make Gendaylit compile add the following line in:
ray\src\gen\SConscript under the section PROGS = (
('gendaylit',   Split('gendaylit.c sun.c',), ['rtlamps']),

Change the following line in: ray\src\common\SConscript
RTLAMPS = Split('''fropen.c rexpr.c lamps.c''')+ [getlibpath]

Dctimestep
To make dctimestep compile I had to add the following line to:
ray\src\common\SConscript under the section # build libraries:
rtall = env.StaticLibrary(target=radlib('rtall'), source=ALL)

I changed in ray\src\util\SConscript
('dctimestep', ['dctimestep.c'],
    ['rtall'])

For Gendaylit you also need a library files called: 'perezlum.cal
coeff_perez.dat defangle.dat'

Add this to ray\scr\gen\SConscript the line should be:
LIBFILES = Split('illum.cal rev.cal skybright.cal glaze1.cal glaze2.cal
perezlum.cal coeff_perez.dat defangle.dat')

Check if: progs.append(prog)
is present before this line in ray\scr\gen\SConscript:
prog = env.Program(target=os.path.join('$RAD_BUILDBIN', 'mksource'),

When compiling tmapluv.c the compiler complains about a variable
declaration that is already declared elsewhere, to solve this:

Change the include order in these files (ray\src\common\):
tmapluv.c to put "tiffio.h" above "tmprivat.h"
tmaptiff.c to put "tiffio.h" above "tmprivat.h"
tmapcolrs.c to put "rtprocess.h" above "tmprivat.h"

To compile mgf2meta:
Change in ray\scr\cv\SConscript
# meta targets
prog = env.Program(target=rbin('mgf2meta'), source=['mgf2meta.c'],
        CPPPATH=env.get('CPPPATH', []) + [os.path.join('#src','meta')],
        LIBS=['meta','rtmath','rtcont','rtmem','rterror','mgf'] + mlib)
env.Append(RAD_BININSTALL=[env.Install(env['RAD_BINDIR'], prog)])

platform/*.cfg files should be updated so that installation paths aren't
"c:\radiance3.6" or so.

For example next can be changed:
[install]
RAD_BASEDIR:   c:\radiance4.0
RAD_BINDIR:    bin
RAD_RLIBDIR:   lib
RAD_MANDIR:    man

Open cmd window on Windows
Change to ray dir
type: scons build
And after a successful build
type: scons install

+
after installation user has to set RAYPATH environment variable to Radiance
libraries' path.
and the PATH environment variable to Radiance bin path

For those of you interested in compiling ra_tiff and normtiff for Windows,
below are the instructions on how it could be done.

Tools:
Get tiff-3.9.4.zip from ftp://ftp.remotesensing.org/pub/libtiff/
Get MinGW + MSYS shell from http://www.mingw.org/

To open a MSYS shell: Go to C:\msys\1.0\msys.bat (or where you installed
MSYS)

Original instructions from:
http://www.gaia-gis.it/spatialite-2.4.0/mingw_how_to.html#libtiff
Only step 5 should be enough to compile libtiff (since we do not use libz
nor libjpeg)
To make it work with Radiance I had to modify the procedure a bit:

    download the latest sources: tiff-3.9.4.zip
    uncompress this zip-file
    then open an MSYS shell

cd tiff-3.9.4
./configure --enable-static --enable-logluv --disable-shared --disable-cxx
--disable-jpeg --disable-zlib --disable-pixarlog
make
make install-strip

Copy the file libtiff.a from C:\msys\1.0\local\lib to C:\..\..\ray\src\lib
(where ..\..\ points to where you extracted the Radiance source files)

To build ra_tiff add these lines to ray\src\px\SConscript:

ra_tiff = env.Program(target=radbin('ra_tiff'), source=['ra_tiff.c'],
    LIBS=['libtiff','rtpic','rtio','rtmem'] + mlib)
progs.append(ra_tiff)


In a similar way normtiff can be build:

Add this line to \ray\src\common\SConscript after the section # build
libraries:

rtall = env.StaticLibrary(target=radlib('rtall'), source=ALL)

To build normtiff add these lines to ray\src\px\SConscript:

normtiff = env.Program(target=radbin('normtiff'),source=['normtiff.c'],
    LIBS=['libtiff','rtall'] + mlib)
progs.append(normtiff)

Then proceed with building Radiance with scons.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://radiance-online.org/pipermail/radiance-dev/attachments/20101110/760b29cf/attachment.html
From rfritz at lbl.gov  Wed Nov 10 14:11:17 2010
From: rfritz at lbl.gov (Randolph Fritz)
Date: Wed Nov 10 14:11:10 2010
Subject: [Radiance-dev] Re: Python Radiance Package
In-Reply-To: <AANLkTim40Lr=2L1k-K96e_p5-K0K2qfcSmwxzBJP4e2N@mail.gmail.com>
References: <AANLkTim40Lr=2L1k-K96e_p5-K0K2qfcSmwxzBJP4e2N@mail.gmail.com>
Message-ID: <19869D79-28AE-4D88-8D3A-E88773A59BCD@lbl.gov>

Thanks for publishing this!

Randolph




On Nov 10, 2010, at 12:43 PM, Guy Vaessen wrote:

> I have posted this before to the mailing list, I know it is not nice  
> to double post but since there are still some questions on the Scons  
> scripts I re-posted everything (in one large message, with a fix or  
> two):
>
> This is my procedure to compile Radiance 40 HEAD with Scons:
> If something is not working let me know then I can look into it.
>
> General procedure for installation, is the one described on
> Francesco's Wiki page
> How to compile Radiance using the MinGW tools and Scons
> http://www.bozzograo.net/radiancewiki/doku.php?id=how_to_compile_radiance_using_the_mingw_tools_and_scons
>
> For compilation I used:
> Radiance 4.0 from http://radsite.lbl.gov/radiance/dist/rad4R0all.tar.gz 
>  (Includes auxiliary files)
> + latest HEAD archive from http://www.radiance-online.org/software/snapshots/radiance-HEAD.tgz
> MinGW with gcc 4.5.0
> Python 2.7 + scons 1.3.1 (You might also have to set the PATH  
> variable to Python and Scons)
>
> Extract Radiance 4.0 and HEAD and place HEAD files over Radiance 4.0  
> files overwriting the old ones.
> Extracting can be done with the tools listed on the radiancewiki  
> site mentioned above.
> or possibly also with winzip or 7-zip.
>
> Gendaylit
> To make Gendaylit compile add the following line in:
> ray\src\gen\SConscript under the section PROGS = (
> ('gendaylit',   Split('gendaylit.c sun.c',), ['rtlamps']),
>
> Change the following line in: ray\src\common\SConscript
> RTLAMPS = Split('''fropen.c rexpr.c lamps.c''')+ [getlibpath]
>
> Dctimestep
> To make dctimestep compile I had to add the following line to:
> ray\src\common\SConscript under the section # build libraries:
> rtall = env.StaticLibrary(target=radlib('rtall'), source=ALL)
>
> I changed in ray\src\util\SConscript
> ('dctimestep', ['dctimestep.c'],
>     ['rtall'])
>
> For Gendaylit you also need a library files called: 'perezlum.cal  
> coeff_perez.dat defangle.dat'
>
> Add this to ray\scr\gen\SConscript the line should be:
> LIBFILES = Split('illum.cal rev.cal skybright.cal glaze1.cal  
> glaze2.cal perezlum.cal coeff_perez.dat defangle.dat')
>
> Check if: progs.append(prog)
> is present before this line in ray\scr\gen\SConscript:
> prog = env.Program(target=os.path.join('$RAD_BUILDBIN', 'mksource'),
>
> When compiling tmapluv.c the compiler complains about a variable
> declaration that is already declared elsewhere, to solve this:
>
> Change the include order in these files (ray\src\common\):
> tmapluv.c to put "tiffio.h" above "tmprivat.h"
> tmaptiff.c to put "tiffio.h" above "tmprivat.h"
> tmapcolrs.c to put "rtprocess.h" above "tmprivat.h"
>
> To compile mgf2meta:
> Change in ray\scr\cv\SConscript
> # meta targets
> prog = env.Program(target=rbin('mgf2meta'), source=['mgf2meta.c'],
>         CPPPATH=env.get('CPPPATH', []) +  
> [os.path.join('#src','meta')],
>         LIBS=['meta','rtmath','rtcont','rtmem','rterror','mgf'] +  
> mlib)
> env.Append(RAD_BININSTALL=[env.Install(env['RAD_BINDIR'], prog)])
>
> platform/*.cfg files should be updated so that installation paths  
> aren't
> "c:\radiance3.6" or so.
>
> For example next can be changed:
> [install]
> RAD_BASEDIR:   c:\radiance4.0
> RAD_BINDIR:    bin
> RAD_RLIBDIR:   lib
> RAD_MANDIR:    man
>
> Open cmd window on Windows
> Change to ray dir
> type: scons build
> And after a successful build
> type: scons install
>
> +
> after installation user has to set RAYPATH environment variable to  
> Radiance
> libraries' path.
> and the PATH environment variable to Radiance bin path
>
> For those of you interested in compiling ra_tiff and normtiff for  
> Windows, below are the instructions on how it could be done.
>
> Tools:
> Get tiff-3.9.4.zip from ftp://ftp.remotesensing.org/pub/libtiff/
> Get MinGW + MSYS shell from http://www.mingw.org/
>
> To open a MSYS shell: Go to C:\msys\1.0\msys.bat (or where you  
> installed MSYS)
>
> Original instructions from:
> http://www.gaia-gis.it/spatialite-2.4.0/mingw_how_to.html#libtiff
> Only step 5 should be enough to compile libtiff (since we do not use  
> libz nor libjpeg)
> To make it work with Radiance I had to modify the procedure a bit:
>
>     download the latest sources: tiff-3.9.4.zip
>     uncompress this zip-file
>     then open an MSYS shell
>
> cd tiff-3.9.4
> ./configure --enable-static --enable-logluv --disable-shared -- 
> disable-cxx --disable-jpeg --disable-zlib --disable-pixarlog
> make
> make install-strip
>
> Copy the file libtiff.a from C:\msys\1.0\local\lib to C:\..\..\ray 
> \src\lib   (where ..\..\ points to where you extracted the Radiance  
> source files)
>
> To build ra_tiff add these lines to ray\src\px\SConscript:
>
> ra_tiff = env.Program(target=radbin('ra_tiff'), source=['ra_tiff.c'],
>     LIBS=['libtiff','rtpic','rtio','rtmem'] + mlib)
> progs.append(ra_tiff)
>
>
> In a similar way normtiff can be build:
>
> Add this line to \ray\src\common\SConscript after the section #  
> build libraries:
>
> rtall = env.StaticLibrary(target=radlib('rtall'), source=ALL)
>
> To build normtiff add these lines to ray\src\px\SConscript:
>
> normtiff =  
> env.Program(target=radbin('normtiff'),source=['normtiff.c'],
>     LIBS=['libtiff','rtall'] + mlib)
> progs.append(normtiff)
>
> Then proceed with building Radiance with scons.
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev@radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev


From Robert.Guglielmetti at nrel.gov  Wed Nov 10 21:02:03 2010
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Wed Nov 10 21:01:50 2010
Subject: [Radiance-dev] Re: Python Radiance Package
In-Reply-To: <AANLkTim40Lr=2L1k-K96e_p5-K0K2qfcSmwxzBJP4e2N@mail.gmail.com>
References: <AANLkTim40Lr=2L1k-K96e_p5-K0K2qfcSmwxzBJP4e2N@mail.gmail.com>
Message-ID: <FFF56A6D37A3A54F91A03601AC22DA321E32BE01ED@MAILBOX2.nrel.gov>

Hi Guy, Randolph, et al.:

Guy of course I recall your recent post on compiling Radiance for Windows with scons. Great work, a great follow-up to all the hard work Francesco Anselmo did years ago to get a MinGW compile. My post was in no way meant to trivialize the work you and others are doing.  What we are looking to do at NREL is to create a cmake environment that is easy to maintain, that would provide nightly builds of Radiance for Windows, with a dashboard environment that would allow us to stay on top of any new changes to the code base (that seem to be coming fast and furious lately (a good thing)). I have been using Radiance for a ling time, but I can still remember the bleeding edge pain I went through in the mid 90's trying to learn UNIX sysadmin skills before I ever got to run oconv. I think a reliable repository for Windows binaries of the complete Radiance suite that keeps pace with development (which is very active these days) is important and novel. It also in no way means the scons work you have done is irrelevant. 

Randolph, I'm sorry but I simply don't agree with you on your assessment of cmake. Internally, we are using cmake to keep pace with an agile development cycle involving a couple dozen software engineers, working on cross platform (Win/Mac/Linux) builds of our analysis platform. The idiot typing this email is able to maintain binaries on his OSX systems, and the Windows systems he has running on his VMs, with minimal knowledge of cmake. It's a big system, but it allows experts to allow novices to do expert things, and everywhere in between, developers of all stripes have access to source code and cross platform functionality that encourages participation. 

Our intent is to offer a couple of alternatives here. 

- Rob
____________________________
From: radiance-dev-bounces@radiance-online.org [radiance-dev-bounces@radiance-online.org] On Behalf Of Guy Vaessen [guy.vaessen@gmail.com]
Sent: Wednesday, November 10, 2010 1:43 PM
To: radiance-dev@radiance-online.org
Subject: [Radiance-dev] Re: Python Radiance Package

I have posted this before to the mailing list, I know it is not nice to double post but since there are still some questions on the Scons scripts I re-posted everything (in one large message, with a fix or two):

This is my procedure to compile Radiance 40 HEAD with Scons:
If something is not working let me know then I can look into it.

General procedure for installation, is the one described on
Francesco's Wiki page
How to compile Radiance using the MinGW tools and Scons
http://www.bozzograo.net/radiancewiki/doku.php?id=how_to_compile_radiance_using_the_mingw_tools_and_scons

For compilation I used:
Radiance 4.0 from http://radsite.lbl.gov/radiance/dist/rad4R0all.tar.gz (Includes auxiliary files)
+ latest HEAD archive from http://www.radiance-online.org/software/snapshots/radiance-HEAD.tgz
MinGW with gcc 4.5.0
Python 2.7 + scons 1.3.1 (You might also have to set the PATH variable to Python and Scons)

Extract Radiance 4.0 and HEAD and place HEAD files over Radiance 4.0 files overwriting the old ones.
Extracting can be done with the tools listed on the radiancewiki site mentioned above.
or possibly also with winzip or 7-zip.

Gendaylit
To make Gendaylit compile add the following line in:
ray\src\gen\SConscript under the section PROGS = (
('gendaylit',   Split('gendaylit.c sun.c',), ['rtlamps']),

Change the following line in: ray\src\common\SConscript
RTLAMPS = Split('''fropen.c rexpr.c lamps.c''')+ [getlibpath]

Dctimestep
To make dctimestep compile I had to add the following line to:
ray\src\common\SConscript under the section # build libraries:
rtall = env.StaticLibrary(target=radlib('rtall'), source=ALL)

I changed in ray\src\util\SConscript
('dctimestep', ['dctimestep.c'],
    ['rtall'])

For Gendaylit you also need a library files called: 'perezlum.cal coeff_perez.dat defangle.dat'

Add this to ray\scr\gen\SConscript the line should be:
LIBFILES = Split('illum.cal rev.cal skybright.cal glaze1.cal glaze2.cal perezlum.cal coeff_perez.dat defangle.dat')

Check if: progs.append(prog)
is present before this line in ray\scr\gen\SConscript:
prog = env.Program(target=os.path.join('$RAD_BUILDBIN', 'mksource'),

When compiling tmapluv.c the compiler complains about a variable
declaration that is already declared elsewhere, to solve this:

Change the include order in these files (ray\src\common\):
tmapluv.c to put "tiffio.h" above "tmprivat.h"
tmaptiff.c to put "tiffio.h" above "tmprivat.h"
tmapcolrs.c to put "rtprocess.h" above "tmprivat.h"

To compile mgf2meta:
Change in ray\scr\cv\SConscript
# meta targets
prog = env.Program(target=rbin('mgf2meta'), source=['mgf2meta.c'],
        CPPPATH=env.get('CPPPATH', []) + [os.path.join('#src','meta')],
        LIBS=['meta','rtmath','rtcont','rtmem','rterror','mgf'] + mlib)
env.Append(RAD_BININSTALL=[env.Install(env['RAD_BINDIR'], prog)])

platform/*.cfg files should be updated so that installation paths aren't
"c:\radiance3.6" or so.

For example next can be changed:
[install]
RAD_BASEDIR:   c:\radiance4.0
RAD_BINDIR:    bin
RAD_RLIBDIR:   lib
RAD_MANDIR:    man

Open cmd window on Windows
Change to ray dir
type: scons build
And after a successful build
type: scons install

+
after installation user has to set RAYPATH environment variable to Radiance
libraries' path.
and the PATH environment variable to Radiance bin path

For those of you interested in compiling ra_tiff and normtiff for Windows, below are the instructions on how it could be done.

Tools:
Get tiff-3.9.4.zip from ftp://ftp.remotesensing.org/pub/libtiff/
Get MinGW + MSYS shell from http://www.mingw.org/

To open a MSYS shell: Go to C:\msys\1.0\msys.bat (or where you installed MSYS)

Original instructions from:
http://www.gaia-gis.it/spatialite-2.4.0/mingw_how_to.html#libtiff
Only step 5 should be enough to compile libtiff (since we do not use libz nor libjpeg)
To make it work with Radiance I had to modify the procedure a bit:

    download the latest sources: tiff-3.9.4.zip
    uncompress this zip-file
    then open an MSYS shell

cd tiff-3.9.4
./configure --enable-static --enable-logluv --disable-shared --disable-cxx --disable-jpeg --disable-zlib --disable-pixarlog
make
make install-strip

Copy the file libtiff.a from C:\msys\1.0\local\lib to C:\..\..\ray\src\lib   (where ..\..\ points to where you extracted the Radiance source files)

To build ra_tiff add these lines to ray\src\px\SConscript:

ra_tiff = env.Program(target=radbin('ra_tiff'), source=['ra_tiff.c'],
    LIBS=['libtiff','rtpic','rtio','rtmem'] + mlib)
progs.append(ra_tiff)


In a similar way normtiff can be build:

Add this line to \ray\src\common\SConscript after the section # build libraries:

rtall = env.StaticLibrary(target=radlib('rtall'), source=ALL)

To build normtiff add these lines to ray\src\px\SConscript:

normtiff = env.Program(target=radbin('normtiff'),source=['normtiff.c'],
    LIBS=['libtiff','rtall'] + mlib)
progs.append(normtiff)

Then proceed with building Radiance with scons.

From jan.wienold at ise.fraunhofer.de  Fri Nov 19 02:15:24 2010
From: jan.wienold at ise.fraunhofer.de (Jan Wienold)
Date: Fri Nov 19 02:15:33 2010
Subject: [Radiance-dev] rpict and -sj 
Message-ID: <4CE64E3C.9000904@ise.fraunhofer.de>

Hi Greg,

Christoph and I realized, that for the current head release the -sj
option in rpict causes an command line error.
(
/         ./rpict -sj 1  /home/wienold/tmp/t_45.oct
       ./rpict: fatal - command line error at '-sj'
/)

is this just a bug or did you intend to remove this option?

Another question: Do you have plans to release the 4.1 version soon?

Best,

Jan

-- 
Dr.-Ing. Jan Wienold
Project Manager
Fraunhofer-Institut f?r Solare Energiesysteme
Thermal Systems and Buildings, Lighting and Daylighting
Heidenhofstr. 2, 79110 Freiburg, Germany
Phone: +49(0)761 4588 5133 Fax:+49(0)761 4588 9133
jan.wienold@ise.fraunhofer.de
http://www.ise.fraunhofer.de

In office: 
Mo,Tue: 8:30-18:00
We,Thu: 8:30-16:00
Fr:  8:30-15:30

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://radiance-online.org/pipermail/radiance-dev/attachments/20101119/faad66c5/attachment.html
From david.moroder at gmail.com  Fri Nov 19 03:19:20 2010
From: david.moroder at gmail.com (David Geisler-Moroder)
Date: Fri Nov 19 03:19:08 2010
Subject: [Radiance-dev] rpict and -sj
In-Reply-To: <4CE64E3C.9000904@ise.fraunhofer.de>
References: <4CE64E3C.9000904@ise.fraunhofer.de>
Message-ID: <AANLkTi=B8KC++NWGjdqF390cngfeZ1i9NwV9=N9AQcZJ@mail.gmail.com>

Hi Jan,

the -sj option was renamed to -ss that now also takes values greater than 1.
For values in [0,1] the behaviour is the same as it was for -sj, for values
greater than 1 multiple specular samples are sent to enable proper sampling
of indirect reflections (i.e. not from light sources) on specular surfaces.
Greg changed that together with the BRDF, which is now implemented as
presented at this year's workshop.

Best,
David

2010/11/19 Jan Wienold <jan.wienold@ise.fraunhofer.de>

>  Hi Greg,
>
> Christoph and I realized, that for the current head release the -sj option
> in rpict causes an command line error.
> (
> *         ./rpict -sj 1  /home/wienold/tmp/t_45.oct
>        ./rpict: fatal - command line error at '-sj'
> *)
>
> is this just a bug or did you intend to remove this option?
>
> Another question: Do you have plans to release the 4.1 version soon?
>
> Best,
>
> Jan
>
> --
> Dr.-Ing. Jan Wienold
> Project Manager
> Fraunhofer-Institut f?r Solare Energiesysteme
> Thermal Systems and Buildings, Lighting and Daylighting
> Heidenhofstr. 2, 79110 Freiburg, Germany
> Phone: +49(0)761 4588 5133 Fax:+49(0)761 4588 9133jan.wienold@ise.fraunhofer.dehttp://www.ise.fraunhofer.de
>
> In office:
> Mo,Tue: 8:30-18:00
> We,Thu: 8:30-16:00
> Fr:  8:30-15:30
>
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev@radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://radiance-online.org/pipermail/radiance-dev/attachments/20101119/208b5f18/attachment.htm
From jan.wienold at ise.fraunhofer.de  Fri Nov 19 04:48:56 2010
From: jan.wienold at ise.fraunhofer.de (Jan Wienold)
Date: Fri Nov 19 04:48:45 2010
Subject: [Radiance-dev] rpict and -sj
In-Reply-To: <AANLkTi=B8KC++NWGjdqF390cngfeZ1i9NwV9=N9AQcZJ@mail.gmail.com>
References: <4CE64E3C.9000904@ise.fraunhofer.de>
	<AANLkTi=B8KC++NWGjdqF390cngfeZ1i9NwV9=N9AQcZJ@mail.gmail.com>
Message-ID: <4CE67238.60009@ise.fraunhofer.de>

Hi David,

oh yes, now I can remember that Greg mentioned that... sorry folks - I'm
getting old...

But then there is a little bug: / rpict -defaults/ still returns the -sj
as  command line option...

Best,

Jan


David Geisler-Moroder wrote:
> Hi Jan,
>
> the -sj option was renamed to -ss that now also takes values greater
> than 1.
> For values in [0,1] the behaviour is the same as it was for -sj, for
> values greater than 1 multiple specular samples are sent to enable
> proper sampling of indirect reflections (i.e. not from light sources)
> on specular surfaces.
> Greg changed that together with the BRDF, which is now implemented as
> presented at this year's workshop.
>
> Best,
> David
>
> 2010/11/19 Jan Wienold <jan.wienold@ise.fraunhofer.de
> <mailto:jan.wienold@ise.fraunhofer.de>>
>
>     Hi Greg,
>
>     Christoph and I realized, that for the current head release the
>     -sj option in rpict causes an command line error.
>     (
>     /         ./rpict -sj 1  /home/wienold/tmp/t_45.oct
>            ./rpict: fatal - command line error at '-sj'
>     /)
>
>     is this just a bug or did you intend to remove this option?
>
>     Another question: Do you have plans to release the 4.1 version soon?
>
>     Best,
>
>     Jan
>
>     -- 
>     Dr.-Ing. Jan Wienold
>     Project Manager
>     Fraunhofer-Institut f?r Solare Energiesysteme
>     Thermal Systems and Buildings, Lighting and Daylighting
>     Heidenhofstr. 2, 79110 Freiburg, Germany
>     Phone: +49(0)761 4588 5133 Fax:+49(0)761 4588 9133
>     jan.wienold@ise.fraunhofer.de <mailto:jan.wienold@ise.fraunhofer.de>
>     http://www.ise.fraunhofer.de
>
>     In office: 
>     Mo,Tue: 8:30-18:00
>     We,Thu: 8:30-16:00
>     Fr:  8:30-15:30
>         
>
>
>     _______________________________________________
>     Radiance-dev mailing list
>     Radiance-dev@radiance-online.org
>     <mailto:Radiance-dev@radiance-online.org>
>     http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev@radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>   


-- 
Dr.-Ing. Jan Wienold
Project Manager
Fraunhofer-Institut f?r Solare Energiesysteme
Thermal Systems and Buildings, Lighting and Daylighting
Heidenhofstr. 2, 79110 Freiburg, Germany
Phone: +49(0)761 4588 5133 Fax:+49(0)761 4588 9133
jan.wienold@ise.fraunhofer.de
http://www.ise.fraunhofer.de

In office: 
Mo,Tue: 8:30-18:00
We,Thu: 8:30-16:00
Fr:  8:30-15:30

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://radiance-online.org/pipermail/radiance-dev/attachments/20101119/4e876b4e/attachment.html
From jan.wienold at ise.fraunhofer.de  Fri Nov 19 04:54:05 2010
From: jan.wienold at ise.fraunhofer.de (Jan Wienold)
Date: Fri Nov 19 04:53:54 2010
Subject: [Radiance-dev] rpict and -sj
In-Reply-To: <4CE67238.60009@ise.fraunhofer.de>
References: <4CE64E3C.9000904@ise.fraunhofer.de>	<AANLkTi=B8KC++NWGjdqF390cngfeZ1i9NwV9=N9AQcZJ@mail.gmail.com>
	<4CE67238.60009@ise.fraunhofer.de>
Message-ID: <4CE6736D.3000309@ise.fraunhofer.de>

Hi dev-group,

sorry again bothering you , the /rpict -defaults/ for the head release
is correct, it was again a mistake from me!
I had trouble in calling the right version...
Best
Jan

Jan Wienold wrote:
> Hi David,
>
> oh yes, now I can remember that Greg mentioned that... sorry folks -
> I'm getting old...
>
> But then there is a little bug: / rpict -defaults/ still returns the
> -sj as  command line option...
>
> Best,
>
> Jan
>
>
> David Geisler-Moroder wrote:
>> Hi Jan,
>>
>> the -sj option was renamed to -ss that now also takes values greater
>> than 1.
>> For values in [0,1] the behaviour is the same as it was for -sj, for
>> values greater than 1 multiple specular samples are sent to enable
>> proper sampling of indirect reflections (i.e. not from light sources)
>> on specular surfaces.
>> Greg changed that together with the BRDF, which is now implemented as
>> presented at this year's workshop.
>>
>> Best,
>> David
>>
>> 2010/11/19 Jan Wienold <jan.wienold@ise.fraunhofer.de
>> <mailto:jan.wienold@ise.fraunhofer.de>>
>>
>>     Hi Greg,
>>
>>     Christoph and I realized, that for the current head release the
>>     -sj option in rpict causes an command line error.
>>     (
>>     /         ./rpict -sj 1  /home/wienold/tmp/t_45.oct
>>            ./rpict: fatal - command line error at '-sj'
>>     /)
>>
>>     is this just a bug or did you intend to remove this option?
>>
>>     Another question: Do you have plans to release the 4.1 version soon?
>>
>>     Best,
>>
>>     Jan
>>
>>     -- 
>>     Dr.-Ing. Jan Wienold
>>     Project Manager
>>     Fraunhofer-Institut f?r Solare Energiesysteme
>>     Thermal Systems and Buildings, Lighting and Daylighting
>>     Heidenhofstr. 2, 79110 Freiburg, Germany
>>     Phone: +49(0)761 4588 5133 Fax:+49(0)761 4588 9133
>>     jan.wienold@ise.fraunhofer.de <mailto:jan.wienold@ise.fraunhofer.de>
>>     http://www.ise.fraunhofer.de
>>
>>     In office: 
>>     Mo,Tue: 8:30-18:00
>>     We,Thu: 8:30-16:00
>>     Fr:  8:30-15:30
>>         
>>
>>
>>     _______________________________________________
>>     Radiance-dev mailing list
>>     Radiance-dev@radiance-online.org
>>     <mailto:Radiance-dev@radiance-online.org>
>>     http://www.radiance-online.org/mailman/listinfo/radiance-dev
>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev@radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>>   
>
>
> -- 
> Dr.-Ing. Jan Wienold
> Project Manager
> Fraunhofer-Institut f?r Solare Energiesysteme
> Thermal Systems and Buildings, Lighting and Daylighting
> Heidenhofstr. 2, 79110 Freiburg, Germany
> Phone: +49(0)761 4588 5133 Fax:+49(0)761 4588 9133
> jan.wienold@ise.fraunhofer.de
> http://www.ise.fraunhofer.de
>
> In office: 
> Mo,Tue: 8:30-18:00
> We,Thu: 8:30-16:00
> Fr:  8:30-15:30
>   
> ------------------------------------------------------------------------
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev@radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>   


-- 
Dr.-Ing. Jan Wienold
Project Manager
Fraunhofer-Institut f?r Solare Energiesysteme
Thermal Systems and Buildings, Lighting and Daylighting
Heidenhofstr. 2, 79110 Freiburg, Germany
Phone: +49(0)761 4588 5133 Fax:+49(0)761 4588 9133
jan.wienold@ise.fraunhofer.de
http://www.ise.fraunhofer.de

In office: 
Mo,Tue: 8:30-18:00
We,Thu: 8:30-16:00
Fr:  8:30-15:30

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://radiance-online.org/pipermail/radiance-dev/attachments/20101119/5b43ec3b/attachment-0001.htm
From list at oxdrove.co.uk  Sun Nov 28 03:55:18 2010
From: list at oxdrove.co.uk (James Lee)
Date: Sun Nov 28 03:55:08 2010
Subject: [Radiance-dev] Makefile inconsistency
Message-ID: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>

File src/cv/Rmakefile defines the procedures for mgfilt, mgf2inv, 3ds2mgf
and 2 x libmgf.a.  The executables need mgflib/libmgf.a but the procedure
to make ../lib/libmgf.a removes mgflib/libmgf.a by moving it.  With a
linear build this doesn't matter as the three executables are built
before or after ../lib/libmgf.a but using 32 CPUs (T5120) and a parallel
build (dmake) this inconsistency is exploited.

I've attached a patch which cures the problem but it's weak because it
doesn't tidy the makefiles enough, eg, it would probably be better to
just "make all" on the sub make file in mgflib.

I've also changed "make" to "$(MAKE)" so as not to hard code a particular
make.

Version 4.0



James.
-------------- next part --------------
--- src/cv/Rmakefile.orig	2008-06-24 03:01:19.000000000 +0100
+++ src/cv/Rmakefile	2010-11-28 11:28:52.001493000 +0000
@@ -36,7 +36,7 @@
 
 clean:
 	set nonomatch; rm -f $(PROGS) *.o core
-	cd mgflib ; make clean
+	cd mgflib ; $(MAKE) clean
 
 ies2rad:	ies2rad.o
 	$(CC) $(CFLAGS) -o ies2rad ies2rad.o -lrtrad $(MLIB)
@@ -65,29 +65,29 @@
 mgf2meta:	$(MGF_LIB) mgf2meta.o
 	$(CC) $(CFLAGS) -o mgf2meta mgf2meta.o -lmgf -lmeta -lrtrad $(MLIB)
 
-mgfilt:
+mgfilt: $(MGF_LIB)
 	cd mgflib ; rm -f mgfilt ; \
-	make mgfilt CC="$(CC)" \
+	$(MAKE) mgfilt CC="$(CC)" \
 		CFLAGS="$(OPT) $(MACH)" ; \
-	mv mgfilt ..
+	cp mgfilt ..
 
-mgf2inv:
+mgf2inv: $(MGF_LIB)
 	cd mgflib ; rm -f mgf2inv ; \
-	make mgf2inv CC="$(CC)" \
+	$(MAKE) mgf2inv CC="$(CC)" \
 		CFLAGS="$(OPT) $(MACH)" ; \
-	mv mgf2inv ..
+	cp mgf2inv ..
 
-3ds2mgf:
+3ds2mgf: $(MGF_LIB)
 	cd mgflib ; rm -f 3ds2mgf ; \
-	make 3ds2mgf CC="$(CC)" \
+	$(MAKE) 3ds2mgf CC="$(CC)" \
 		CFLAGS="$(OPT) $(MACH)" ; \
-	mv 3ds2mgf ..
+	cp 3ds2mgf ..
 
 $(MGF_LIB):
-	cd mgflib ; rm -f libmgf.a ; \
-	make libmgf.a CC="$(CC)" \
+	cd mgflib ; \
+	$(MAKE) libmgf.a CC="$(CC)" \
 		CFLAGS="$(OPT) $(MACH)" ; \
-	mv libmgf.a ../../lib
+	cp libmgf.a ../../lib
 
 mgf2rad.o:	mgf2rad.c mgflib/parser.h ../common/tmesh.h ../common/color.h
 	$(CC) $(CFLAGS) -c mgf2rad.c
From gregoryjward at gmail.com  Sun Nov 28 09:04:10 2010
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Sun Nov 28 09:03:55 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>
Message-ID: <22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>

Hi James,

Thanks for figuring this out.  Does dmake cause the build to fail with the current make files, or does this just make things slightly more efficient?  I ask because the time to build Radiance even on a single-processor laptop has fallen to insignificance, where I would say that optimizing the build probably isn't important.

Best,
-Greg

> From: James Lee <list@oxdrove.co.uk>
> Date: November 28, 2010 3:55:18 AM PST
> 
> File src/cv/Rmakefile defines the procedures for mgfilt, mgf2inv, 3ds2mgf
> and 2 x libmgf.a.  The executables need mgflib/libmgf.a but the procedure
> to make ../lib/libmgf.a removes mgflib/libmgf.a by moving it.  With a
> linear build this doesn't matter as the three executables are built
> before or after ../lib/libmgf.a but using 32 CPUs (T5120) and a parallel
> build (dmake) this inconsistency is exploited.
> 
> I've attached a patch which cures the problem but it's weak because it
> doesn't tidy the makefiles enough, eg, it would probably be better to
> just "make all" on the sub make file in mgflib.
> 
> I've also changed "make" to "$(MAKE)" so as not to hard code a particular
> make.

From list at oxdrove.co.uk  Mon Nov 29 01:51:47 2010
From: list at oxdrove.co.uk (James Lee)
Date: Mon Nov 29 01:51:36 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>
	<22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>
Message-ID: <20101129.9514700.2026204402@gyor.oxdrove.co.uk>

On 28/11/10, 17:04:10, Gregory "J." Ward <gregoryjward@gmail.com> wrote
regarding Re: [Radiance-dev] Makefile inconsistency:

> Does dmake cause the build to fail with the current make files,

The bug has always been there, parallel make exploits/reveals it.  It's
a bit like QA doesn't cause bugs in software.


> or does this just make things slightly more efficient?  I ask because
> the time to build Radiance even on a single-processor laptop has
> fallen to insignificance, where I would say that optimizing the build
> probably isn't important.

There is nothing slight about a 10 fold increase in compile speed.  Until
software runs in less time that it takes to press a key it will be
significant.  I package a lot of software and by the time I die I will
have spent the equivalent of a whole year waiting for software to compile
but that will pale compared to the decade I will have spent debugging
other people's software.

As I'm building a radiance package I have to rebuild multiple times
because:
+ The package includes multiple architecture isaexec versions of the key
executables and the complete compile is done for each.
+ I first have to determine which arches, flags and compiler to use.
+ I've had to rebuild the whole package many times for the, ahem,
problems in radiance (not relocatable "define DEFMAPFILE
\"/usr/local/lib/ray/lib/arch.map\"", timegm, the ambient bug, version
still wrong, examples broken by hdr renaming, issuing different source
distributions with the same 4R0 name, etc.)  Each change I make requires
a traceable patch and build, hence full package rebuild.



James.

From gregoryjward at gmail.com  Mon Nov 29 08:40:01 2010
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Mon Nov 29 08:39:45 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <20101129.9514700.2026204402@gyor.oxdrove.co.uk>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>
	<22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>
	<20101129.9514700.2026204402@gyor.oxdrove.co.uk>
Message-ID: <506FE4FB-2366-4BCF-AAF3-7AEB53685A5B@gmail.com>

Wow.  Didn't mean to trigger a diatribe with my little question, which you didn't really answer.  What I gather from your response is that the build set-up requires you to compile multiple times with dmake to resolve the issue, which is unacceptable in your case because you already have so many compiles to deal with.  I get it.  I will take your fix suggestion and see what I can do.

I do want to respond to the other issues you mentioned, though:

> As I'm building a radiance package I have to rebuild multiple times
> because:
> + The package includes multiple architecture isaexec versions of the key
> executables and the complete compile is done for each.

I'm not really familiar with Solaris, but on other systems (like OS X) you can compile in the different architectures in one go.  Even that is a pain, so I sympathize.

> + I first have to determine which arches, flags and compiler to use.

Yes, well, we don't have all the different machines in the world to practice on, and this is an ongoing issue.

> + I've had to rebuild the whole package many times for the, ahem,
> problems in radiance (not relocatable "define DEFMAPFILE
> \"/usr/local/lib/ray/lib/arch.map\"", timegm, the ambient bug, version
> still wrong, examples broken by hdr renaming, issuing different source
> distributions with the same 4R0 name, etc.)  Each change I make requires
> a traceable patch and build, hence full package rebuild.

One at a time:

> not relocatable "define DEFMAPFILE \"/usr/local/lib/ray/lib/arch.map\"

I actually didn't know about this because it's in a program that no one (as far as I know) uses anymore, arch2rad.  The build for it should probably be disabled, rather than carrying whatever problems it has into the next release.  I will do that.

> timegm

There is a replacement implementation for this GNU extension in src/common/timegm.c, which I assume you found.  I shall add this to the COMPAT variable for Solaris.

> the ambient bug

Could you be more specific?  Unless this is the recurring problem with the NFS lock manager, which I didn't think an issue under Solaris.

> version still wrong

??

> examples broken by hdr renaming

I am sorry about that.  If you can point to specific documents that need fixing, I will fix them.  One of the big problems with being the only maintainer of a package that has developed and evolved for 20+ years is that there''s a lot of stuff buried in it that I don't think about anymore.

> issuing different source distributions with the same 4R0 name, etc.

Yes, I may be guilty of that.  I have at times posted a couple of versions without renaming when I found one or more problems in the distribution.  I try to fix these before my official announcement, but the release process is really a bit broken in the sense that there is no way to test out compiles on multiple platforms when we don't have multiple platforms available.  We would like to change this in the direction of having a group of designated system testers who compile a prerelease package on specific platforms to look for problems before we make an official release.  We have been relying on things being found in the HEAD distribution, but of course there are those who wait each time for the official release, and when problems show up then, we have no choice but to issue a patch.  If the patch is minor and system-specific, I have forgone the rev change in the process, which is certainly not ISO 9000.

Thanks for your help and your feedback, James.  I understand your job is not an easy one, and not always fun.

Best,
-Greg
From list at oxdrove.co.uk  Mon Nov 29 11:49:37 2010
From: list at oxdrove.co.uk (James Lee)
Date: Mon Nov 29 11:49:26 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <506FE4FB-2366-4BCF-AAF3-7AEB53685A5B@gmail.com>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>
	<22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>
	<20101129.9514700.2026204402@gyor.oxdrove.co.uk>
	<506FE4FB-2366-4BCF-AAF3-7AEB53685A5B@gmail.com>
Message-ID: <20101129.19493700.3603303133@gyor.oxdrove.co.uk>

On 29/11/10, 16:40:01, Gregory "J." Ward <gregoryjward@gmail.com> wrote
regarding Re: [Radiance-dev] Makefile inconsistency:

> which you didn't really answer.

Your question was:

"Does dmake cause the build to fail with the current make files, or
does this just make things slightly more efficient?"

It's 2 questions.

Ans 1 No dmake does not "cause" it to fail.  Parallel build does fail
but the problem is latent.  The makefiles ask for a file to be created
and for it to be destroyed which can't be satisfied consistently or at
the same time.

Ans 2. A 10 fold increase is not slight, so no it does not make it
slightly more efficient, it makes it many times more effective.


I expect gmake could fail similarly.  I prefer dmake over gmake because
it dynamically sets and varies the number of jobs depending on the system
load.  dmake is "Distributed Make" and can spawn jobs on other machines
for greater parallelism.  It's really handy for creating many radiance
images, I create makefiles to define the work and let dmake farm it
out.  This is less important nowadays that one physical machine houses
several virtual machines which already share all the resources.



> I do want to respond to the other issues you mentioned, though:

> > As I'm building a radiance package I have to rebuild multiple times
> > because:
> > + The package includes multiple architecture isaexec versions of the key
> > executables and the complete compile is done for each.

> I'm not really familiar with Solaris, but on other systems (like OS X)
> you can compile in the different architectures in one go.  Even that is
> a pain, so I sympathize.

I need to compile in multiple architectures.  My package contains several
versions of rpict.  The package has to run on many different CPUs.  The
laziest solution and a usual one is to use the lowest common denominator
arch.  For a CPU hog it's worth providing several speed optimised
binaries for different arches and letting isaexec pick the best one for
whichever machine is running the one package.  For trivial utilities a
space optimised solution is best so I do another build for those.  A
similar thing is done with libraries and the link loader uses the dynamic
token $ISALIST to pick the best libraries.

It's my usual technique: don't fight a build system, let it think it's
helping.  Build multiple times and pick the needed parts for the package.
It's typically the easiest way to build both 32 and 64 bit libraries.




> > not relocatable "define DEFMAPFILE \"/usr/local/lib/ray/lib/arch.map\"

> I actually didn't know about this because it's in a program that no one
> (as far as I know) uses anymore, arch2rad.  The build for it should
> probably be disabled, rather than carrying whatever problems it has
> into the next release.  I will do that.

I've never used it either but if it's in my package it should work.  I
edit the value to the location of arch.map in /opt but perhaps the code
should have used the env var RAYPATH.



> > timegm

> There is a replacement implementation for this GNU extension in
> src/common/timegm.c, which I assume you found.

No, it's not there:

$ ls src/common/timegm.c
src/common/timegm.c: No such file or directory

$ find . -name \*gm\*
./src/meta/segment.c

...not it...

$ grep -l timegm **/*
src/common/header.c

...and that's it being used...

$ grep timegm **/*
src/common/header.c:    *tloc = timegm(&tms);



> > the ambient bug

> Could you be more specific?  Unless this is the recurring problem
> with the NFS lock manager, which I didn't think an issue under
> Solaris.

rpict: fatal - bad ambient file

It's fixable by using src/rt/ambient.c from the HEAD distribution.
Given it's a known crash bug, pretty please, how about a release 4.1
with a fix?



> > version still wrong

> ??

I see you've fixed this in the new 4R0, I was using an older 4R0.  The
problems of not issuing 4.0.1!




> > examples broken by hdr renaming

> I am sorry about that.  If you can point to specific documents that need
> fixing, I will fix them.

I've edited my examples and they look good except I've still a problem
with the cabin:

$ make
oconv -b -100 -100 -100 225 -r 8192 \
pattmats cabin bathroom furniture winpanes.rad mirrors.rad > cabin.oct
oconv -f -r 8192 -i cabin.oct summerday landscape lights.off \
daywindows > summercabin.oct
rvu -vf vf/plan -av .1 .1 .1 summercabin.oct

rvu: fatal - cannot find picture file "pinebark.pic"
*** Error code 1
make: Fatal error: Command failed for target `view'


but I can't find any references to pinebark.  I'll keep looking.




> Thanks for your help and your feedback, James.  I understand your job is
> not an easy one, and not always fun.

Radiance is always fun.  If you want to get me steamed up tell me libtool
is good.




James.

From gregoryjward at gmail.com  Mon Nov 29 12:31:41 2010
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Mon Nov 29 12:31:28 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <20101129.19493700.3603303133@gyor.oxdrove.co.uk>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>
	<22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>
	<20101129.9514700.2026204402@gyor.oxdrove.co.uk>
	<506FE4FB-2366-4BCF-AAF3-7AEB53685A5B@gmail.com>
	<20101129.19493700.3603303133@gyor.oxdrove.co.uk>
Message-ID: <22042040-D1CA-47FB-AD94-7AE641C7605E@gmail.com>

Hi James,

Thanks for answering my question(s) -- I have updated the src/cv/Rmakefile for the next release.  You can pick it up if you like from HEAD or using the CVS interface at:

	http://www.radiance-online.org/cgi-bin/viewcvs.cgi/ray/src/

A few more responses...

>>> timegm
> 
>> There is a replacement implementation for this GNU extension in
>> src/common/timegm.c, which I assume you found.
> 
> No, it's not there:
> 
> $ ls src/common/timegm.c
> src/common/timegm.c: No such file or directory
> 
> $ find . -name \*gm\*
> ./src/meta/segment.c
> 
> ...not it...
> 
> $ grep -l timegm **/*
> src/common/header.c
> 
> ...and that's it being used...
> 
> $ grep timegm **/*
> src/common/header.c:    *tloc = timegm(&tms);

Oops.  Guess it was added right after the 4.0 release in response to some difficulties with the MINGW build.  You can pick it up from CVS if you want it, or from HEAD.

>>> the ambient bug
> 
>> Could you be more specific?  Unless this is the recurring problem
>> with the NFS lock manager, which I didn't think an issue under
>> Solaris.
> 
> rpict: fatal - bad ambient file
> 
> It's fixable by using src/rt/ambient.c from the HEAD distribution.
> Given it's a known crash bug, pretty please, how about a release 4.1
> with a fix?

If making a new release were less work, I would do it more often.  As it is, it takes days of my time, and I never get it quite right.  I don't really make new releases for bug fixes -- that's why we have HEAD.  Since this bug has been there for years and years, and only recently manifested due to some change in FreeBSD, I don't think it affects all that many users.  I do apologize for the inconvenience, but the next release probably won't happen until sometime in Spring.

>>> version still wrong
> 
>> ??
> 
> I see you've fixed this in the new 4R0, I was using an older 4R0.  The
> problems of not issuing 4.0.1!

Yes, sorry about that.  As you have pointed out, the release process is a bit haphazard.

>>> examples broken by hdr renaming
> 
>> I am sorry about that.  If you can point to specific documents that need
>> fixing, I will fix them.
> 
> I've edited my examples and they look good except I've still a problem
> with the cabin:
> 
> $ make
> oconv -b -100 -100 -100 225 -r 8192 \
> pattmats cabin bathroom furniture winpanes.rad mirrors.rad > cabin.oct
> oconv -f -r 8192 -i cabin.oct summerday landscape lights.off \
> daywindows > summercabin.oct
> rvu -vf vf/plan -av .1 .1 .1 summercabin.oct
> 
> rvu: fatal - cannot find picture file "pinebark.pic"
> *** Error code 1
> make: Fatal error: Command failed for target `view'
> 
> 
> but I can't find any references to pinebark.  I'll keep looking.

Ah.  The file "pinebark.hdr" picture should be in with the supplementary files in the ray/lib directory:

	http://www.radiance-online.org/software/non-cvs/rad4R0supp.tar.gz

Unfortunately, I didn't fix the references in the ray/obj/cabin directory -- sorry about that!  I will fix it for the next release.

Thanks again for your help!

-Greg
From bernd at bzed.de  Tue Nov 30 01:49:08 2010
From: bernd at bzed.de (Bernd Zeimetz)
Date: Tue Nov 30 01:49:25 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <22042040-D1CA-47FB-AD94-7AE641C7605E@gmail.com>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>	<22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>	<20101129.9514700.2026204402@gyor.oxdrove.co.uk>	<506FE4FB-2366-4BCF-AAF3-7AEB53685A5B@gmail.com>	<20101129.19493700.3603303133@gyor.oxdrove.co.uk>
	<22042040-D1CA-47FB-AD94-7AE641C7605E@gmail.com>
Message-ID: <4CF4C894.1000300@bzed.de>

On 11/29/2010 09:31 PM, Gregory J. Ward wrote:
>> It's fixable by using src/rt/ambient.c from the HEAD distribution.
>> Given it's a known crash bug, pretty please, how about a release 4.1
>> with a fix?
> 
> If making a new release were less work, I would do it more often.  As it is, it takes days of my time, and I never get it quite right.  I don't really make new releases for bug fixes -- that's why we have HEAD.  Since this bug has been there for years and years, and only recently manifested due to some change in FreeBSD, I don't think it affects all that many users.  I do apologize for the inconvenience, but the next release probably won't happen until sometime in Spring.

But it should be possible to do most parts of a new release automatically. My
guess is still that switching to a proper revision control system would make
things easier for you - using branches in cvs is a bit insane, but branches
would make it easy to prepare a new release.


-- 
 Bernd Zeimetz                            Debian GNU/Linux Developer
 http://bzed.de                                http://www.debian.org
 GPG Fingerprint: ECA1 E3F2 8E11 2432 D485  DD95 EB36 171A 6FF9 435F

From gregoryjward at gmail.com  Tue Nov 30 09:11:06 2010
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Tue Nov 30 09:10:51 2010
Subject: [Radiance-dev] Makefile inconsistency
In-Reply-To: <4CF4C894.1000300@bzed.de>
References: <20101128.11551800.3916407989@gyor.oxdrove.co.uk>	<22D2904D-5853-4434-96C0-24957E6597FE@gmail.com>	<20101129.9514700.2026204402@gyor.oxdrove.co.uk>	<506FE4FB-2366-4BCF-AAF3-7AEB53685A5B@gmail.com>	<20101129.19493700.3603303133@gyor.oxdrove.co.uk>
	<22042040-D1CA-47FB-AD94-7AE641C7605E@gmail.com>
	<4CF4C894.1000300@bzed.de>
Message-ID: <53E06D79-F37F-44AC-B9DD-95436E0AFB4C@gmail.com>

Hi Bernd,

Most of the hassle with putting together a new release can be resolved with website changes we're planning for next year.  Right now, we have depositories in a few different places, automatic updates that sort-of work most of the time, and documentation that is spread all over the place.  It's really more a matter of organization and putting others in charge than it is one of CVS and the way that works.

To give you an idea, posting a new release involves:

1) Putting together the latest source and creating a version in CVS (this is the easy part).

2) Updating documentation with new release information (easy to forget things, and I do).

3) Gathering the auxiliary data files together (easy to miss things here as well).

4) Making source-only, overlay, and combined tar balls (simple, but I've still screwed this up in the past).

5) Checking compile and building for the few supported systems (sometimes days of delay and looping back to step 1).

6) Uploading release to website locations and relinking everything, while archiving the old stuff (painful but straightforward enough).

7) Updating man pages on website (usually comes last and often forgotten altogether).

8) Making announcement to user group of new release availability.

9) Depending on feedback, possibly making a patch release to fix build problems encountered by users (sigh).

Very little of this can be automated, which is part of why it doesn't happen very often.  Having a HEAD version has been a huge help, since people who want the latest bug fixes and feature adds can get them in real-time, at the expense of doing their own compiles and taking a little risk that their results will not agree with earlier runs.  Radiance development benefits greatly from the feedback of these brave users and allows for build fixes along the way, so that patch releases are not as necessary as they used to be.

Even if we could streamline the release process, I still don't think we'd want to do it more than once a year or so.  People who want the latest and are willing to deal with any problems along the way can grab the HEAD whenever they like, and those who prefer stable releases and precompiled binaries probably don't want to be updating their systems multiple times a year.

The one thing we will be soliciting help on is step 5 above, building and testing on different systems in advance of an official release.  We need to gather volunteers and create some useful test cases for that process, and this is something we plan to do this coming year, given the time and personnel.

Cheers,
-Greg

> From: Bernd Zeimetz <bernd@bzed.de>
> Date: November 30, 2010 1:49:08 AM PST
> 
> On 11/29/2010 09:31 PM, Gregory J. Ward wrote:
>>> It's fixable by using src/rt/ambient.c from the HEAD distribution.
>>> Given it's a known crash bug, pretty please, how about a release 4.1
>>> with a fix?
>> 
>> If making a new release were less work, I would do it more often.  As it is, it takes days of my time, and I never get it quite right.  I don't really make new releases for bug fixes -- that's why we have HEAD.  Since this bug has been there for years and years, and only recently manifested due to some change in FreeBSD, I don't think it affects all that many users.  I do apologize for the inconvenience, but the next release probably won't happen until sometime in Spring.
> 
> But it should be possible to do most parts of a new release automatically. My
> guess is still that switching to a proper revision control system would make
> things easier for you - using branches in cvs is a bit insane, but branches
> would make it easy to prepare a new release.

From apian at pab.eu  Tue Nov 30 11:08:01 2010
From: apian at pab.eu (Peter Apian-Bennewitz)
Date: Tue Nov 30 11:07:52 2010
Subject: [Radiance-dev] releases, revisions, radiance,
 rage - some thoughts on packaging Radiance
Message-ID: <201011301908.oAUJ86Jd028379@mta1.lbl.gov>

Hi maintainers of packages, Hi folks,

maybe some thoughts on Radiance and its situation, from someone who had 
watched this from the periphery for a decade or two. Maybe it saves you 
some high blood pressure when "fixing other people's code".

a) getting Radiance into distributions, IMHO, is very helpful and much 
appreciated by anyone in the community. This will get the tool to the 
end user more easily.

b) Radiance code is not always easy to handle, e.g. since the built 
process never followed the mainstream. On the other hand, when it 
started, the now standard "configure; make" sequence wasn't mainstream 
anyway. If you never got mad over "string.h" versus "strings.h", you're 
lucky. Apache, the Linux kernel, all more modern.

c) Radiance's situation is somewhat similar to Cyrus IMAP, which had 
been developed by Carnegie Mellon, and which had its Achilles heel of a 
substantial lack of docu around 2005. That was only overcome by CM 
getting some funding to further care for its baby (as far as I know). 
Radiance is viewed by LBNL (www.lbl.gov) as their baby, which at least 
is true for the code distributed by the release process on 
radiance-online.org. LBNL had never, to my knowledge, gotten funds for 
support or even further development of code. And both the number of 
developers and the size of the community are much smaller than for 
Cyrus, Apache, GNU tools or similar projects. Think two orders of 
magnitude here.

d) There are a number of enhancements that would be very useful to have 
in Radiance: Algorithmic features that actually extend the work that can 
be done with Radiance, thoughts on getting the code more modular, built 
process, test process. For me, for example, the first would be the 
utmost important. For you, packaging comes with other priorities. In 
regard to some emails lately, please be prepared that your view might 
not be the greatest common divisor among Radiance users or folks concern 
with Radiance development.

e) make, dmake, gmake, RCS, GIT, subversion etc. : All nice and cool and 
useful. Newer tools could be used to Radiance's advantage. If you want 
my two cent recommendation on how to get them: Explain to LBNL why 
Radiance differs from other packages that you maintain, what the 
advantages for the end user are (e.g. thinking of 'correct' version 
numbers like 4.5.0.1 instead of 'HEAD from 11/12/2010' when Radiance is 
included on Debian's next release), and how many people are potentially 
using your release (estimated numbers for your distribution).
The situation that Radiance is included with Linux distros is 
comparatively new to Radiance. If you require principal changes to the 
upstream system, explain the advantages for the end-user and yourself 
(see last sentence) to folks managing the funds. Same goes for Solaris, 
Windows, Mac, etc.

f) Most any release process can be streamlined. The RCS/CVS I added in 
2003 on the then pirate-state radiance-online, is by no means cast in 
gold. It had been a step forward from the very first SCCS and came after 
an intermediate interval with no source revisions. Maybe CVS can be 
extended or used more fully, maybe another tool is more powerful.

In any case:

Getting Radiance to move is not so much a problem of suggesting new 
technology, but getting funds to pay folks who know what to do and 
putting them in a framework to do so over a reasonably foreseeable time 
interval.

thanks for your interest, best regards
Peter

-- 
pab advanced technologies Ltd, http://www.pab.eu


