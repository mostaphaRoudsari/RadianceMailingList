From schorsch at schorsch.com  Thu Mar  3 09:02:27 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Thu, 03 Mar 2016 18:02:27 +0100
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
Message-ID: <683070665e70da90fb3467a69cceedbe@tanha.pair.com>

While at it, I created three seperate projects on GitHub:


1.
https://github.com/gmischler/Torad
Mostly for historical reasons, and to get the hang of the system.


2.
https://github.com/gmischler/Dxf2rad-Radout
Yes, the two share most of the codebase, and are now available with
a MIT license too. Version 1.1 can also create view files.
Binaries are available from my own site. If anyone wants to contribute
any other platforms, I'll be happy to publish them there as well.
In the case of dxf2rad, this would probably first be Darwin on various
types of hardware.
With Radout, someone with a more recent Autocad and some experience with
the SDK should be able to port it with little effort. I still need
to update the R15 download on my site to include the ACIS enabled 
version.


3.
https://github.com/gmischler/RRadout
Last but not least.
As already mentioned for this one, contributions welcome and necessary!


Any further related discussions should probably go to radiance-dev.

Have fun!
-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Thu Mar  3 18:14:03 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Thu, 3 Mar 2016 18:14:03 -0800
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <683070665e70da90fb3467a69cceedbe@tanha.pair.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
Message-ID: <CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>

Schorsch,

I've got a spelling correction for RRadout/README.md. Would you mind
granting me "contributor" permissions? Or would you rather I just e-mail it
to you?

-- 
Randolph M. Fritz, Lighting Design and Simulation
+1 206 659-8617 || rmfritz3 at gmail.com

On Thu, Mar 3, 2016 at 9:02 AM, Georg Mischler <schorsch at schorsch.com>
wrote:

> While at it, I created three seperate projects on GitHub:
>
>
> 1.
> https://github.com/gmischler/Torad
> Mostly for historical reasons, and to get the hang of the system.
>
>
> 2.
> https://github.com/gmischler/Dxf2rad-Radout
> Yes, the two share most of the codebase, and are now available with
> a MIT license too. Version 1.1 can also create view files.
> Binaries are available from my own site. If anyone wants to contribute
> any other platforms, I'll be happy to publish them there as well.
> In the case of dxf2rad, this would probably first be Darwin on various
> types of hardware.
> With Radout, someone with a more recent Autocad and some experience with
> the SDK should be able to port it with little effort. I still need
> to update the R15 download on my site to include the ACIS enabled version.
>
>
> 3.
> https://github.com/gmischler/RRadout
> Last but not least.
> As already mentioned for this one, contributions welcome and necessary!
>
>
> Any further related discussions should probably go to radiance-dev.
>
> Have fun!
> -schorsch
>
> --
> Georg Mischler  --  simulations developer  --  schorsch at schorsch com
> +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
>
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160303/a115378e/attachment.html>

From schorsch at schorsch.com  Thu Mar  3 23:48:18 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 04 Mar 2016 08:48:18 +0100
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
Message-ID: <d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>

For simple documentation typos, email is probably best, because those
most likely exist on the web site as well (after checking myself,
I just fixed several instances of "seperate", one of my favourites).

For code fixes, the standard Git method seems to be pull requests.

If you want to help extending and refactoring the program, I can
of course give you contributor status.

-schorsch


Am 2016-03-04 03:14, schrieb Randolph M. Fritz:
> Schorsch,
> 
> I've got a spelling correction for RRadout/README.md. Would you mind
> granting me "contributor" permissions? Or would you rather I just
> e-mail it to you?
> 
> --
> Randolph M. Fritz, Lighting Design and Simulation
> +1 206 659-8617 || rmfritz3 at gmail.com
> 
> On Thu, Mar 3, 2016 at 9:02 AM, Georg Mischler <schorsch at schorsch.com>
> wrote:
> 
>> While at it, I created three seperate projects on GitHub:
>> 
>> 1.
>> https://github.com/gmischler/Torad [1]
>> Mostly for historical reasons, and to get the hang of the system.
>> 
>> 2.
>> https://github.com/gmischler/Dxf2rad-Radout [2]
>> Yes, the two share most of the codebase, and are now available with
>> a MIT license too. Version 1.1 can also create view files.
>> Binaries are available from my own site. If anyone wants to
>> contribute
>> any other platforms, I'll be happy to publish them there as well.
>> In the case of dxf2rad, this would probably first be Darwin on
>> various
>> types of hardware.
>> With Radout, someone with a more recent Autocad and some experience
>> with
>> the SDK should be able to port it with little effort. I still need
>> to update the R15 download on my site to include the ACIS enabled
>> version.
>> 
>> 3.
>> https://github.com/gmischler/RRadout [3]
>> Last but not least.
>> As already mentioned for this one, contributions welcome and
>> necessary!
>> 
>> Any further related discussions should probably go to radiance-dev.
>> 
>> Have fun!
>> -schorsch
>> 
>> --
>> Georg Mischler -- simulations developer -- schorsch at schorsch
>> com
>> +schorsch.com [4]+ -- lighting design tools --
>> http://www.schorsch.com/ [5]
>> 
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev [6]
> 
> 
> 
> Links:
> ------
> [1] https://github.com/gmischler/Torad
> [2] https://github.com/gmischler/Dxf2rad-Radout
> [3] https://github.com/gmischler/RRadout
> [4] http://schorsch.com
> [5] http://www.schorsch.com/
> [6] http://www.radiance-online.org/mailman/listinfo/radiance-dev
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Fri Mar  4 13:09:56 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Fri, 4 Mar 2016 13:09:56 -0800
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
Message-ID: <CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>

The errors in separate were exactly what I had in mind, so that's solved.

"For code fixes, the standard Git method seems to be pull requests." Well,
but eventually you have to push them. Or do you mean doing a "pull" on
GitHub itself?

I'd love to work on these things but, as usual, not enough time and, in
this case, no current Revit license; the thing is appallingly expensive.

-- 
Randolph M. Fritz, Lighting Design and Simulation
+1 206 659-8617 || rmfritz3 at gmail.com

On Thu, Mar 3, 2016 at 11:48 PM, Georg Mischler <schorsch at schorsch.com>
wrote:

> For simple documentation typos, email is probably best, because those
> most likely exist on the web site as well (after checking myself,
> I just fixed several instances of "seperate", one of my favourites).
>
> For code fixes, the standard Git method seems to be pull requests.
>
> If you want to help extending and refactoring the program, I can
> of course give you contributor status.
>
> -schorsch
>
>
> Am 2016-03-04 03:14, schrieb Randolph M. Fritz:
>
>> Schorsch,
>>
>> I've got a spelling correction for RRadout/README.md. Would you mind
>> granting me "contributor" permissions? Or would you rather I just
>> e-mail it to you?
>>
>> --
>> Randolph M. Fritz, Lighting Design and Simulation
>> +1 206 659-8617 || rmfritz3 at gmail.com
>>
>> On Thu, Mar 3, 2016 at 9:02 AM, Georg Mischler <schorsch at schorsch.com>
>> wrote:
>>
>> While at it, I created three seperate projects on GitHub:
>>>
>>> 1.
>>> https://github.com/gmischler/Torad [1]
>>> Mostly for historical reasons, and to get the hang of the system.
>>>
>>> 2.
>>> https://github.com/gmischler/Dxf2rad-Radout [2]
>>> Yes, the two share most of the codebase, and are now available with
>>> a MIT license too. Version 1.1 can also create view files.
>>> Binaries are available from my own site. If anyone wants to
>>> contribute
>>> any other platforms, I'll be happy to publish them there as well.
>>> In the case of dxf2rad, this would probably first be Darwin on
>>> various
>>> types of hardware.
>>> With Radout, someone with a more recent Autocad and some experience
>>> with
>>> the SDK should be able to port it with little effort. I still need
>>> to update the R15 download on my site to include the ACIS enabled
>>> version.
>>>
>>> 3.
>>> https://github.com/gmischler/RRadout [3]
>>> Last but not least.
>>> As already mentioned for this one, contributions welcome and
>>> necessary!
>>>
>>> Any further related discussions should probably go to radiance-dev.
>>>
>>> Have fun!
>>> -schorsch
>>>
>>> --
>>> Georg Mischler -- simulations developer -- schorsch at schorsch
>>> com
>>> +schorsch.com [4]+ -- lighting design tools --
>>> http://www.schorsch.com/ [5]
>>>
>>> _______________________________________________
>>> Radiance-dev mailing list
>>> Radiance-dev at radiance-online.org
>>> http://www.radiance-online.org/mailman/listinfo/radiance-dev [6]
>>>
>>
>>
>>
>> Links:
>> ------
>> [1] https://github.com/gmischler/Torad
>> [2] https://github.com/gmischler/Dxf2rad-Radout
>> [3] https://github.com/gmischler/RRadout
>> [4] http://schorsch.com
>> [5] http://www.schorsch.com/
>> [6] http://www.radiance-online.org/mailman/listinfo/radiance-dev
>>
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>>
>
> --
> Georg Mischler  --  simulations developer  --  schorsch at schorsch com
> +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
>
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160304/2db0e11c/attachment.html>

From schorsch at schorsch.com  Fri Mar  4 13:50:57 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 04 Mar 2016 22:50:57 +0100
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
	<CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
Message-ID: <5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>

Am 2016-03-04 22:09, schrieb Randolph M. Fritz:
> "For code fixes, the standard Git method seems to be pull requests."
> Well, but eventually you have to push them. Or do you mean doing a
> "pull" on GitHub itself?

I'm still figuring this out myself. Here's my current understanding:

A "pull request" is a request to the maintainer to merge changes from a
branch or a fork into the trunk. Since anyone can easily fork a project,
this seems the easiest way to contribute smaller or occasional fixes.

Not to confuse with the normal "pull" and "push" commands.


> I'd love to work on these things but, as usual, not enough time and,
> in this case, no current Revit license; the thing is appallingly
> expensive.

That seems to be a common problem. I'm hoping for people with access
at work or at school. It doesn't necessarily have to be a brand new
release though. I'm not sure when they introduced the "Custom Exporter"
API, but I think it was before Revit 2014.

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From Robert.Guglielmetti at nrel.gov  Fri Mar  4 14:03:41 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Fri, 4 Mar 2016 22:03:41 +0000
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
	<CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
	<5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
Message-ID: <D2FF523C.234DF%Robert.Guglielmetti@nrel.gov>


On 3/4/16, 2:50 PM, "Georg Mischler" <schorsch at schorsch.com> wrote:
>>
>I'm still figuring this out myself. Here's my current understanding:
>
>A "pull request" is a request to the maintainer to merge changes from a
>branch or a fork into the trunk. Since anyone can easily fork a project,
>this seems the easiest way to contribute smaller or occasional fixes.
>

That's exactly right. Pull requests leave a nice paper trail of who did
what, and who requested what, but only work within the sphere of Git.
 
Randolph, you could also just make a diff/patch of your changes on your
branch ('git diff > changes.patch') and send to Schorsch, which he can
apply manually ('git apply changes.patch'):

https://git-scm.com/docs/git-diff

https://git-scm.com/docs/git-apply


This method works across version control systems, and is what I do to get
my changes (managed on GitHub) to Greg (who's using CVS).

- Rob



From rmfritz3 at gmail.com  Fri Mar  4 17:42:00 2016
From: rmfritz3 at gmail.com (Randolph Fritz)
Date: Fri, 4 Mar 2016 17:42:00 -0800
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
	<CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
	<5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
Message-ID: <D9CBADC0-C06F-42AF-BD87-2E31A074B188@gmail.com>


> On Mar 4, 2016, at 1:50 PM, Georg Mischler <schorsch at schorsch.com> wrote:
> 
> Am 2016-03-04 22:09, schrieb Randolph M. Fritz:
>> "For code fixes, the standard Git method seems to be pull requests."
>> Well, but eventually you have to push them. Or do you mean doing a
>> "pull" on GitHub itself?
> 
> I'm still figuring this out myself. Here's my current understanding:
> 
> A "pull request" is a request to the maintainer to merge changes from a
> branch or a fork into the trunk. Since anyone can easily fork a project,
> this seems the easiest way to contribute smaller or occasional fixes.

So what?s the sequence? First I clone the repo, so I have my own copy, make some changes on my own copy, test them, commit them locally, decide to submit them, and then what do I do to upload them to you for consideration?

Rob, Schorsch seems already to have picked up the problems and fixed them, so no need to send a patch.

Randolph

From schorsch at schorsch.com  Sat Mar  5 06:09:10 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sat, 05 Mar 2016 15:09:10 +0100
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <D9CBADC0-C06F-42AF-BD87-2E31A074B188@gmail.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
	<CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
	<5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
	<D9CBADC0-C06F-42AF-BD87-2E31A074B188@gmail.com>
Message-ID: <44d2c11ce9e8b2cd1dbf02df8adb7cbb@tanha.pair.com>

Am 2016-03-05 02:42, schrieb Randolph Fritz:
>> On Mar 4, 2016, at 1:50 PM, Georg Mischler <schorsch at schorsch.com> 
>> wrote:
>> 
>> Am 2016-03-04 22:09, schrieb Randolph M. Fritz:
>>> "For code fixes, the standard Git method seems to be pull requests."
>>> Well, but eventually you have to push them. Or do you mean doing a
>>> "pull" on GitHub itself?
>> 
>> I'm still figuring this out myself. Here's my current understanding:
>> 
>> A "pull request" is a request to the maintainer to merge changes from 
>> a
>> branch or a fork into the trunk. Since anyone can easily fork a 
>> project,
>> this seems the easiest way to contribute smaller or occasional fixes.
> 
> So what?s the sequence? First I clone the repo, so I have my own copy,
> make some changes on my own copy, test them, commit them locally,
> decide to submit them, and then what do I do to upload them to you for
> consideration?

Git terminology may be confusing at times. This helped me quite a bit:
https://help.github.com/articles/github-glossary/

The typical situation is to create a "fork" first, which will give you
a copy of the project on GitHub. The fork will maintain its connection
to the original, so it can be merged back later.
In contrast, "cloning" means to pull something to your local system
for editing.

Once you have commited and pushed your changes to the fork, you can
then send a pull request to the original project.
Pull requests should really be called "merge requests".

Technically, the same effect could be had by creating a branch within
the original project. A fork has the advantage that the original author
doesn't get involved until changes have been made, hopefully tested,
and a pull request comes in about them. You can probably best think
of a fork as an "external branch".

Anything else we'll just have to experiment with, as soon as the
opportunity arrives.

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Sat Mar  5 11:26:33 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Sat, 5 Mar 2016 11:26:33 -0800
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <44d2c11ce9e8b2cd1dbf02df8adb7cbb@tanha.pair.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
	<CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
	<5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
	<D9CBADC0-C06F-42AF-BD87-2E31A074B188@gmail.com>
	<44d2c11ce9e8b2cd1dbf02df8adb7cbb@tanha.pair.com>
Message-ID: <CANeAMo+gDmnR7zPv-=A3e8DxXTU_aReo-wYoLoNvEXo8f27RSA@mail.gmail.com>

Pronoun troubles: who is doing what to which where?

So is this correct:

   1. I first use the "fork" button to create my own copy of the repository
   on GitHub
   2. Then I use "git clone" on my own system, referencing my fork. This
   downloads the repository to my system
   3. Commit my changes on my system.
   4. Use "push" on my system to upload my changes to my fork of the
   project on GitHub
   5. Then use GitHub's "New Pull Request" button on your repository to
   submit a pull request to you, who will (if you like my changes) incorporate
   my changes in your repository.

Git documents (and perhaps this is true of most free open source
documentation) seem to be written by people who know git for people who
know git. This makes the lives of people who don't know git difficult.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160305/ba804a71/attachment.html>

From schorsch at schorsch.com  Sat Mar  5 12:06:06 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sat, 05 Mar 2016 21:06:06 +0100
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <CANeAMo+gDmnR7zPv-=A3e8DxXTU_aReo-wYoLoNvEXo8f27RSA@mail.gmail.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
	<CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
	<5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
	<D9CBADC0-C06F-42AF-BD87-2E31A074B188@gmail.com>
	<44d2c11ce9e8b2cd1dbf02df8adb7cbb@tanha.pair.com>
	<CANeAMo+gDmnR7zPv-=A3e8DxXTU_aReo-wYoLoNvEXo8f27RSA@mail.gmail.com>
Message-ID: <da9531843f8b088b6c3898d1903f775d@tanha.pair.com>

Am 2016-03-05 20:26, schrieb Randolph M. Fritz:
> Pronoun troubles: who is doing what to which where?
> 
> So is this correct:
> 
> 	* I first use the "fork" button to create my own copy of the
> repository on GitHub
> 	* Then I use "git clone" on my own system, referencing my fork. This
> downloads the repository to my system
> 	* Commit my changes on my system.
> 	* Use "push" on my system to upload my changes to my fork of the
> project on GitHub
> 	* Then use GitHub's "New Pull Request" button on your repository to
> submit a pull request to you, who will (if you like my changes)
> incorporate my changes in your repository.
> 
> Git documents (and perhaps this is true of most free open source
> documentation) seem to be written by people who know git for people
> who know git. This makes the lives of people who don't know git
> difficult.


Correct on all points.
Actually, I'm not absolutely certain on which project you'll have to 
press
"New Pull Request", but that will be easy to find out.

I've probably been guilty of your #6 myself...

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Sat Mar  5 12:12:00 2016
From: rmfritz3 at gmail.com (Randolph Fritz)
Date: Sat, 5 Mar 2016 12:12:00 -0800
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <da9531843f8b088b6c3898d1903f775d@tanha.pair.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
	<CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
	<5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
	<D9CBADC0-C06F-42AF-BD87-2E31A074B188@gmail.com>
	<44d2c11ce9e8b2cd1dbf02df8adb7cbb@tanha.pair.com>
	<CANeAMo+gDmnR7zPv-=A3e8DxXTU_aReo-wYoLoNvEXo8f27RSA@mail.gmail.com>
	<da9531843f8b088b6c3898d1903f775d@tanha.pair.com>
Message-ID: <AE5875C4-C9CD-4079-BD58-98CB42BE0992@gmail.com>

> Actually, I'm not absolutely certain on which project you'll have to press
> "New Pull Request", but that will be easy to find out.

I?m pretty sure it?s on yours, since you?re the one who receives the pull request.


> I've probably been guilty of your #6 myself?

:-)

Randolph

From Robert.Guglielmetti at nrel.gov  Mon Mar  7 08:18:58 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Mon, 7 Mar 2016 16:18:58 +0000
Subject: [Radiance-dev] GitHub projects on geometry translation
In-Reply-To: <AE5875C4-C9CD-4079-BD58-98CB42BE0992@gmail.com>
References: <432e1b7a5a297095224c4c85eb08e49a@ifin.pair.com>
	<4A6F16FD-DCC0-4C63-897B-78B6F16DF2A4@lmi.net>
	<2d5e1f078c1de38d068a1d027820fee3@tanha.pair.com>
	<CANeAMoKRZNE6TRMwKwPOW0qo3i8Nm2eZkHjbvnzAGu0GrOp2SA@mail.gmail.com>
	<276114c48a064b4a93a71449e2c01a2c@tanha.pair.com>
	<683070665e70da90fb3467a69cceedbe@tanha.pair.com>
	<CANeAMoJQaF6t-ZuQatxPdjF4Mwm-4=cn0b7Q4c-yFaCoEPUoLQ@mail.gmail.com>
	<d849c6794593d64af1a73a6ecd279c8c@tanha.pair.com>
	<CANeAMoJr7kamUwxkeeoDMcVAC+swy5YHtk1=4h_jEd4-OFpbPA@mail.gmail.com>
	<5437f5b0c39a180e64ab8e2691796619@tanha.pair.com>
	<D9CBADC0-C06F-42AF-BD87-2E31A074B188@gmail.com>
	<44d2c11ce9e8b2cd1dbf02df8adb7cbb@tanha.pair.com>
	<CANeAMo+gDmnR7zPv-=A3e8DxXTU_aReo-wYoLoNvEXo8f27RSA@mail.gmail.com>
	<da9531843f8b088b6c3898d1903f775d@tanha.pair.com>
	<AE5875C4-C9CD-4079-BD58-98CB42BE0992@gmail.com>
Message-ID: <D302F7D3.2354F%Robert.Guglielmetti@nrel.gov>

On 3/5/16, 1:12 PM, "Randolph Fritz" <rmfritz3 at gmail.com> wrote:

>> Actually, I'm not absolutely certain on which project you'll have to
>>press
>> "New Pull Request", but that will be easy to find out.
>
>I?m pretty sure it?s on yours, since you?re the one who receives the pull
>request.


That is correct. 



From schorsch at schorsch.com  Wed Mar  9 18:27:00 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Thu, 10 Mar 2016 03:27:00 +0100
Subject: [Radiance-dev] State of the SCons
Message-ID: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>

Hi all,

after all those years, I found that my CVS write access is
still active.

So I went and updated the SCons build system.

It now works nicely again with the last few SCons versions.
Unfortunately, SCons still reqires Python 2.7, I'm really
hoping for it to support Python 3 soon.

The compile results are now placed in a seperate "scbuild"
directory tree. Each target platform gets its own subbranch
in there.

Target configurations now differentiate between 32 and 46 bit
systems. I had to rename the platform config files for that.
Currently the build is autmatically set to the architecture
of the host platform.

It might be nice to be able to cross-compile at least for the
companion bit-architecture of the same platform, which should be
possible to do.
On the other hand, I'm not sure if its really worth the effort.
How many people are still running Radiance on 32 bit systems?
But at least the possibility should be kept open, so we won't
need another redesign when the first 128 bit systems come out in
a few years...

On linux, everything builds without a hitch. We get the same
executables as with makeall, and then some.
It's also much faster than ten years ago! ;)

On Windows, everything without third-party dependencies builds
fine with the current VC 2015 "Community" compiler.
I haven't yet gotten around to fetching the Windows dev packages
of Tifflib and QT, so those parts need some more work.
X11 is probably not worth the hassle (though there might be ways).

The tifflib included with the NREL binaries didn't work, which
means they used a different compiler. In fact, they must be using
gcc on Windows, because I found (and fixed) some non-standard
allocation magic in src/cv/bsdftrans.cpp that only gcc accepts.

I haven't looked at qtrvu very closely. But even on a cursory
glance it looks straightforward to build. This should not be a
problem for SCons and MSCC, once all the dependencies are in place.
Ah... can we standardize on a file name extension for C++ files in
Radiance? Right now we have both *.cxx and *.cpp.

With the current MS compiler on 64 bit, there are a huge number
of coercion warnings all throughout the code. Most of those are
probably harmless, even if annoying.

There are two files tough, where the warning says that "the
result of a 32 bit shift operation was coerced to 64 bit. Was
there a 64 bit shift intended?"
   src/common/bmpfile.c
   src/util/rttree_reduce.c
I can't really tell, so I've just marked the lines with an
"XXX" comment for review.


If anyone wants to give the "new" SCons a try on any platform,
go ahead!

Please tell me about your results, particularly about any
changes to the config files you might find necessary.
Instructions are in ray/INSTALL.scons and ray/platform/README.
All changes are in CVS, the HEAD package should include those
changes in a day or so.


have fun!

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Thu Mar 10 08:28:41 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Thu, 10 Mar 2016 08:28:41 -0800
Subject: [Radiance-dev] State of the SCons
In-Reply-To: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
Message-ID: <A9A4BEDB-9F51-47D6-B703-F87EE3955A76@gmail.com>

Hi Schorsch,

Thanks for all your efforts!  I guess we now have 3 working build systems for Radiance (the old rmake script, cmake, and SCons is back).

The 64-bit coercion warnings are as you say, mostly harmless.  The ones isn bmpfile.c are going to be 8-bit values at most, so no worries there.  However, the one you pointed out in rttree_reduce.c was a potential bug on large arrays, so I changed it to (size_t)1<<(expression).  I hope your compiler accepts this without complaint.  If it gives you another warning, please suggest a better strategy.

Cheers!
-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: [Radiance-dev] State of the SCons
> Date: March 9, 2016 6:27:00 PM PST
> 
> Hi all,
> 
> after all those years, I found that my CVS write access is
> still active.
> 
> So I went and updated the SCons build system.
> 
> It now works nicely again with the last few SCons versions.
> Unfortunately, SCons still reqires Python 2.7, I'm really
> hoping for it to support Python 3 soon.
> 
> The compile results are now placed in a seperate "scbuild"
> directory tree. Each target platform gets its own subbranch
> in there.
> 
> Target configurations now differentiate between 32 and 46 bit
> systems. I had to rename the platform config files for that.
> Currently the build is autmatically set to the architecture
> of the host platform.
> 
> It might be nice to be able to cross-compile at least for the
> companion bit-architecture of the same platform, which should be
> possible to do.
> On the other hand, I'm not sure if its really worth the effort.
> How many people are still running Radiance on 32 bit systems?
> But at least the possibility should be kept open, so we won't
> need another redesign when the first 128 bit systems come out in
> a few years...
> 
> On linux, everything builds without a hitch. We get the same
> executables as with makeall, and then some.
> It's also much faster than ten years ago! ;)
> 
> On Windows, everything without third-party dependencies builds
> fine with the current VC 2015 "Community" compiler.
> I haven't yet gotten around to fetching the Windows dev packages
> of Tifflib and QT, so those parts need some more work.
> X11 is probably not worth the hassle (though there might be ways).
> 
> The tifflib included with the NREL binaries didn't work, which
> means they used a different compiler. In fact, they must be using
> gcc on Windows, because I found (and fixed) some non-standard
> allocation magic in src/cv/bsdftrans.cpp that only gcc accepts.
> 
> I haven't looked at qtrvu very closely. But even on a cursory
> glance it looks straightforward to build. This should not be a
> problem for SCons and MSCC, once all the dependencies are in place.
> Ah... can we standardize on a file name extension for C++ files in
> Radiance? Right now we have both *.cxx and *.cpp.
> 
> With the current MS compiler on 64 bit, there are a huge number
> of coercion warnings all throughout the code. Most of those are
> probably harmless, even if annoying.
> 
> There are two files tough, where the warning says that "the
> result of a 32 bit shift operation was coerced to 64 bit. Was
> there a 64 bit shift intended?"
>  src/common/bmpfile.c
>  src/util/rttree_reduce.c
> I can't really tell, so I've just marked the lines with an
> "XXX" comment for review.
> 
> 
> If anyone wants to give the "new" SCons a try on any platform,
> go ahead!
> 
> Please tell me about your results, particularly about any
> changes to the config files you might find necessary.
> Instructions are in ray/INSTALL.scons and ray/platform/README.
> All changes are in CVS, the HEAD package should include those
> changes in a day or so.
> 
> 
> have fun!
> 
> -schorsch
> 
> -- 
> Georg Mischler  --  simulations developer  --  schorsch at schorsch com
> +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
> 


From Robert.Guglielmetti at nrel.gov  Thu Mar 10 09:05:50 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Thu, 10 Mar 2016 17:05:50 +0000
Subject: [Radiance-dev] State of the SCons
In-Reply-To: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
Message-ID: <D306EE33.23943%Robert.Guglielmetti@nrel.gov>

Thanks Georg, and thanks Greg for hitting that one issue Schorsch raised
there. Other replies below...

On 3/9/16, 7:27 PM, "Georg Mischler" <schorsch at schorsch.com> wrote:

>
>It might be nice to be able to cross-compile at least for the
>companion bit-architecture of the same platform, which should be
>possible to do.
>On the other hand, I'm not sure if its really worth the effort.
>How many people are still running Radiance on 32 bit systems?
>But at least the possibility should be kept open, so we won't
>need another redesign when the first 128 bit systems come out in
>a few years...


We gave up on providing 32-bit Mac and Linux packages here at NREL, but do
still make 32-bit Windows packages, only because we include Radiance with
OpenStudio and we are still supporting 32-bit Windows for OpenStudio users
(I forget why, but we just do). I was making universal Mac binaries, but
it was a PITA to maintain the tifflib and the packages are 2x as large, so
I dropped it.


>On Windows, everything without third-party dependencies builds
>fine with the current VC 2015 "Community" compiler.
>I haven't yet gotten around to fetching the Windows dev packages
>of Tifflib and QT, so those parts need some more work.
>X11 is probably not worth the hassle (though there might be ways).
>
>The tifflib included with the NREL binaries didn't work, which
>means they used a different compiler. In fact, they must be using
>gcc on Windows, because I found (and fixed) some non-standard
>allocation magic in src/cv/bsdftrans.cpp that only gcc accepts.



I am "they". =) Not sure what didn't work for you, Georg. I use a 32-bit
windows tifflib from the interwebs
(http://gnuwin32.sourceforge.net/packages/tiff.htm), and rolled my own
64-bit when we started making 64-bit Windows packages. I do believe I used
gcc, but I can't remember and can't find my notes. Please let me know if
there's a better recommended way.



>I haven't looked at qtrvu very closely. But even on a cursory
>glance it looks straightforward to build. This should not be a
>problem for SCons and MSCC, once all the dependencies are in place.
>Ah... can we standardize on a file name extension for C++ files in
>Radiance? Right now we have both *.cxx and *.cpp.


Maybe when you have time, you can look at qtrvu and help make it better.
The GUI was modeled after your Windows rvu, included with Rayfront. The
folks at Kitware wrote it, but only implemented the bits I felt were
absolutely necessary (limited budget). I haven't had access to Rayfront's
'rvu' in a while but I do recall there were some things we left out. As
far as the multiple filename extensions, I had no idea. =) I ASSumed .cxx
was for headers or some shit. Pretty sure you're the first person to look
at that code besides me since it was written! If it's a major deal, I
guess we can change it, but it doesn't seem to be hurting anyone except
for the anal retentive types here. =)

So good to see your name in my inbox again, Schorsch!

- Rob 



From schorsch at schorsch.com  Thu Mar 10 15:09:37 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 11 Mar 2016 00:09:37 +0100
Subject: [Radiance-dev] State of the SCons
In-Reply-To: <D306EE33.23943%Robert.Guglielmetti@nrel.gov>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
Message-ID: <f44ea5cd659505433401875d2fe6b935@tanha.pair.com>

Am 2016-03-10 18:05, schrieb Guglielmetti, Robert:
> Thanks Georg, and thanks Greg for hitting that one issue Schorsch 
> raised
> there. Other replies below...

This is one of the last mailing lists where people still seem to value
the old art of citation editing... ;)


> We gave up on providing 32-bit Mac and Linux packages here at NREL, but 
> do
> still make 32-bit Windows packages, only because we include Radiance 
> with
> OpenStudio and we are still supporting 32-bit Windows for OpenStudio 
> users

I suspected as much. I'm usually way behind the curve in terms of
hardware, and even I have thrown out the last 32bit box last year.
I assume it will still build on 32bit anyway, but we don't need to go
the extra mile for that.


>> The tifflib included with the NREL binaries didn't work, which
>> means they used a different compiler. In fact, they must be using
>> gcc on Windows, because I found (and fixed) some non-standard
>> allocation magic in src/cv/bsdftrans.cpp that only gcc accepts.
> 
> I am "they". =) Not sure what didn't work for you, Georg. I use a 
> 32-bit
> windows tifflib from the interwebs
> (http://gnuwin32.sourceforge.net/packages/tiff.htm), and rolled my own
> 64-bit when we started making 64-bit Windows packages. I do believe I 
> used
> gcc, but I can't remember and can't find my notes. Please let me know 
> if
> there's a better recommended way.

Lovely Windows...
I later noticed that I was compiling single-threaded, while the default
on Windows seems to be multi-threaded - whether you need it or not.
Which means you're actually linking to a different system library
(there's about a dozen of them). I've now built my own tifflib, also for
the headers, but had the same problem with that one at first.


> Maybe when you have time, you can look at qtrvu and help make it 
> better.
> The GUI was modeled after your Windows rvu, included with Rayfront.

The old Winrview actually came from LBNL (for Desktop Radiance), and I
just fixed it to actually work as intended. I don't think that one has
ever been published in source. Would that fall under the Radiance 
licence?
Then maybe we could at least pick it for ideas. I remember I had to 
apply
some hacks to be able to stop a running simulation from the UI thread.

I also have something called "winimage" sitting on a disk, but no idea 
of
its state of maturity (Rayfront uses an image viewer in Python). It has 
the
same LBNL copyright, so we might be able to play with it as well.


What package do I need to fetch for the qt libraries?
Qtrvu looks nice, but playing around with it revealed a few glitches.
Getting the window size right is probably simple, why it always wants
you to hit "enter" twice remains to be seen.

I have no idea how much time I'll have for those things in the near or
not so near future, so don't hold your breath. I just saw an opportunity
in the past few weeks (starting with temporary access to Revit), so I
jumped on the topic again a bit.


>> Ah... can we standardize on a file name extension for C++ files in
>> Radiance? Right now we have both *.cxx and *.cpp.
> 
> As far as the multiple filename extensions, I had no idea. =) I ASSumed 
> .cxx
> was for headers or some shit. Pretty sure you're the first person to 
> look
> at that code besides me since it was written! If it's a major deal, I
> guess we can change it, but it doesn't seem to be hurting anyone except
> for the anal retentive types here. =)

Not a big issue, but confusing and distracting. The size and complexity 
of
the Radiance sources already makes them confusing enough...
The only counter example is src/cv/bsdftrans.cpp, and a (generated?) 
file
in CMakeFiles/.

Some people apparently do use .cxx, to distinguish the shortcut from 
"CPP"
for the preprocessor. Out in the wild though, .cpp seems to be about 5
times more popular. I suggest to decide on a standard now (no matter 
which),
while the "problem" is still not really one. We should expect the number
of C++ files to grow in the future.


-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Thu Mar 10 15:13:55 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 11 Mar 2016 00:13:55 +0100
Subject: [Radiance-dev] State of the SCons
In-Reply-To: <A9A4BEDB-9F51-47D6-B703-F87EE3955A76@gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<A9A4BEDB-9F51-47D6-B703-F87EE3955A76@gmail.com>
Message-ID: <ed3edcbdc2507117ef19dc6d4019ffde@tanha.pair.com>

Hi Greg,

I think then I'll "fix" the other instances as well anyway.
It may not technically matter, but any silenced compiler warning is
a distraction less.

-schorsch

Am 2016-03-10 17:28, schrieb Gregory J. Ward:
> Hi Schorsch,
> 
> Thanks for all your efforts!  I guess we now have 3 working build
> systems for Radiance (the old rmake script, cmake, and SCons is back).
> 
> The 64-bit coercion warnings are as you say, mostly harmless.  The
> ones isn bmpfile.c are going to be 8-bit values at most, so no worries
> there.  However, the one you pointed out in rttree_reduce.c was a
> potential bug on large arrays, so I changed it to
> (size_t)1<<(expression).  I hope your compiler accepts this without
> complaint.  If it gives you another warning, please suggest a better
> strategy.
> 
> Cheers!
> -Greg
> 
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: [Radiance-dev] State of the SCons
>> Date: March 9, 2016 6:27:00 PM PST
>> 
>> Hi all,
>> 
>> after all those years, I found that my CVS write access is
>> still active.
>> 
>> So I went and updated the SCons build system.
>> 
>> It now works nicely again with the last few SCons versions.
>> Unfortunately, SCons still reqires Python 2.7, I'm really
>> hoping for it to support Python 3 soon.
>> 
>> The compile results are now placed in a seperate "scbuild"
>> directory tree. Each target platform gets its own subbranch
>> in there.
>> 
>> Target configurations now differentiate between 32 and 46 bit
>> systems. I had to rename the platform config files for that.
>> Currently the build is autmatically set to the architecture
>> of the host platform.
>> 
>> It might be nice to be able to cross-compile at least for the
>> companion bit-architecture of the same platform, which should be
>> possible to do.
>> On the other hand, I'm not sure if its really worth the effort.
>> How many people are still running Radiance on 32 bit systems?
>> But at least the possibility should be kept open, so we won't
>> need another redesign when the first 128 bit systems come out in
>> a few years...
>> 
>> On linux, everything builds without a hitch. We get the same
>> executables as with makeall, and then some.
>> It's also much faster than ten years ago! ;)
>> 
>> On Windows, everything without third-party dependencies builds
>> fine with the current VC 2015 "Community" compiler.
>> I haven't yet gotten around to fetching the Windows dev packages
>> of Tifflib and QT, so those parts need some more work.
>> X11 is probably not worth the hassle (though there might be ways).
>> 
>> The tifflib included with the NREL binaries didn't work, which
>> means they used a different compiler. In fact, they must be using
>> gcc on Windows, because I found (and fixed) some non-standard
>> allocation magic in src/cv/bsdftrans.cpp that only gcc accepts.
>> 
>> I haven't looked at qtrvu very closely. But even on a cursory
>> glance it looks straightforward to build. This should not be a
>> problem for SCons and MSCC, once all the dependencies are in place.
>> Ah... can we standardize on a file name extension for C++ files in
>> Radiance? Right now we have both *.cxx and *.cpp.
>> 
>> With the current MS compiler on 64 bit, there are a huge number
>> of coercion warnings all throughout the code. Most of those are
>> probably harmless, even if annoying.
>> 
>> There are two files tough, where the warning says that "the
>> result of a 32 bit shift operation was coerced to 64 bit. Was
>> there a 64 bit shift intended?"
>>  src/common/bmpfile.c
>>  src/util/rttree_reduce.c
>> I can't really tell, so I've just marked the lines with an
>> "XXX" comment for review.
>> 
>> 
>> If anyone wants to give the "new" SCons a try on any platform,
>> go ahead!
>> 
>> Please tell me about your results, particularly about any
>> changes to the config files you might find necessary.
>> Instructions are in ray/INSTALL.scons and ray/platform/README.
>> All changes are in CVS, the HEAD package should include those
>> changes in a day or so.
>> 
>> 
>> have fun!
>> 
>> -schorsch
>> 
>> --
>> Georg Mischler  --  simulations developer  --  schorsch at schorsch 
>> com
>> +schorsch.com+  --  lighting design tools  --  
>> http://www.schorsch.com/
>> 
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Sat Mar 12 18:24:09 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Sat, 12 Mar 2016 18:24:09 -0800
Subject: [Radiance-dev] Release numbering
Message-ID: <CANeAMoKY11r-hyPNba+EQ3uKoNHnnksqaVNor-2=3+PKAyDeLw@mail.gmail.com>

It occurs to me that what we are calling a "release," the rest of the world
has taken to calling a "release candidate" -- the version that is almost
complete, but still has a couple of annoying bugs hiding that users
identify as soon as they put it into service. Perhaps this would be a
convention we could adopt.
-- 
Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160312/d1ce640e/attachment.html>

From rob.guglielmetti at gmail.com  Sat Mar 12 18:44:54 2016
From: rob.guglielmetti at gmail.com (Rob Guglielmetti)
Date: Sat, 12 Mar 2016 19:44:54 -0700
Subject: [Radiance-dev] Release numbering
In-Reply-To: <CANeAMoKY11r-hyPNba+EQ3uKoNHnnksqaVNor-2=3+PKAyDeLw@mail.gmail.com>
References: <CANeAMoKY11r-hyPNba+EQ3uKoNHnnksqaVNor-2=3+PKAyDeLw@mail.gmail.com>
Message-ID: <8074FB8F-C02D-41B8-B24C-FD14C5D906D2@gmail.com>

Actually, the release candidate is the ?b? release in Greg?s parlance, which usually exists for a very brief time. If you look at the GitHub releases, we did make a 4.2.b.0, followed a week later by the official 4.2 release. It?s my understanding the HEAD is considered alpha code until right before an official release. Radiance major versions are released when they are released, generally following a brief period where it?s considered ?beta?, and then the version goes back to ?a? in the HEAD and stays there until shortly before the next major release, again to ?b?, and then, new version number. Twas ever thus. 

At NREL we hang an additional identifier after the ?a? on each of our ?releases? (which are really just snapshots, or tags), just to keep them in order. It?s not true semantic versioning, but it?s a way for us to keep track of which tag we?re using with which OpenStudio releases and whatnot. It can be confusing because our v5.0.a.5 predates the official release v5.0, which itself predates the latest set of packages we made: v5.0.a.8. 






> On Mar 12, 2016, at 7:24 PM, Randolph M. Fritz <rmfritz3 at gmail.com> wrote:
> 
> It occurs to me that what we are calling a "release," the rest of the world has taken to calling a "release candidate" -- the version that is almost complete, but still has a couple of annoying bugs hiding that users identify as soon as they put it into service. Perhaps this would be a convention we could adopt.
> -- 
> Randolph
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev



From gregoryjward at gmail.com  Sun Mar 13 18:20:40 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Sun, 13 Mar 2016 18:20:40 -0700
Subject: [Radiance-dev] Release numbering
In-Reply-To: <8074FB8F-C02D-41B8-B24C-FD14C5D906D2@gmail.com>
References: <CANeAMoKY11r-hyPNba+EQ3uKoNHnnksqaVNor-2=3+PKAyDeLw@mail.gmail.com>
	<8074FB8F-C02D-41B8-B24C-FD14C5D906D2@gmail.com>
Message-ID: <71B747E0-212E-48EB-9596-3C4D32EB7D86@gmail.com>

We definitely have a more organic, non-standard release process for Radiance.  I am open to suggestions for alternatives.  One of our ongoing issues is the lack of a test suite to verify a release candidate and identify regressions.  We haven't had the resources to create such a test suite, though Rob took a shot at it at some point.

-Greg

> From: Rob Guglielmetti <rob.guglielmetti at gmail.com>
> Subject: Re: [Radiance-dev] Release numbering
> Date: March 12, 2016 6:44:54 PM PST
> 
> Actually, the release candidate is the ?b? release in Greg?s parlance, which usually exists for a very brief time. If you look at the GitHub releases, we did make a 4.2.b.0, followed a week later by the official 4.2 release. It?s my understanding the HEAD is considered alpha code until right before an official release. Radiance major versions are released when they are released, generally following a brief period where it?s considered ?beta?, and then the version goes back to ?a? in the HEAD and stays there until shortly before the next major release, again to ?b?, and then, new version number. Twas ever thus. 
> 
> At NREL we hang an additional identifier after the ?a? on each of our ?releases? (which are really just snapshots, or tags), just to keep them in order. It?s not true semantic versioning, but it?s a way for us to keep track of which tag we?re using with which OpenStudio releases and whatnot. It can be confusing because our v5.0.a.5 predates the official release v5.0, which itself predates the latest set of packages we made: v5.0.a.8. 
> 
> 
>> On Mar 12, 2016, at 7:24 PM, Randolph M. Fritz <rmfritz3 at gmail.com> wrote:
>> 
>> It occurs to me that what we are calling a "release," the rest of the world has taken to calling a "release candidate" -- the version that is almost complete, but still has a couple of annoying bugs hiding that users identify as soon as they put it into service. Perhaps this would be a convention we could adopt.
>> -- 
>> Randolph


From rmfritz3 at gmail.com  Sun Mar 13 19:28:38 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Sun, 13 Mar 2016 19:28:38 -0700
Subject: [Radiance-dev] Release numbering
In-Reply-To: <71B747E0-212E-48EB-9596-3C4D32EB7D86@gmail.com>
References: <CANeAMoKY11r-hyPNba+EQ3uKoNHnnksqaVNor-2=3+PKAyDeLw@mail.gmail.com>
	<8074FB8F-C02D-41B8-B24C-FD14C5D906D2@gmail.com>
	<71B747E0-212E-48EB-9596-3C4D32EB7D86@gmail.com>
Message-ID: <CANeAMo+0dxwJuQcUYWERve5o8YimzKw1dpfDb0QZAduAm9Qx8Q@mail.gmail.com>

As I recall, the way major releases have usually worked is that there's a
flurry of fixes afterwards as people adopt them, after which things settle
down, and the head goes back to being an alpha. So I was thinking in terms
of calling out the major releases as release candidates, and formalizing
the release after the flurry of fixes.

A number of us nibbled at the test suite at some point, but actually
designing it and developing it takes more time than any of us seem to have
available. :-(

Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160313/6c971778/attachment.html>

From schorsch at schorsch.com  Mon Mar 14 04:03:31 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Mon, 14 Mar 2016 12:03:31 +0100
Subject: [Radiance-dev] Release numbering
In-Reply-To: <71B747E0-212E-48EB-9596-3C4D32EB7D86@gmail.com>
References: <CANeAMoKY11r-hyPNba+EQ3uKoNHnnksqaVNor-2=3+PKAyDeLw@mail.gmail.com>
	<8074FB8F-C02D-41B8-B24C-FD14C5D906D2@gmail.com>
	<71B747E0-212E-48EB-9596-3C4D32EB7D86@gmail.com>
Message-ID: <a36e43d7a84bf27c2dd923d01f99c25e@tanha.pair.com>

The SCons build system has had a testing infrastructure for many years,
unfortunately with only a minimal number of actual test cases.
As I have seen, the CMake system has one too, suffering the same 
problem.

It's just a matter of interested parties contributing test cases.

Covering all the existing code is one challenge. But it would be most 
helpful
if anyone adding features also provided test cases to demonstrate what 
they are
supposed to do, and even more importantly what they are NOT supposed to 
do.

Those could be just small(!) datasets with a description, and not 
necessarily
already integrated into a test suite. Someone who is familiar with one 
of the
suites can then integrate them. In the ideal case, no new feature wold 
go into
a "final release" without a comprehensive set of test cases covering it.

Besides that, given the "organic" development and limited resources, I'm 
not
sure if changing the release cycle would make much of a difference in 
when bugs
are found. There's only a small number of people checking out the HEAD 
version,
and those only try it on a very limited data set.

The majority will only download after a new final release has been 
announced,
no matter wether the release candidate has been around for a week or a 
month.
And only then will the new release be confronted with the "interesting" 
data
that actually triggers most bugs.

The important part here is to then create test cases specifically 
testing for
those bugs, to make sure they won't resurface later (regression 
testing).
QA is a dirty job, but someone's gotta do it...

-schorsch


Am 2016-03-14 02:20, schrieb Gregory J. Ward:
> We definitely have a more organic, non-standard release process for
> Radiance.  I am open to suggestions for alternatives.  One of our
> ongoing issues is the lack of a test suite to verify a release
> candidate and identify regressions.  We haven't had the resources to
> create such a test suite, though Rob took a shot at it at some point.
> 
> -Greg
> 
>> From: Rob Guglielmetti <rob.guglielmetti at gmail.com>
>> Subject: Re: [Radiance-dev] Release numbering
>> Date: March 12, 2016 6:44:54 PM PST
>> 
>> Actually, the release candidate is the ?b? release in Greg?s parlance, 
>> which usually exists for a very brief time. If you look at the GitHub 
>> releases, we did make a 4.2.b.0, followed a week later by the official 
>> 4.2 release. It?s my understanding the HEAD is considered alpha code 
>> until right before an official release. Radiance major versions are 
>> released when they are released, generally following a brief period 
>> where it?s considered ?beta?, and then the version goes back to ?a? in 
>> the HEAD and stays there until shortly before the next major release, 
>> again to ?b?, and then, new version number. Twas ever thus.
>> 
>> At NREL we hang an additional identifier after the ?a? on each of our 
>> ?releases? (which are really just snapshots, or tags), just to keep 
>> them in order. It?s not true semantic versioning, but it?s a way for 
>> us to keep track of which tag we?re using with which OpenStudio 
>> releases and whatnot. It can be confusing because our v5.0.a.5 
>> predates the official release v5.0, which itself predates the latest 
>> set of packages we made: v5.0.a.8.
>> 
>> 
>>> On Mar 12, 2016, at 7:24 PM, Randolph M. Fritz <rmfritz3 at gmail.com> 
>>> wrote:
>>> 
>>> It occurs to me that what we are calling a "release," the rest of the 
>>> world has taken to calling a "release candidate" -- the version that 
>>> is almost complete, but still has a couple of annoying bugs hiding 
>>> that users identify as soon as they put it into service. Perhaps this 
>>> would be a convention we could adopt.
>>> --
>>> Randolph
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From Robert.Guglielmetti at nrel.gov  Mon Mar 14 08:51:30 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Mon, 14 Mar 2016 15:51:30 +0000
Subject: [Radiance-dev] State of the SCons
In-Reply-To: <f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
Message-ID: <D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>

On 3/10/16, 4:09 PM, "Georg Mischler" <schorsch at schorsch.com> wrote:

>Am 2016-03-10 18:05, schrieb Guglielmetti, Robert:
>> Thanks Georg, and thanks Greg for hitting that one issue Schorsch
>> raised
>> there. Other replies below...
>
>This is one of the last mailing lists where people still seem to value
>the old art of citation editing... ;)


Haha, I figured you'd appreciate it. I've all but abandoned the practice,
since MS Outlook makes it very difficult to do (and not get the formatting
screwed up), and even when it works, I've actually had people tell me they
received "blank" emails from me, because they didn't think to scroll down
past the first quoted bit =/


>
>The old Winrview actually came from LBNL (for Desktop Radiance), and I
>just fixed it to actually work as intended. I don't think that one has
>ever been published in source. Would that fall under the Radiance
>licence?
>Then maybe we could at least pick it for ideas. I remember I had to
>apply
>some hacks to be able to stop a running simulation from the UI thread.
>
>I also have something called "winimage" sitting on a disk, but no idea
>of
>its state of maturity (Rayfront uses an image viewer in Python). It has
>the
>same LBNL copyright, so we might be able to play with it as well.


Ah! I did not know that. I had ASSumed that yours was the only Windows
version, and so when we started the GitHub mirror we just rolled our own
rvu, thinking there were no open source options at the time. I have no
idea where the source for that Desktop Radiance rvu might be.


>
>What package do I need to fetch for the qt libraries?
>Qtrvu looks nice, but playing around with it revealed a few glitches.
>Getting the window size right is probably simple, why it always wants
>you to hit "enter" twice remains to be seen.


We updated qtrvu to use Qt5 a while back; specifically, we recommend Qt
5.3.2 for building OpenStudio, and that version seems to work fine for
qtrvu as well. Yeah it's definitely a little rough around the edges but
it's useable. 



>
>I have no idea how much time I'll have for those things in the near or
>not so near future, so don't hold your breath. I just saw an opportunity
>in the past few weeks (starting with temporary access to Revit), so I
>jumped on the topic again a bit.


Understood. It's sure nice to hear from you again though!

- Rob



From Robert.Guglielmetti at nrel.gov  Mon Mar 14 08:57:59 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Mon, 14 Mar 2016 15:57:59 +0000
Subject: [Radiance-dev] Release numbering
In-Reply-To: <a36e43d7a84bf27c2dd923d01f99c25e@tanha.pair.com>
References: <CANeAMoKY11r-hyPNba+EQ3uKoNHnnksqaVNor-2=3+PKAyDeLw@mail.gmail.com>
	<8074FB8F-C02D-41B8-B24C-FD14C5D906D2@gmail.com>
	<71B747E0-212E-48EB-9596-3C4D32EB7D86@gmail.com>
	<a36e43d7a84bf27c2dd923d01f99c25e@tanha.pair.com>
Message-ID: <D30C3A35.23A72%Robert.Guglielmetti@nrel.gov>

On 3/14/16, 5:03 AM, "Georg Mischler" <schorsch at schorsch.com> wrote:

>The SCons build system has had a testing infrastructure for many years,
>unfortunately with only a minimal number of actual test cases.
>As I have seen, the CMake system has one too, suffering the same
>problem.


I was gonna plug your tests too. I followed what you had in SCons when I
started the CTest stuff. I decided to start with tests on the core
elements we were using for OpenStudio's Radiance workflows, but never got
very far, nor very concrete (it's hard to ensure the correct binaries and
libs are being exercised, when you have multiple flavors of Radiance on
board). 

We are about to build a rigorous testing and continuous integration
infrastructure around the OpenStudio and OS measures projects, which I
hope will pay dividends on the Radiance side of things. But I'm not
holding my breath on that last bit right now. We'll see.

- Rob



From schorsch at schorsch.com  Mon Mar 14 19:26:50 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Tue, 15 Mar 2016 03:26:50 +0100
Subject: [Radiance-dev] State of the SCons
In-Reply-To: <D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
Message-ID: <ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>

Am 2016-03-14 16:51, schrieb Guglielmetti, Robert:
> 
> Ah! I did not know that. I had ASSumed that yours was the only Windows
> version, and so when we started the GitHub mirror we just rolled our 
> own
> rvu, thinking there were no open source options at the time. I have no
> idea where the source for that Desktop Radiance rvu might be.

The sources to both winrview and winimage are sitting here on my
disk. I don't think the DR team changed anything relevant after
my fixes.

Unfortunately, my old contract with LBNL does not cover
redistribution in source form. To make this possible, we'd need
some statement from them that those programs can be considered a
part of the normal Radiance distribution and fall under the
"Radiance open source license".

@Greg, are you entitled to make such a statement?


> We updated qtrvu to use Qt5 a while back; specifically, we recommend Qt
> 5.3.2 for building OpenStudio, and that version seems to work fine for
> qtrvu as well. Yeah it's definitely a little rough around the edges but
> it's useable.

I've played with the Qt4 tool for SCons on linux a bit.
But I didn't get far, probably because Suse installs Qt in
different places than the tool expects.

But now I'll fetch the Windows libraries and the Qt5 tool.
Has it actually ever been built on a non-Windows system?

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/


From gregoryjward at gmail.com  Mon Mar 14 19:40:53 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Mon, 14 Mar 2016 19:40:53 -0700
Subject: [Radiance-dev] State of the SCons
In-Reply-To: <ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
Message-ID: <3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>

> Am 2016-03-14 16:51, schrieb Guglielmetti, Robert:
>> Ah! I did not know that. I had ASSumed that yours was the only Windows
>> version, and so when we started the GitHub mirror we just rolled our own
>> rvu, thinking there were no open source options at the time. I have no
>> idea where the source for that Desktop Radiance rvu might be.
> 
> The sources to both winrview and winimage are sitting here on my
> disk. I don't think the DR team changed anything relevant after
> my fixes.
> 
> Unfortunately, my old contract with LBNL does not cover
> redistribution in source form. To make this possible, we'd need
> some statement from them that those programs can be considered a
> part of the normal Radiance distribution and fall under the
> "Radiance open source license".
> 
> @Greg, are you entitled to make such a statement?

I think so.  I'm generally the gatekeeper to the Radiance source tree, and can "welcome" new code that is offered.  Since LBNL contracted you to develop it in the first place from what you say, this should not present a problem.

-Greg

From schorsch at schorsch.com  Tue Mar 15 03:55:10 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Tue, 15 Mar 2016 11:55:10 +0100
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
Message-ID: <99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>

Am 2016-03-15 03:40, schrieb Gregory J. Ward:
>> The sources to both winrview and winimage are sitting here on my
>> disk. I don't think the DR team changed anything relevant after
>> my fixes.
>> 
>> Unfortunately, my old contract with LBNL does not cover
>> redistribution in source form. To make this possible, we'd need
>> some statement from them that those programs can be considered a
>> part of the normal Radiance distribution and fall under the
>> "Radiance open source license".
>> 
>> @Greg, are you entitled to make such a statement?
> 
> I think so.  I'm generally the gatekeeper to the Radiance source tree,
> and can "welcome" new code that is offered.  Since LBNL contracted you
> to develop it in the first place from what you say, this should not
> present a problem.

Actually, it was developed by LBNL (or by other contractors for LBNL),
and licensed to me as part of "the computer program(s) described in
attached exhibit A and known as Radiance (LBNL reference number
CR-1266/1387/1667/1668/1669)".

But that only reinforces your point, so I'll go with your statement.

That brings us to the practical questions.
Should I just commit two new subdirectories to CVS?
But that would probably be the most "official" solution.

It's not production code at the moment, and most certainly won't even
compile with the current version of Radiance. I'd rather treat it as
a kind of rock quarry of concepts and ideas to use when doing it right.
It won't interact with any of the build systems though, and maybe it
doesn't need to be included in the nightly HEAD downloads either.

-schorsch

PS: Darn, just started snowing again here...

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Tue Mar 15 06:36:37 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Tue, 15 Mar 2016 06:36:37 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
Message-ID: <66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>

Hi Georg,

I vaguely remember winrview as being somewhat buggy.  Did you fix it up?  Does it offer advantages to Windows users over the current qt-based interface?  Similarly, is the winimage program superior to what Windows folks are using now?

I don't want to welcome back something that's going to be more trouble than it's worth, now that I've been told *we* developed it....

Cheers,
-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: [Radiance-dev] Winrview and Winimage sources
> Date: March 15, 2016 3:55:10 AM PDT
> 
> Am 2016-03-15 03:40, schrieb Gregory J. Ward:
>>> The sources to both winrview and winimage are sitting here on my
>>> disk. I don't think the DR team changed anything relevant after
>>> my fixes.
>>> Unfortunately, my old contract with LBNL does not cover
>>> redistribution in source form. To make this possible, we'd need
>>> some statement from them that those programs can be considered a
>>> part of the normal Radiance distribution and fall under the
>>> "Radiance open source license".
>>> @Greg, are you entitled to make such a statement?
>> I think so.  I'm generally the gatekeeper to the Radiance source tree,
>> and can "welcome" new code that is offered.  Since LBNL contracted you
>> to develop it in the first place from what you say, this should not
>> present a problem.
> 
> Actually, it was developed by LBNL (or by other contractors for LBNL),
> and licensed to me as part of "the computer program(s) described in
> attached exhibit A and known as Radiance (LBNL reference number
> CR-1266/1387/1667/1668/1669)".
> 
> But that only reinforces your point, so I'll go with your statement.
> 
> That brings us to the practical questions.
> Should I just commit two new subdirectories to CVS?
> But that would probably be the most "official" solution.
> 
> It's not production code at the moment, and most certainly won't even
> compile with the current version of Radiance. I'd rather treat it as
> a kind of rock quarry of concepts and ideas to use when doing it right.
> It won't interact with any of the build systems though, and maybe it
> doesn't need to be included in the nightly HEAD downloads either.
> 
> -schorsch
> 
> PS: Darn, just started snowing again here...


From schorsch at schorsch.com  Tue Mar 15 07:38:09 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Tue, 15 Mar 2016 15:38:09 +0100
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
Message-ID: <96f24494e3db4f5304acda8537a48967@tanha.pair.com>

I did fix winrview as well as I could back then. It has a more
complete and smoothely working user interface than the NREL winrvu.
All that provided someone gets it to work with the current Radiance
release, of course.

As far as I am aware, there is no other standalone image viewer
available on Windows. Winimage will require some fixing though, my old
binaries seem to have trouble recognizing the magic scanline header
in the files. But I'm pretty sure that DR used to include a working
version, so that shouldn't be too hard.

Both have a native Windows-GUI, which can be seen as an advantage (no
thirdparty libraries required) or a disadvantage (not portable to other
systems).

Both of them could either find a new life as working programs in the
distribution, or later be scrapped again after all the useful parts have
been scavenged for reuse in other solutions. And don't worry, nobody
will be blaming you for either possible outcome... ;)

For the moment the repository would just be the most convenient place
for interested developers to access and fix the sources.

-schorsch


Am 2016-03-15 14:36, schrieb Gregory J. Ward:
> Hi Georg,
> 
> I vaguely remember winrview as being somewhat buggy.  Did you fix it
> up?  Does it offer advantages to Windows users over the current
> qt-based interface?  Similarly, is the winimage program superior to
> what Windows folks are using now?
> 
> I don't want to welcome back something that's going to be more trouble
> than it's worth, now that I've been told *we* developed it....
> 
> Cheers,
> -Greg
> 
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: [Radiance-dev] Winrview and Winimage sources
>> Date: March 15, 2016 3:55:10 AM PDT
>> 
>> Am 2016-03-15 03:40, schrieb Gregory J. Ward:
>>>> The sources to both winrview and winimage are sitting here on my
>>>> disk. I don't think the DR team changed anything relevant after
>>>> my fixes.
>>>> Unfortunately, my old contract with LBNL does not cover
>>>> redistribution in source form. To make this possible, we'd need
>>>> some statement from them that those programs can be considered a
>>>> part of the normal Radiance distribution and fall under the
>>>> "Radiance open source license".
>>>> @Greg, are you entitled to make such a statement?
>>> I think so.  I'm generally the gatekeeper to the Radiance source 
>>> tree,
>>> and can "welcome" new code that is offered.  Since LBNL contracted 
>>> you
>>> to develop it in the first place from what you say, this should not
>>> present a problem.
>> 
>> Actually, it was developed by LBNL (or by other contractors for LBNL),
>> and licensed to me as part of "the computer program(s) described in
>> attached exhibit A and known as Radiance (LBNL reference number
>> CR-1266/1387/1667/1668/1669)".
>> 
>> But that only reinforces your point, so I'll go with your statement.
>> 
>> That brings us to the practical questions.
>> Should I just commit two new subdirectories to CVS?
>> But that would probably be the most "official" solution.
>> 
>> It's not production code at the moment, and most certainly won't even
>> compile with the current version of Radiance. I'd rather treat it as
>> a kind of rock quarry of concepts and ideas to use when doing it 
>> right.
>> It won't interact with any of the build systems though, and maybe it
>> doesn't need to be included in the nightly HEAD downloads either.
>> 
>> -schorsch
>> 
>> PS: Darn, just started snowing again here...
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From jacobs.axel at gmail.com  Tue Mar 15 10:30:46 2016
From: jacobs.axel at gmail.com (Axel Jacobs)
Date: Tue, 15 Mar 2016 17:30:46 +0000
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <96f24494e3db4f5304acda8537a48967@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
Message-ID: <CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>

> As far as I am aware, there is no other standalone image viewer
> available on Windows.

I use HDRView.exe under Windows.  It used to be available on Paul
Debevec's site, but is no longer.  I send him an email a couple of
years ago, asking him whether he'd allow me to pass it on, but I did
not receive a reply.  HDRView is still available on some rather
obscure sites.  It's lightning fast, allows you to zoom in and out,
and to adjust the exposure with the +/- keys.

Cheers
Axel


From nathanieljon at gmail.com  Tue Mar 15 10:44:33 2016
From: nathanieljon at gmail.com (Nathaniel Jones)
Date: Tue, 15 Mar 2016 13:44:33 -0400
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
Message-ID: <CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>

On Windows, I used to use Picturenaut, which I liked a lot, but lately it's
been giving me library issues. No one else is complaining about that on
their forum, though, so it could just be a problem with my system.

Now I'm using Mitsuba, which is also a full-blown open source renderer but
has the ability to open and tonemap a variety of HDR image formats and is
very quick. I miss being able to get luminance/radiance values by mousing
over the image, though.

Nathaniel

On Tue, Mar 15, 2016 at 1:30 PM, Axel Jacobs <jacobs.axel at gmail.com> wrote:

> > As far as I am aware, there is no other standalone image viewer
> > available on Windows.
>
> I use HDRView.exe under Windows.  It used to be available on Paul
> Debevec's site, but is no longer.  I send him an email a couple of
> years ago, asking him whether he'd allow me to pass it on, but I did
> not receive a reply.  HDRView is still available on some rather
> obscure sites.  It's lightning fast, allows you to zoom in and out,
> and to adjust the exposure with the +/- keys.
>
> Cheers
> Axel
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160315/e3cbca02/attachment.html>

From rmfritz3 at gmail.com  Tue Mar 15 11:26:26 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Tue, 15 Mar 2016 11:26:26 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
Message-ID: <CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>

"I miss being able to get luminance/radiance values by mousing over the
image, though."

Sigh. "If we had..."
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160315/dd82e6b3/attachment.html>

From maricanis at gmail.com  Wed Mar 16 01:18:34 2016
From: maricanis at gmail.com (Marija Velickovic)
Date: Wed, 16 Mar 2016 09:18:34 +0100
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
Message-ID: <CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>

Hi,

There is our tool RadDisplay, which shows values when mousing over image.
On site there is rather old version of tool, but still does basic image
exploration http://deluminaelab.com/en/raddisplay_details.html

We are preparing new version of web site, and have in some plan to release
newer version of RadDisplay soon.

Marija

On Tue, Mar 15, 2016 at 7:26 PM, Randolph M. Fritz <rmfritz3 at gmail.com>
wrote:

> "I miss being able to get luminance/radiance values by mousing over the
> image, though."
>
> Sigh. "If we had..."
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160316/6d03136e/attachment.html>

From schorsch at schorsch.com  Wed Mar 16 04:59:48 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Wed, 16 Mar 2016 12:59:48 +0100
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
Message-ID: <c03f6deb2a94f14991872b90921024b7@tanha.pair.com>

Just shows that I've been away from Radiance for too long, and didn't
follow closely enough what other people are doing.
RadDisplay looks very nice and useful! That's the direction I wouldd 
have
liked to take the old viever in Rayfront (given the time I didn't have).

But my ignorance was only a minor point in the current discussion.
The real question was if it would be interesting to have a native viewer
for Windows in the Radiance source repository and distribution.
Everybody else has ximage, but Windows users need to find an external
solution to even just look at a picture. This is about providing the
most elementary basics, and not about competing with other people's
more advanced tools.

Winimage is very simple, and still needs fixing for robustness.
It is designed to:
  * display hdr pictures
  * offer simple analysis (by calling falsecolor and friends)
  * store images in a small number of other formats
After I tweaked the sources a bit to conform to the current C++ 
standards,
it currently builds with both Visual Studio 2015 and SCons.
It has no thirdparty dependencies at all.

The only "basic" feature currently missing is displaying luminance 
values
by picking or hovering over the picture. I haven't checked yet how easy
it would be to add this, but I expect someone would find a solution.

-schorsch


Am 2016-03-16 09:18, schrieb Marija Velickovic:
> Hi,
> 
> There is our tool RadDisplay, which shows values when mousing over
> image.
> On site there is rather old version of tool, but still does basic
> image exploration http://deluminaelab.com/en/raddisplay_details.html
> [2]
> 
> We are preparing new version of web site, and have in some plan to
> release newer version of RadDisplay soon.
> 
> Marija
> 
> On Tue, Mar 15, 2016 at 7:26 PM, Randolph M. Fritz
> <rmfritz3 at gmail.com> wrote:
> 
>> "I miss being able to get luminance/radiance values by mousing over
>> the image, though."
>> 
>> Sigh. "If we had..."

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Wed Mar 16 08:48:52 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Wed, 16 Mar 2016 08:48:52 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
Message-ID: <3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>

Hi All,

It would be great if you guys could pool resources and decide which tool to advance as the standard Radiance picture viewer for Windows.  Then, we could re-introduce it to the source tree and keep it up to date in future releases.  Likewise for rvu, which I would prefer to be a driver connected using the existing call mechanism.

Cheers,
-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Winrview and Winimage sources
> Date: March 16, 2016 4:59:48 AM PDT
> 
> Just shows that I've been away from Radiance for too long, and didn't
> follow closely enough what other people are doing.
> RadDisplay looks very nice and useful! That's the direction I wouldd have
> liked to take the old viever in Rayfront (given the time I didn't have).
> 
> But my ignorance was only a minor point in the current discussion.
> The real question was if it would be interesting to have a native viewer
> for Windows in the Radiance source repository and distribution.
> Everybody else has ximage, but Windows users need to find an external
> solution to even just look at a picture. This is about providing the
> most elementary basics, and not about competing with other people's
> more advanced tools.
> 
> Winimage is very simple, and still needs fixing for robustness.
> It is designed to:
> * display hdr pictures
> * offer simple analysis (by calling falsecolor and friends)
> * store images in a small number of other formats
> After I tweaked the sources a bit to conform to the current C++ standards,
> it currently builds with both Visual Studio 2015 and SCons.
> It has no thirdparty dependencies at all.
> 
> The only "basic" feature currently missing is displaying luminance values
> by picking or hovering over the picture. I haven't checked yet how easy
> it would be to add this, but I expect someone would find a solution.
> 
> -schorsch
> 
> 
> Am 2016-03-16 09:18, schrieb Marija Velickovic:
>> Hi,
>> There is our tool RadDisplay, which shows values when mousing over
>> image.
>> On site there is rather old version of tool, but still does basic
>> image exploration http://deluminaelab.com/en/raddisplay_details.html
>> [2]
>> We are preparing new version of web site, and have in some plan to
>> release newer version of RadDisplay soon.
>> Marija
>> On Tue, Mar 15, 2016 at 7:26 PM, Randolph M. Fritz
>> <rmfritz3 at gmail.com> wrote:
>>> "I miss being able to get luminance/radiance values by mousing over
>>> the image, though."
>>> Sigh. "If we had..."
> 
> -- 
> Georg Mischler  --  simulations developer  --  schorsch at schorsch com
> +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
> 


From rob.guglielmetti at gmail.com  Wed Mar 16 09:00:04 2016
From: rob.guglielmetti at gmail.com (Rob Guglielmetti)
Date: Wed, 16 Mar 2016 10:00:04 -0600
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
Message-ID: <CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>

Agreed, this is awesome, even if it means turning away from qtrvu. Qt is a
rather onerous dependency, especially to support just one program in all of
Radiance. Most of what Schorsch has to say here is sailing over my head,
but I'm happy to help update the CMake build system to support whatever
ends up getting added and/or dropped here.

Same for testing; any tests for scons should probably be "ported" to CMake
and vice versa, assuming each testing framework has the the other's
ability...

On Wed, Mar 16, 2016 at 9:48 AM, Gregory J. Ward <gregoryjward at gmail.com>
wrote:

> Hi All,
>
> It would be great if you guys could pool resources and decide which tool
> to advance as the standard Radiance picture viewer for Windows.  Then, we
> could re-introduce it to the source tree and keep it up to date in future
> releases.  Likewise for rvu, which I would prefer to be a driver connected
> using the existing call mechanism.
>
> Cheers,
> -Greg
>
> > From: Georg Mischler <schorsch at schorsch.com>
> > Subject: Re: [Radiance-dev] Winrview and Winimage sources
> > Date: March 16, 2016 4:59:48 AM PDT
> >
> > Just shows that I've been away from Radiance for too long, and didn't
> > follow closely enough what other people are doing.
> > RadDisplay looks very nice and useful! That's the direction I wouldd have
> > liked to take the old viever in Rayfront (given the time I didn't have).
> >
> > But my ignorance was only a minor point in the current discussion.
> > The real question was if it would be interesting to have a native viewer
> > for Windows in the Radiance source repository and distribution.
> > Everybody else has ximage, but Windows users need to find an external
> > solution to even just look at a picture. This is about providing the
> > most elementary basics, and not about competing with other people's
> > more advanced tools.
> >
> > Winimage is very simple, and still needs fixing for robustness.
> > It is designed to:
> > * display hdr pictures
> > * offer simple analysis (by calling falsecolor and friends)
> > * store images in a small number of other formats
> > After I tweaked the sources a bit to conform to the current C++
> standards,
> > it currently builds with both Visual Studio 2015 and SCons.
> > It has no thirdparty dependencies at all.
> >
> > The only "basic" feature currently missing is displaying luminance values
> > by picking or hovering over the picture. I haven't checked yet how easy
> > it would be to add this, but I expect someone would find a solution.
> >
> > -schorsch
> >
> >
> > Am 2016-03-16 09:18, schrieb Marija Velickovic:
> >> Hi,
> >> There is our tool RadDisplay, which shows values when mousing over
> >> image.
> >> On site there is rather old version of tool, but still does basic
> >> image exploration http://deluminaelab.com/en/raddisplay_details.html
> >> [2]
> >> We are preparing new version of web site, and have in some plan to
> >> release newer version of RadDisplay soon.
> >> Marija
> >> On Tue, Mar 15, 2016 at 7:26 PM, Randolph M. Fritz
> >> <rmfritz3 at gmail.com> wrote:
> >>> "I miss being able to get luminance/radiance values by mousing over
> >>> the image, though."
> >>> Sigh. "If we had..."
> >
> > --
> > Georg Mischler  --  simulations developer  --  schorsch at schorsch com
> > +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
> >
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160316/f89bc2ff/attachment-0001.html>

From Robert.Guglielmetti at nrel.gov  Wed Mar 16 10:04:16 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Wed, 16 Mar 2016 17:04:16 +0000
Subject: [Radiance-dev] State of the SCons
In-Reply-To: <ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
Message-ID: <D30EEBEF.23B8C%Robert.Guglielmetti@nrel.gov>



On 3/14/16, 8:26 PM, "Georg Mischler" <schorsch at schorsch.com> wrote:

>But now I'll fetch the Windows libraries and the Qt5 tool.
>Has it actually ever been built on a non-Windows system?


Yeah. Way it works on unix is that qtrvu is called when you specify qt as
the output device in a rvu call:

rvu -o qt foo.oct

That will launch qtrvu, even tho there's no actual executable called qtrvu
when you build on unix systems (with CMake). Works fine on Mac. Just
tested on a Ubuntu VM and it looks like it's not being packaged correctly,
so I'll have to look into that. =( 



From rmfritz3 at gmail.com  Wed Mar 16 12:51:27 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Wed, 16 Mar 2016 12:51:27 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
Message-ID: <CANeAMo+WfpXatpxxE5KMkAP9JibZAhb42EVcotF0ZX-e6+go8g@mail.gmail.com>

Why is Qt an especially onerous dependency? It's LGPL and pretty common.

-- 
Randolph M. Fritz, Lighting Design and Simulation
+1 206 659-8617 || rmfritz3 at gmail.com

On Wed, Mar 16, 2016 at 9:00 AM, Rob Guglielmetti <
rob.guglielmetti at gmail.com> wrote:

> Agreed, this is awesome, even if it means turning away from qtrvu. Qt is a
> rather onerous dependency, especially to support just one program in all of
> Radiance. Most of what Schorsch has to say here is sailing over my head,
> but I'm happy to help update the CMake build system to support whatever
> ends up getting added and/or dropped here.
>
> Same for testing; any tests for scons should probably be "ported" to CMake
> and vice versa, assuming each testing framework has the the other's
> ability...
>
> On Wed, Mar 16, 2016 at 9:48 AM, Gregory J. Ward <gregoryjward at gmail.com>
> wrote:
>
>> Hi All,
>>
>> It would be great if you guys could pool resources and decide which tool
>> to advance as the standard Radiance picture viewer for Windows.  Then, we
>> could re-introduce it to the source tree and keep it up to date in future
>> releases.  Likewise for rvu, which I would prefer to be a driver connected
>> using the existing call mechanism.
>>
>> Cheers,
>> -Greg
>>
>> > From: Georg Mischler <schorsch at schorsch.com>
>> > Subject: Re: [Radiance-dev] Winrview and Winimage sources
>> > Date: March 16, 2016 4:59:48 AM PDT
>> >
>> > Just shows that I've been away from Radiance for too long, and didn't
>> > follow closely enough what other people are doing.
>> > RadDisplay looks very nice and useful! That's the direction I wouldd
>> have
>> > liked to take the old viever in Rayfront (given the time I didn't have).
>> >
>> > But my ignorance was only a minor point in the current discussion.
>> > The real question was if it would be interesting to have a native viewer
>> > for Windows in the Radiance source repository and distribution.
>> > Everybody else has ximage, but Windows users need to find an external
>> > solution to even just look at a picture. This is about providing the
>> > most elementary basics, and not about competing with other people's
>> > more advanced tools.
>> >
>> > Winimage is very simple, and still needs fixing for robustness.
>> > It is designed to:
>> > * display hdr pictures
>> > * offer simple analysis (by calling falsecolor and friends)
>> > * store images in a small number of other formats
>> > After I tweaked the sources a bit to conform to the current C++
>> standards,
>> > it currently builds with both Visual Studio 2015 and SCons.
>> > It has no thirdparty dependencies at all.
>> >
>> > The only "basic" feature currently missing is displaying luminance
>> values
>> > by picking or hovering over the picture. I haven't checked yet how easy
>> > it would be to add this, but I expect someone would find a solution.
>> >
>> > -schorsch
>> >
>> >
>> > Am 2016-03-16 09:18, schrieb Marija Velickovic:
>> >> Hi,
>> >> There is our tool RadDisplay, which shows values when mousing over
>> >> image.
>> >> On site there is rather old version of tool, but still does basic
>> >> image exploration http://deluminaelab.com/en/raddisplay_details.html
>> >> [2]
>> >> We are preparing new version of web site, and have in some plan to
>> >> release newer version of RadDisplay soon.
>> >> Marija
>> >> On Tue, Mar 15, 2016 at 7:26 PM, Randolph M. Fritz
>> >> <rmfritz3 at gmail.com> wrote:
>> >>> "I miss being able to get luminance/radiance values by mousing over
>> >>> the image, though."
>> >>> Sigh. "If we had..."
>> >
>> > --
>> > Georg Mischler  --  simulations developer  --  schorsch at schorsch com
>> > +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
>> >
>>
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>>
>
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160316/3cba0e12/attachment.html>

From Robert.Guglielmetti at nrel.gov  Wed Mar 16 12:54:01 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Wed, 16 Mar 2016 19:54:01 +0000
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CANeAMo+WfpXatpxxE5KMkAP9JibZAhb42EVcotF0ZX-e6+go8g@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<CANeAMo+WfpXatpxxE5KMkAP9JibZAhb42EVcotF0ZX-e6+go8g@mail.gmail.com>
Message-ID: <D30F15BA.23BB0%Robert.Guglielmetti@nrel.gov>

Because it's so fuc*ing big.

On 3/16/16, 1:51 PM, "Randolph M. Fritz" <rmfritz3 at gmail.com<mailto:rmfritz3 at gmail.com>> wrote:

Why is Qt an especially onerous dependency? It's LGPL and pretty common.


From rmfritz3 at gmail.com  Wed Mar 16 13:00:41 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Wed, 16 Mar 2016 13:00:41 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <D30F15BA.23BB0%Robert.Guglielmetti@nrel.gov>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<CANeAMo+WfpXatpxxE5KMkAP9JibZAhb42EVcotF0ZX-e6+go8g@mail.gmail.com>
	<D30F15BA.23BB0%Robert.Guglielmetti@nrel.gov>
Message-ID: <CANeAMoKWD77Vm8qbRMwKQtUMST-x9oOwMvQ_re1O_-KO9wqGNQ@mail.gmail.com>

On 3/16/16, 1:51 PM, "Randolph M. Fritz" <rmfritz3 at gmail.com<mailto:
rmfritz3 at gmail.com>> wrote:

Why is Qt an especially onerous dependency? It's LGPL and pretty common.


On Wed, Mar 16, 2016 at 12:54 PM, Guglielmetti, Robert <
Robert.Guglielmetti at nrel.gov> wrote:

> Because it's so fuc*ing big.
>

When 2 GB RAM is standard for a low-end system is that important?

Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160316/a900de45/attachment.html>

From Robert.Guglielmetti at nrel.gov  Wed Mar 16 13:09:16 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Wed, 16 Mar 2016 20:09:16 +0000
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CANeAMoKWD77Vm8qbRMwKQtUMST-x9oOwMvQ_re1O_-KO9wqGNQ@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<CANeAMo+WfpXatpxxE5KMkAP9JibZAhb42EVcotF0ZX-e6+go8g@mail.gmail.com>
	<D30F15BA.23BB0%Robert.Guglielmetti@nrel.gov>
	<CANeAMoKWD77Vm8qbRMwKQtUMST-x9oOwMvQ_re1O_-KO9wqGNQ@mail.gmail.com>
Message-ID: <D30F1814.23BB6%Robert.Guglielmetti@nrel.gov>

But the Radiance source is 3 MB, and Qt 5.6 for Windows is 836 MB. Radiance's dependency list is short and small excepting the Qt requirement for qtrvu. It's kinda nice. Maybe I'm making too much of this. I dunno.

On 3/16/16, 2:00 PM, "Randolph M. Fritz" <rmfritz3 at gmail.com<mailto:rmfritz3 at gmail.com>> wrote:

On 3/16/16, 1:51 PM, "Randolph M. Fritz" <rmfritz3 at gmail.com<mailto:rmfritz3 at gmail.com><mailto:rmfritz3 at gmail.com<mailto:rmfritz3 at gmail.com>>> wrote:

Why is Qt an especially onerous dependency? It's LGPL and pretty common.

On Wed, Mar 16, 2016 at 12:54 PM, Guglielmetti, Robert <Robert.Guglielmetti at nrel.gov<mailto:Robert.Guglielmetti at nrel.gov>> wrote:
Because it's so fuc*ing big.

When 2 GB RAM is standard for a low-end system is that important?

Randolph


From schorsch at schorsch.com  Wed Mar 16 13:10:33 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Wed, 16 Mar 2016 21:10:33 +0100
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
Message-ID: <496d4eea006cb05629a337aaa71b6356@tanha.pair.com>

I see three topics there:

Image viewer
Do we actually have another option for that on Windows?
What does OpenStudio use?
On a side note: The next Gimp version (3.10, currently in beta as
3.9.2) should be able to open HDR files. Though I suspect it will
not include the tonemapping algorithms or other analysis
functionality that we need here.
Second side note: I just saw that the NREL binary package still
has its image files as *.pic instead of *.hdr, is this deliberate?

Preview renderer
First I'll have to try and get Winrview running again...
Once we know it actually still works, I think Rob will be in the best
position to make a judgement on which one (or which combination) fits
the purpose best, and will be easier to grow more functionality with
in the future.

I never looked at that "driver/output device" mechanism very closely.
I think that in those cases where the "device" is actually a seperate
program, whichever rvu executable got invoked first with that option
will just hand over the job to its named sibling (that seems to be
how qtrview works on unix right now). Unless I'm missing some detail,
I don't think that will be a problem, even if there will probably be
only one device available on Windows for now.

Test suite unification
I think that one better goes into a seperate thread.

-schorsch


Am 2016-03-16 17:00, schrieb Rob Guglielmetti:
> Agreed, this is awesome, even if it means turning away from qtrvu. Qt
> is a rather onerous dependency, especially to support just one program
> in all of Radiance. Most of what Schorsch has to say here is sailing
> over my head, but I'm happy to help update the CMake build system to
> support whatever ends up getting added and/or dropped here.
> 
> Same for testing; any tests for scons should probably be "ported" to
> CMake and vice versa, assuming each testing framework has the the
> other's ability...
> 
> On Wed, Mar 16, 2016 at 9:48 AM, Gregory J. Ward
> <gregoryjward at gmail.com> wrote:
> 
>> Hi All,
>> 
>> It would be great if you guys could pool resources and decide which
>> tool to advance as the standard Radiance picture viewer for Windows.
>> Then, we could re-introduce it to the source tree and keep it up to
>> date in future releases. Likewise for rvu, which I would prefer to
>> be a driver connected using the existing call mechanism.
>> 
>> Cheers,
>> -Greg
>> 
>>> From: Georg Mischler <schorsch at schorsch.com>
>>> Subject: Re: [Radiance-dev] Winrview and Winimage sources
>>> Date: March 16, 2016 4:59:48 AM PDT
>> 
>>> 
>>> Just shows that I've been away from Radiance for too long, and
>> didn't
>>> follow closely enough what other people are doing.
>>> RadDisplay looks very nice and useful! That's the direction I
>> wouldd have
>>> liked to take the old viever in Rayfront (given the time I didn't
>> have).
>>> 
>>> But my ignorance was only a minor point in the current discussion.
>>> The real question was if it would be interesting to have a native
>> viewer
>>> for Windows in the Radiance source repository and distribution.
>>> Everybody else has ximage, but Windows users need to find an
>> external
>>> solution to even just look at a picture. This is about providing
>> the
>>> most elementary basics, and not about competing with other
>> people's
>>> more advanced tools.
>>> 
>>> Winimage is very simple, and still needs fixing for robustness.
>>> It is designed to:
>>> * display hdr pictures
>>> * offer simple analysis (by calling falsecolor and friends)
>>> * store images in a small number of other formats
>>> After I tweaked the sources a bit to conform to the current C++
>> standards,
>>> it currently builds with both Visual Studio 2015 and SCons.
>>> It has no thirdparty dependencies at all.
>>> 
>>> The only "basic" feature currently missing is displaying luminance
>> values
>>> by picking or hovering over the picture. I haven't checked yet how
>> easy
>>> it would be to add this, but I expect someone would find a
>> solution.
>>> 
>>> -schorsch
>>> 
>>> 
>>> Am 2016-03-16 09:18, schrieb Marija Velickovic:
>>>> Hi,
>>>> There is our tool RadDisplay, which shows values when mousing
>> over
>>>> image.
>>>> On site there is rather old version of tool, but still does basic
>>>> image exploration
>> http://deluminaelab.com/en/raddisplay_details.html [1]
>>>> [2]
>>>> We are preparing new version of web site, and have in some plan
>> to
>>>> release newer version of RadDisplay soon.
>>>> Marija
>>>> On Tue, Mar 15, 2016 at 7:26 PM, Randolph M. Fritz
>>>> <rmfritz3 at gmail.com> wrote:
>>>>> "I miss being able to get luminance/radiance values by mousing
>> over
>>>>> the image, though."
>>>>> Sigh. "If we had..."
>>> 
>>> --
>>> Georg Mischler -- simulations developer -- schorsch at
>> schorsch com
>>> +schorsch.com [2]+ -- lighting design tools --
>> http://www.schorsch.com/ [3]
>>> 
>> 
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev [4]
> 
> 
> 
> Links:
> ------
> [1] http://deluminaelab.com/en/raddisplay_details.html
> [2] http://schorsch.com
> [3] http://www.schorsch.com/
> [4] http://www.radiance-online.org/mailman/listinfo/radiance-dev
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Wed Mar 16 13:20:59 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Wed, 16 Mar 2016 13:20:59 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <D30F1814.23BB6%Robert.Guglielmetti@nrel.gov>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<CANeAMo+WfpXatpxxE5KMkAP9JibZAhb42EVcotF0ZX-e6+go8g@mail.gmail.com>
	<D30F15BA.23BB0%Robert.Guglielmetti@nrel.gov>
	<CANeAMoKWD77Vm8qbRMwKQtUMST-x9oOwMvQ_re1O_-KO9wqGNQ@mail.gmail.com>
	<D30F1814.23BB6%Robert.Guglielmetti@nrel.gov>
Message-ID: <CANeAMo+Wo-2oYra++Wg8dBsnS2BZVWB9TWx36+K2sT4HLYTHkw@mail.gmail.com>

I see what you mean. Even as binaries those are a hefty dependency.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160316/4ea4883e/attachment.html>

From schorsch at schorsch.com  Wed Mar 16 13:21:50 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Wed, 16 Mar 2016 21:21:50 +0100
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <CANeAMoKWD77Vm8qbRMwKQtUMST-x9oOwMvQ_re1O_-KO9wqGNQ@mail.gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<CANeAMo+WfpXatpxxE5KMkAP9JibZAhb42EVcotF0ZX-e6+go8g@mail.gmail.com>
	<D30F15BA.23BB0%Robert.Guglielmetti@nrel.gov>
	<CANeAMoKWD77Vm8qbRMwKQtUMST-x9oOwMvQ_re1O_-KO9wqGNQ@mail.gmail.com>
Message-ID: <ad092a3796d4a90a39c910cb04481fe7@tanha.pair.com>

Am 2016-03-16 21:00, schrieb Randolph M. Fritz:
> On 3/16/16, 1:51 PM, "Randolph M. Fritz"
> <rmfritz3 at gmail.com<mailto:rmfritz3 at gmail.com>> wrote:
> 
>> Why is Qt an especially onerous dependency? It's LGPL and pretty
>> common.
> 
> On Wed, Mar 16, 2016 at 12:54 PM, Guglielmetti, Robert
> <Robert.Guglielmetti at nrel.gov> wrote:
> 
>> Because it's so fuc*ing big.
> 
> When 2 GB RAM is standard for a low-end system is that important?

*Any* dependency is "onerous", if it can be avoided with reasonable 
effort.

It doesn't necessarily matter for the end user, if they are provided
with an installer including everything. But when developing and 
maintaining
code, any small thing you need to include from external sources is like
a ball and chain. Even something small and simple like the tifflib has
caused a surprising amount of headaches for Radiance.

The standard trade-off for GUIs is OS dependency vs. toolkit dependency.

Since we already have a working solution for all other sytems, we can
focus on Windows here. Of course it would be *nice* to have something
platform-independent. But with our limited resources, the added 
maintenance
headaches may not be worth it in this specific case.

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Wed Mar 16 13:43:46 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Wed, 16 Mar 2016 13:43:46 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <496d4eea006cb05629a337aaa71b6356@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<496d4eea006cb05629a337aaa71b6356@tanha.pair.com>
Message-ID: <F93E2B41-102E-430A-919E-7C8D8D09596D@gmail.com>

While rvu can (and historically has) executed a driver as an independent process, it is supposed to communicate with that driver via a couple of pipes.  I didn't realize that it handed over execution to qtrvu.  There is a "slave mode" that reverses operation, permitting the display driver to call rvu as the parent process -- is that what qtrvu is doing, or does it copy all the sources for rendering or call the raycalls.c?  I guess I should familiarize myself with that source tree, but I've just been ignoring it up until now...

-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Winrview and Winimage sources
> Date: March 16, 2016 1:10:33 PM PDT
> 
> I see three topics there:
> 
> Image viewer
> Do we actually have another option for that on Windows?
> What does OpenStudio use?
> On a side note: The next Gimp version (3.10, currently in beta as
> 3.9.2) should be able to open HDR files. Though I suspect it will
> not include the tonemapping algorithms or other analysis
> functionality that we need here.
> Second side note: I just saw that the NREL binary package still
> has its image files as *.pic instead of *.hdr, is this deliberate?
> 
> Preview renderer
> First I'll have to try and get Winrview running again...
> Once we know it actually still works, I think Rob will be in the best
> position to make a judgement on which one (or which combination) fits
> the purpose best, and will be easier to grow more functionality with
> in the future.
> 
> I never looked at that "driver/output device" mechanism very closely.
> I think that in those cases where the "device" is actually a seperate
> program, whichever rvu executable got invoked first with that option
> will just hand over the job to its named sibling (that seems to be
> how qtrview works on unix right now). Unless I'm missing some detail,
> I don't think that will be a problem, even if there will probably be
> only one device available on Windows for now.
> 
> Test suite unification
> I think that one better goes into a seperate thread.
> 
> -schorsch


From schorsch at schorsch.com  Wed Mar 16 14:02:11 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Wed, 16 Mar 2016 22:02:11 +0100
Subject: [Radiance-dev] Test suite design
Message-ID: <fdde7f2e81ed2df4d4c75bd779989535@tanha.pair.com>

Forking this into a new thread.

Am 2016-03-16 17:00, schrieb Rob Guglielmetti:
> Same for testing; any tests for scons should probably be "ported" to
> CMake and vice versa, assuming each testing framework has the the
> other's ability...

That sounds like a lot of duplicate work...

Wouldn't it make more sense to maintain just one test suite, and
have either build system just invoke that?

This could be either the current Python suite (probably after
some refactoring), the current CMake suite, or something entirely
different.

So now we need opinions and arguments that would make one or the
other solution preferrable. Any takers?

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Wed Mar 16 14:18:57 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Wed, 16 Mar 2016 14:18:57 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <F93E2B41-102E-430A-919E-7C8D8D09596D@gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<496d4eea006cb05629a337aaa71b6356@tanha.pair.com>
	<F93E2B41-102E-430A-919E-7C8D8D09596D@gmail.com>
Message-ID: <CANeAMoK68BwvrNwsinS5GKMzNtpQtyXt9i0U85HuOBOYw9nEeA@mail.gmail.com>

I think the pipe approach is a good one. A separation of UI and
computational functions is probably a good way to organize the code, when
it is possible.?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160316/0da5d9a9/attachment-0001.html>

From gregoryjward at gmail.com  Wed Mar 16 14:20:34 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Wed, 16 Mar 2016 14:20:34 -0700
Subject: [Radiance-dev] Test suite design
In-Reply-To: <fdde7f2e81ed2df4d4c75bd779989535@tanha.pair.com>
References: <fdde7f2e81ed2df4d4c75bd779989535@tanha.pair.com>
Message-ID: <2A77810E-1A43-4EE0-B314-89FE3E0D6D0A@gmail.com>

You couldn't cmake me touch that one with a 10-foot python.

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: [Radiance-dev] Test suite design
> Date: March 16, 2016 2:02:11 PM PDT
> 
> Forking this into a new thread.
> 
> Am 2016-03-16 17:00, schrieb Rob Guglielmetti:
>> Same for testing; any tests for scons should probably be "ported" to
>> CMake and vice versa, assuming each testing framework has the the
>> other's ability...
> 
> That sounds like a lot of duplicate work...
> 
> Wouldn't it make more sense to maintain just one test suite, and
> have either build system just invoke that?
> 
> This could be either the current Python suite (probably after
> some refactoring), the current CMake suite, or something entirely
> different.
> 
> So now we need opinions and arguments that would make one or the
> other solution preferrable. Any takers?
> 
> -schorsch
> 
> -- 
> Georg Mischler  --  simulations developer  --  schorsch at schorsch com
> +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/


From Robert.Guglielmetti at nrel.gov  Wed Mar 16 14:23:10 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Wed, 16 Mar 2016 21:23:10 +0000
Subject: [Radiance-dev] Test suite design
In-Reply-To: <2A77810E-1A43-4EE0-B314-89FE3E0D6D0A@gmail.com>
References: <fdde7f2e81ed2df4d4c75bd779989535@tanha.pair.com>
	<2A77810E-1A43-4EE0-B314-89FE3E0D6D0A@gmail.com>
Message-ID: <D30F2ABF.23BCC%Robert.Guglielmetti@nrel.gov>

rim_shot()


On 3/16/16, 3:20 PM, "Gregory J. Ward" <gregoryjward at gmail.com> wrote:

>You couldn't cmake me touch that one with a 10-foot python.
>
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: [Radiance-dev] Test suite design
>> Date: March 16, 2016 2:02:11 PM PDT
>> 
>> Forking this into a new thread.
>> 
>> Am 2016-03-16 17:00, schrieb Rob Guglielmetti:
>>> Same for testing; any tests for scons should probably be "ported" to
>>> CMake and vice versa, assuming each testing framework has the the
>>> other's ability...
>> 
>> That sounds like a lot of duplicate work...
>> 
>> Wouldn't it make more sense to maintain just one test suite, and
>> have either build system just invoke that?
>> 
>> This could be either the current Python suite (probably after
>> some refactoring), the current CMake suite, or something entirely
>> different.
>> 
>> So now we need opinions and arguments that would make one or the
>> other solution preferrable. Any takers?
>> 
>> -schorsch
>> 
>> -- 
>> Georg Mischler  --  simulations developer  --  schorsch at schorsch com
>> +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
>
>_______________________________________________
>Radiance-dev mailing list
>Radiance-dev at radiance-online.org
>http://www.radiance-online.org/mailman/listinfo/radiance-dev



From Robert.Guglielmetti at nrel.gov  Wed Mar 16 14:28:02 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Wed, 16 Mar 2016 21:28:02 +0000
Subject: [Radiance-dev] Test suite design
In-Reply-To: <fdde7f2e81ed2df4d4c75bd779989535@tanha.pair.com>
References: <fdde7f2e81ed2df4d4c75bd779989535@tanha.pair.com>
Message-ID: <D30F2AF7.23BCF%Robert.Guglielmetti@nrel.gov>


On 3/16/16, 3:02 PM, "Georg Mischler" <schorsch at schorsch.com> wrote:
>
>That sounds like a lot of duplicate work...
>
>Wouldn't it make more sense to maintain just one test suite, and
>have either build system just invoke that?


Definitely a lot of duplicate work, you're right. I was thinking maybe a
little too specifically about a particular testing framework (CTest in my
case). 



From schorsch at schorsch.com  Wed Mar 16 16:24:01 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Thu, 17 Mar 2016 00:24:01 +0100
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <F93E2B41-102E-430A-919E-7C8D8D09596D@gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<496d4eea006cb05629a337aaa71b6356@tanha.pair.com>
	<F93E2B41-102E-430A-919E-7C8D8D09596D@gmail.com>
Message-ID: <bcce9ca085e79e4bfaf5e0fd48bb1621@tanha.pair.com>

I don't think I'm gonna touch (or even try to understand) that driver
business. On Windows, preview renderers have traditionally always been
native reimplementations of rvu. Rob is free to change that, of 
course...

-schorsch


Am 2016-03-16 21:43, schrieb Gregory J. Ward:
> While rvu can (and historically has) executed a driver as an
> independent process, it is supposed to communicate with that driver
> via a couple of pipes.  I didn't realize that it handed over execution
> to qtrvu.  There is a "slave mode" that reverses operation, permitting
> the display driver to call rvu as the parent process -- is that what
> qtrvu is doing, or does it copy all the sources for rendering or call
> the raycalls.c?  I guess I should familiarize myself with that source
> tree, but I've just been ignoring it up until now...
> 
> -Greg
> 
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: Re: [Radiance-dev] Winrview and Winimage sources
>> Date: March 16, 2016 1:10:33 PM PDT
>> 
>> I see three topics there:
>> 
>> Image viewer
>> Do we actually have another option for that on Windows?
>> What does OpenStudio use?
>> On a side note: The next Gimp version (3.10, currently in beta as
>> 3.9.2) should be able to open HDR files. Though I suspect it will
>> not include the tonemapping algorithms or other analysis
>> functionality that we need here.
>> Second side note: I just saw that the NREL binary package still
>> has its image files as *.pic instead of *.hdr, is this deliberate?
>> 
>> Preview renderer
>> First I'll have to try and get Winrview running again...
>> Once we know it actually still works, I think Rob will be in the best
>> position to make a judgement on which one (or which combination) fits
>> the purpose best, and will be easier to grow more functionality with
>> in the future.
>> 
>> I never looked at that "driver/output device" mechanism very closely.
>> I think that in those cases where the "device" is actually a seperate
>> program, whichever rvu executable got invoked first with that option
>> will just hand over the job to its named sibling (that seems to be
>> how qtrview works on unix right now). Unless I'm missing some detail,
>> I don't think that will be a problem, even if there will probably be
>> only one device available on Windows for now.
>> 
>> Test suite unification
>> I think that one better goes into a seperate thread.
>> 
>> -schorsch
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Wed Mar 16 17:15:27 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Wed, 16 Mar 2016 17:15:27 -0700
Subject: [Radiance-dev] Winrview and Winimage sources
In-Reply-To: <bcce9ca085e79e4bfaf5e0fd48bb1621@tanha.pair.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<496d4eea006cb05629a337aaa71b6356@tanha.pair.com>
	<F93E2B41-102E-430A-919E-7C8D8D09596D@gmail.com>
	<bcce9ca085e79e4bfaf5e0fd48bb1621@tanha.pair.com>
Message-ID: <40FC5721-0DC5-404F-B126-BD2160457911@gmail.com>

Well, it took me a while to figure out where the rabbit went, but it looks like the folks at Kitware did build the "qt" driver in the standard way, linking it with rvu albeit in another directory.  I don't remember the conversation on this, but it might have something to do with separability and keeping the C++ and Qt dependencies out of the main folders.  The file qtrvu/qt.c handles the interface between rvu proper and the driver routines, which are all in C++.

I'd like to follow a similar strategy if we want to replace the Qt driver with something more native, rather than reproducing any of the non-driver sources in the rt directory for a Windows-ready edition of rvu.  I don't have a problem including the new sources in the rt/ directory, though I'd prefer not adding too many new modules if we can avoid it.  I think the rvu x11 driver is contained in 4 modules.

-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Winrview and Winimage sources
> Date: March 16, 2016 4:24:01 PM PDT
> 
> I don't think I'm gonna touch (or even try to understand) that driver
> business. On Windows, preview renderers have traditionally always been
> native reimplementations of rvu. Rob is free to change that, of course...
> 
> -schorsch
> 
> 
> Am 2016-03-16 21:43, schrieb Gregory J. Ward:
>> While rvu can (and historically has) executed a driver as an
>> independent process, it is supposed to communicate with that driver
>> via a couple of pipes.  I didn't realize that it handed over execution
>> to qtrvu.  There is a "slave mode" that reverses operation, permitting
>> the display driver to call rvu as the parent process -- is that what
>> qtrvu is doing, or does it copy all the sources for rendering or call
>> the raycalls.c?  I guess I should familiarize myself with that source
>> tree, but I've just been ignoring it up until now...
>> -Greg
>>> From: Georg Mischler <schorsch at schorsch.com>
>>> Subject: Re: [Radiance-dev] Winrview and Winimage sources
>>> Date: March 16, 2016 1:10:33 PM PDT
>>> I see three topics there:
>>> Image viewer
>>> Do we actually have another option for that on Windows?
>>> What does OpenStudio use?
>>> On a side note: The next Gimp version (3.10, currently in beta as
>>> 3.9.2) should be able to open HDR files. Though I suspect it will
>>> not include the tonemapping algorithms or other analysis
>>> functionality that we need here.
>>> Second side note: I just saw that the NREL binary package still
>>> has its image files as *.pic instead of *.hdr, is this deliberate?
>>> Preview renderer
>>> First I'll have to try and get Winrview running again...
>>> Once we know it actually still works, I think Rob will be in the best
>>> position to make a judgement on which one (or which combination) fits
>>> the purpose best, and will be easier to grow more functionality with
>>> in the future.
>>> I never looked at that "driver/output device" mechanism very closely.
>>> I think that in those cases where the "device" is actually a seperate
>>> program, whichever rvu executable got invoked first with that option
>>> will just hand over the job to its named sibling (that seems to be
>>> how qtrview works on unix right now). Unless I'm missing some detail,
>>> I don't think that will be a problem, even if there will probably be
>>> only one device available on Windows for now.
>>> Test suite unification
>>> I think that one better goes into a seperate thread.
>>> -schorsch


From schorsch at schorsch.com  Thu Mar 17 07:10:08 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Thu, 17 Mar 2016 15:10:08 +0100
Subject: [Radiance-dev] Test suite design
In-Reply-To: <D30F2AF7.23BCF%Robert.Guglielmetti@nrel.gov>
References: <fdde7f2e81ed2df4d4c75bd779989535@tanha.pair.com>
	<D30F2AF7.23BCF%Robert.Guglielmetti@nrel.gov>
Message-ID: <e24520ba218abdfb56db96f036ad71ba@tanha.pair.com>

The criteria I would apply are:

- Which framework is easiest to install for end users?
   Or maybe better: Which is most likely to be already installed on the
   system of the average Radiance user, even when not part of the
   currently running build system?
   * On unix
   * on Mac (as far as different from other unixes)
   * on Windows

- Which is easiest to maintain and to add test cases?
   More specificly: Which has the shortest learning curve for the
   average Radiance user before they can contribute tests?

- And last but not least, which has all the capabilities we need?
   * Run a program with various arguments and input, and compare its
     output against a prepared set of expected data.
   * Eventually: Load a shared library and run similar tests on
     individual functions (not easily possible with the current state
     of librtrad, those pesky global variables once again).

-schorsch


Am 2016-03-16 22:28, schrieb Guglielmetti, Robert:
> On 3/16/16, 3:02 PM, "Georg Mischler" <schorsch at schorsch.com> wrote:
>> 
>> That sounds like a lot of duplicate work...
>> 
>> Wouldn't it make more sense to maintain just one test suite, and
>> have either build system just invoke that?
> 
> 
> Definitely a lot of duplicate work, you're right. I was thinking maybe 
> a
> little too specifically about a particular testing framework (CTest in 
> my
> case).
> 
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Fri Mar 18 18:05:41 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sat, 19 Mar 2016 02:05:41 +0100
Subject: [Radiance-dev]  Winrview
In-Reply-To: <F93E2B41-102E-430A-919E-7C8D8D09596D@gmail.com>
References: <dbb81a56e44832bee82f1d5ac2f6cfc4@tanha.pair.com>
	<D306EE33.23943%Robert.Guglielmetti@nrel.gov>
	<f44ea5cd659505433401875d2fe6b935@tanha.pair.com>
	<D30C37BC.23A5C%Robert.Guglielmetti@nrel.gov>
	<ee92b87b717f83118e7562c8ef23cc4f@tanha.pair.com>
	<3EC3A9B9-48B1-4BE2-A4B7-D140EF893337@gmail.com>
	<99070a07133e8472fb94e5c3948d7f1c@tanha.pair.com>
	<66A16A5E-6BF8-4922-B8AF-347C9C0B0DE5@gmail.com>
	<96f24494e3db4f5304acda8537a48967@tanha.pair.com>
	<CA+dqh63VvoATX7YRdcVSrNXMX=xFOVwZ-it+e9s_AppNga04DQ@mail.gmail.com>
	<CAJR73tvecdYqZJzWCpCd6ExnRhwPthCZc7cEbkRhg5WzFSNkhA@mail.gmail.com>
	<CANeAMoJosR2iHM_KZuO74yJ6HUYfbFRUGPmOcT7vg5OzSjzsiw@mail.gmail.com>
	<CAAZQWqhoBKJ2xhnpVS8fBR8=KFJNfbvJhSQeEetuEAi7skbK2Q@mail.gmail.com>
	<c03f6deb2a94f14991872b90921024b7@tanha.pair.com>
	<3F590A3A-2A7D-473C-B026-909CC925603F@gmail.com>
	<CAEkFE9gz30ftkbuD_-J5b6PdZUUxvM8GWQ_K-w91ESqmdZcnvA@mail.gmail.com>
	<496d4eea006cb05629a337aaa71b6356@tanha.pair.com>
	<F93E2B41-102E-430A-919E-7C8D8D09596D@gmail.com>
Message-ID: <52338b3cfa515b1100fb3a5a881b05bc@tanha.pair.com>

Alright, I got winrview working with R5 (without extensive testing)

With the help of a modern compiler, some non-standard coding had
to be eliminated. Then I found that lots of function and variable
names in Radiance had changed over the years. And finally there was
just the usual weirdness of fiddling with someone elses code...

Instead of copying certain key files from Radiance and chainging them
like last time, I tried to adapt the other way now. I threw out all
copied files and most copied functions, linking directly to the 
originals.
For that to work, I had to actually implement the display driver 
protocol,
so the library would link with no missing symbols (just pro-forma for 
now,
the protocol doesn't actually do anything useful yet).
The result is still a bit quirky, but it runs and displays simulations.

Winrview uses the standard Windows method to handle background
computations. The MFC library offers a way to have tasks invoked by an
"onIdle" handler, which means they will be started any time the user
leaves the GUI alone (I think it's even in a seperate thread).
As soon as the user touches anything, the running simulation should
be signalled to pause and then restart with the new parameters.
The controlling agent is not the rvu core, nor even winrview itself,
but the event loop of a windows library.

Rvu manages its own command loop, and a queue of rays to simulate
while waiting for user input. I don't quite understand yet how a GUI
"driver" will maintain its indepence and responsiveness next to that,
but as qtrvu demonstrates, it seems to be possible.

Years ago we worried a lot about response times, as a GUI is supposed
to react instantly to user input. In fact, we had tweaked some
rendering functions deep inside Radiance, so we could interrupt a
simulation even in the middle of computing an individual ray, no
matter how many recursions deep.

I didn't bother with that this time. Given the increased CPU power
available, I'm not sure if it would still be of any benefit.
I remember waiting long seconds for (x)rvu to react to input.
But now it usually answers almost instantly even with a largish model
and tough parameters.

What's still to do?

  * At the end of a simulation, the very first large tiles suddenly
    overlap the new and smaller ones again - until the next refresh, eg.
    when the window is moved around a bit. I blame my OpenGL driver.

  * Full implementation of the display driver protocol. If this works
    while maintaining sufficient responsiveness, then it would
    reduce the duplicated functionality, and simplify the whole thing.

  * It doesn't know about any of the recently added simulation options
    (pmap, etc.). Both the GUI and the command line should learn about
    those (the latter possibly via the task above).

  * The program currently doesn't have a command protocol window, but
    presents "urgent" info via entertaining popups.

  * Command line parameters are used, but not propagated to the
    dialog box (it opens showing the default values).

  * The GUI is quite functional with dockable toolbars, but has the
    typical 90-ies look of Windows NT.

  * There's qite a bit of cruft in the code to clean up.
    (eg. checking registry entries for paths, left over from DR.)

Any takers? ;)

There are 12x files of C++, 7x files of C, a bunch of headers, plus
some resources. It builds with both Visual Studio 2015 and SCons.

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Mon Mar 21 09:02:03 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Mon, 21 Mar 2016 17:02:03 +0100
Subject: [Radiance-dev] Python scripts for Radiance
Message-ID: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>

Hi again!

I have converted some of the original Radiance shell scripts into 
Python.
   https://github.com/gmischler/PyRad

The examples so far are exact drop-in replacements of the original csh
or Perl versions, but with some extra functionality and benefits.

* usage instructions (-H)
* progress report (-V)
* dry-run mode (-N)
* detailed error diagnostics
* compatible with Python 2.7 and Python 3.x
* self contained (all functionality can be combined in one file)
* truly cross-platform (no dependencies other than Python and Radiance)
* direct process management (no intermediate shell calls)
* immune to whitespace in file names
* tamper-proof use of temporary files
* instrumented for building a single-file *.exe with pyinstaller


The current selection is still small, the examples were chosen for
varying reasons:

* falsecolor.py
   This one has been sitting on my disk (in much less refined form) for
   many years. Now I've updated it to using color palettes and to satisfy
   all the points above.

* phisto.py
* rlux.py
* pveil.py
   Those three became test candidates because they are simple and have
   a straightforward command line.

I'm looking for ideas (and contributions) on where to continue next.

Good candidates are scripts that are commonly used.
It is also very helpful if a script includes documentation about what
it's actually supposed to do. Ideally with a set of test data to
verify that it really does that.
Actually, a solid set of test cases for the current collection would
be very helpful too.

Some of the csh/Perl scripts present a challenge, because they have
rather unconventional command lines. In those cases, we might want to
consider changing the interface to something more regular, provided
this is possible.

Not all of the existing scripts are really worth the effort.
The Python versions with the extra functionality are definitively not
as simple as the originals. Flexibility and safety has its price.
On the other hand, they will definitively be *much* easier to maintain.

Many of the current scripts (csh *and* Perl) blindly assume the
existence of a unix type shell, a number of other posix tools
(grep/awk/sed/etc.), and they often fail with spaces in file and
directory names. Fixing this would introduce additional overhead
in any language.


Why Python?

For developers, it is simply one of the most productive tools around.
Python has grown into one of the most popular languages just by its
practical merits, without any corporate backing, and without a very
strong web appeal.

Most Radiance users will already have it installed, no matter the
platform.

On unix, scripts can be invoked by "#!" (like any other).

Any script can be "compiled" into a standalone executable file.
This is important on Windows, because invoking scripts (Python,
*.bat, or otherwise) from within programs is a real hassle there.
In fact, it ended up being the simplest way to get winimage to
perform falsecolor analysis.
(This could also be done with Perl, but...)


I expect Python to play an increasing role in Radiance development in
the future, with or without my own involvement.  So we might just as
well embrace it.

I would like to suggest adding Python versions of the most commonly
used scripts to the distribution. There are several possible
configurations how this could be done, so we'd have to discuss a
number of technical details first. And yes, verification before
inclusion would be an important step.

Opinions?

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From Robert.Guglielmetti at nrel.gov  Mon Mar 21 09:30:01 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Mon, 21 Mar 2016 16:30:01 +0000
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
Message-ID: <D31578B3.23D21%Robert.Guglielmetti@nrel.gov>

Schorsch, you're making the rest of us look like slackers!

I'm all about this move. When I added some new stuff that was written in
Ruby, it was less than enthusiastically adopted because of yet another
dependency; Perl had recently been added to the dependency list with the
new rtcontrib utilities. Axel Jacobs was his usual awesome self and
reimplemented my stuff in Perl (he's also responsible for the Perl
falsecolor), so we're back to the one dependency. I'm thrilled to see new
csh-based utilities now in Python (phisto was on my list of ones to
convert as well), and personally don't see the Python requirement a big
deal, but it is an additional requirement.

I think at this point the critical ones still implemented in Perl are
genBSDF and genskyvec, since you just added falsecolor. I would lobby for
objview/pict, and the derivatives I started in Ruby and Axel already
ported to Perl, ltview/pict.

- Rob


On 3/21/16, 10:02 AM, "Georg Mischler" <schorsch at schorsch.com> wrote:

>Hi again!
>
>I have converted some of the original Radiance shell scripts into
>Python.
>   https://github.com/gmischler/PyRad
>
>The examples so far are exact drop-in replacements of the original csh
>or Perl versions, but with some extra functionality and benefits.
>
>* usage instructions (-H)
>* progress report (-V)
>* dry-run mode (-N)
>* detailed error diagnostics
>* compatible with Python 2.7 and Python 3.x
>* self contained (all functionality can be combined in one file)
>* truly cross-platform (no dependencies other than Python and Radiance)
>* direct process management (no intermediate shell calls)
>* immune to whitespace in file names
>* tamper-proof use of temporary files
>* instrumented for building a single-file *.exe with pyinstaller
>
>
>The current selection is still small, the examples were chosen for
>varying reasons:
>
>* falsecolor.py
>   This one has been sitting on my disk (in much less refined form) for
>   many years. Now I've updated it to using color palettes and to satisfy
>   all the points above.
>
>* phisto.py
>* rlux.py
>* pveil.py
>   Those three became test candidates because they are simple and have
>   a straightforward command line.
>
>I'm looking for ideas (and contributions) on where to continue next.
>
>Good candidates are scripts that are commonly used.
>It is also very helpful if a script includes documentation about what
>it's actually supposed to do. Ideally with a set of test data to
>verify that it really does that.
>Actually, a solid set of test cases for the current collection would
>be very helpful too.
>
>Some of the csh/Perl scripts present a challenge, because they have
>rather unconventional command lines. In those cases, we might want to
>consider changing the interface to something more regular, provided
>this is possible.
>
>Not all of the existing scripts are really worth the effort.
>The Python versions with the extra functionality are definitively not
>as simple as the originals. Flexibility and safety has its price.
>On the other hand, they will definitively be *much* easier to maintain.
>
>Many of the current scripts (csh *and* Perl) blindly assume the
>existence of a unix type shell, a number of other posix tools
>(grep/awk/sed/etc.), and they often fail with spaces in file and
>directory names. Fixing this would introduce additional overhead
>in any language.
>
>
>Why Python?
>
>For developers, it is simply one of the most productive tools around.
>Python has grown into one of the most popular languages just by its
>practical merits, without any corporate backing, and without a very
>strong web appeal.
>
>Most Radiance users will already have it installed, no matter the
>platform.
>
>On unix, scripts can be invoked by "#!" (like any other).
>
>Any script can be "compiled" into a standalone executable file.
>This is important on Windows, because invoking scripts (Python,
>*.bat, or otherwise) from within programs is a real hassle there.
>In fact, it ended up being the simplest way to get winimage to
>perform falsecolor analysis.
>(This could also be done with Perl, but...)
>
>
>I expect Python to play an increasing role in Radiance development in
>the future, with or without my own involvement.  So we might just as
>well embrace it.
>
>I would like to suggest adding Python versions of the most commonly
>used scripts to the distribution. There are several possible
>configurations how this could be done, so we'd have to discuss a
>number of technical details first. And yes, verification before
>inclusion would be an important step.
>
>Opinions?
>
>-schorsch
>
>-- 
>Georg Mischler  --  simulations developer  --  schorsch at schorsch com
>+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
>
>
>_______________________________________________
>Radiance-dev mailing list
>Radiance-dev at radiance-online.org
>http://www.radiance-online.org/mailman/listinfo/radiance-dev



From gregoryjward at gmail.com  Mon Mar 21 12:44:38 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Mon, 21 Mar 2016 12:44:38 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
Message-ID: <99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>

There is the downside that I don't know Python at all, and learning yet another object-oriented language with completely different syntax isn't high on my list of priorities.  That said, if we can get past the support issues on various platforms, I have no problem with Schorsch and others making contributions they wish to support on an ongoing basis, or ones that are unlikely to require support.

For this reason, I don't have much enthusiasm for converting something as complex as genBSDF to Python, where I couldn't understand or fix any problems that arise in future.

Cheers,
-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: [Radiance-dev] Python scripts for Radiance
> Date: March 21, 2016 9:02:03 AM PDT
> 
> Hi again!
> 
> I have converted some of the original Radiance shell scripts into Python.
>  https://github.com/gmischler/PyRad
> 
> The examples so far are exact drop-in replacements of the original csh
> or Perl versions, but with some extra functionality and benefits.
> 
> * usage instructions (-H)
> * progress report (-V)
> * dry-run mode (-N)
> * detailed error diagnostics
> * compatible with Python 2.7 and Python 3.x
> * self contained (all functionality can be combined in one file)
> * truly cross-platform (no dependencies other than Python and Radiance)
> * direct process management (no intermediate shell calls)
> * immune to whitespace in file names
> * tamper-proof use of temporary files
> * instrumented for building a single-file *.exe with pyinstaller
> 
> 
> The current selection is still small, the examples were chosen for
> varying reasons:
> 
> * falsecolor.py
>  This one has been sitting on my disk (in much less refined form) for
>  many years. Now I've updated it to using color palettes and to satisfy
>  all the points above.
> 
> * phisto.py
> * rlux.py
> * pveil.py
>  Those three became test candidates because they are simple and have
>  a straightforward command line.
> 
> I'm looking for ideas (and contributions) on where to continue next.
> 
> Good candidates are scripts that are commonly used.
> It is also very helpful if a script includes documentation about what
> it's actually supposed to do. Ideally with a set of test data to
> verify that it really does that.
> Actually, a solid set of test cases for the current collection would
> be very helpful too.
> 
> Some of the csh/Perl scripts present a challenge, because they have
> rather unconventional command lines. In those cases, we might want to
> consider changing the interface to something more regular, provided
> this is possible.
> 
> Not all of the existing scripts are really worth the effort.
> The Python versions with the extra functionality are definitively not
> as simple as the originals. Flexibility and safety has its price.
> On the other hand, they will definitively be *much* easier to maintain.
> 
> Many of the current scripts (csh *and* Perl) blindly assume the
> existence of a unix type shell, a number of other posix tools
> (grep/awk/sed/etc.), and they often fail with spaces in file and
> directory names. Fixing this would introduce additional overhead
> in any language.
> 
> 
> Why Python?
> 
> For developers, it is simply one of the most productive tools around.
> Python has grown into one of the most popular languages just by its
> practical merits, without any corporate backing, and without a very
> strong web appeal.
> 
> Most Radiance users will already have it installed, no matter the
> platform.
> 
> On unix, scripts can be invoked by "#!" (like any other).
> 
> Any script can be "compiled" into a standalone executable file.
> This is important on Windows, because invoking scripts (Python,
> *.bat, or otherwise) from within programs is a real hassle there.
> In fact, it ended up being the simplest way to get winimage to
> perform falsecolor analysis.
> (This could also be done with Perl, but...)
> 
> 
> I expect Python to play an increasing role in Radiance development in
> the future, with or without my own involvement.  So we might just as
> well embrace it.
> 
> I would like to suggest adding Python versions of the most commonly
> used scripts to the distribution. There are several possible
> configurations how this could be done, so we'd have to discuss a
> number of technical details first. And yes, verification before
> inclusion would be an important step.
> 
> Opinions?
> 
> -schorsch


From schorsch at schorsch.com  Mon Mar 21 14:21:12 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Mon, 21 Mar 2016 22:21:12 +0100
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
Message-ID: <322e95b483431566b86e73c327a52e72@tanha.pair.com>

Greg, someone of your capacity will be fluent in the Python syntax 
within
an hour, the object and exception system in a day, and the most 
elementary
parts of the library within a few days (the included library is so huge
that even experienced pythonistas will keep searching the documentation
for more arcane modules).

Python is "the language thet doesn't get in the way", and not another 
Perl.
You will very quickly have less problems debugging a Python program by
someone else, compared to a Perl program you have written yourself.
While I definitively understand your reluctance, I also think that in 
this
specific case you will find it to be unjustified.
And if you should still run into trouble, there are enough Radiance 
users
out there who are already very fluent and can help out.

So now we need a few more good conversion candidates with test cases.
Do you by chance still have any of the test cases you used to verify
the existing scripts when you created them?

-schorsch


Am 2016-03-21 20:44, schrieb Gregory J. Ward:
> There is the downside that I don't know Python at all, and learning
> yet another object-oriented language with completely different syntax
> isn't high on my list of priorities.  That said, if we can get past
> the support issues on various platforms, I have no problem with
> Schorsch and others making contributions they wish to support on an
> ongoing basis, or ones that are unlikely to require support.
> 
> For this reason, I don't have much enthusiasm for converting something
> as complex as genBSDF to Python, where I couldn't understand or fix
> any problems that arise in future.
> 
> Cheers,
> -Greg
> 
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: [Radiance-dev] Python scripts for Radiance
>> Date: March 21, 2016 9:02:03 AM PDT
>> 
>> Hi again!
>> 
>> I have converted some of the original Radiance shell scripts into 
>> Python.
>>  https://github.com/gmischler/PyRad
>> 
>> The examples so far are exact drop-in replacements of the original csh
>> or Perl versions, but with some extra functionality and benefits.
>> 
>> * usage instructions (-H)
>> * progress report (-V)
>> * dry-run mode (-N)
>> * detailed error diagnostics
>> * compatible with Python 2.7 and Python 3.x
>> * self contained (all functionality can be combined in one file)
>> * truly cross-platform (no dependencies other than Python and 
>> Radiance)
>> * direct process management (no intermediate shell calls)
>> * immune to whitespace in file names
>> * tamper-proof use of temporary files
>> * instrumented for building a single-file *.exe with pyinstaller
>> 
>> 
>> The current selection is still small, the examples were chosen for
>> varying reasons:
>> 
>> * falsecolor.py
>>  This one has been sitting on my disk (in much less refined form) for
>>  many years. Now I've updated it to using color palettes and to 
>> satisfy
>>  all the points above.
>> 
>> * phisto.py
>> * rlux.py
>> * pveil.py
>>  Those three became test candidates because they are simple and have
>>  a straightforward command line.
>> 
>> I'm looking for ideas (and contributions) on where to continue next.
>> 
>> Good candidates are scripts that are commonly used.
>> It is also very helpful if a script includes documentation about what
>> it's actually supposed to do. Ideally with a set of test data to
>> verify that it really does that.
>> Actually, a solid set of test cases for the current collection would
>> be very helpful too.
>> 
>> Some of the csh/Perl scripts present a challenge, because they have
>> rather unconventional command lines. In those cases, we might want to
>> consider changing the interface to something more regular, provided
>> this is possible.
>> 
>> Not all of the existing scripts are really worth the effort.
>> The Python versions with the extra functionality are definitively not
>> as simple as the originals. Flexibility and safety has its price.
>> On the other hand, they will definitively be *much* easier to 
>> maintain.
>> 
>> Many of the current scripts (csh *and* Perl) blindly assume the
>> existence of a unix type shell, a number of other posix tools
>> (grep/awk/sed/etc.), and they often fail with spaces in file and
>> directory names. Fixing this would introduce additional overhead
>> in any language.
>> 
>> 
>> Why Python?
>> 
>> For developers, it is simply one of the most productive tools around.
>> Python has grown into one of the most popular languages just by its
>> practical merits, without any corporate backing, and without a very
>> strong web appeal.
>> 
>> Most Radiance users will already have it installed, no matter the
>> platform.
>> 
>> On unix, scripts can be invoked by "#!" (like any other).
>> 
>> Any script can be "compiled" into a standalone executable file.
>> This is important on Windows, because invoking scripts (Python,
>> *.bat, or otherwise) from within programs is a real hassle there.
>> In fact, it ended up being the simplest way to get winimage to
>> perform falsecolor analysis.
>> (This could also be done with Perl, but...)
>> 
>> 
>> I expect Python to play an increasing role in Radiance development in
>> the future, with or without my own involvement.  So we might just as
>> well embrace it.
>> 
>> I would like to suggest adding Python versions of the most commonly
>> used scripts to the distribution. There are several possible
>> configurations how this could be done, so we'd have to discuss a
>> number of technical details first. And yes, verification before
>> inclusion would be an important step.
>> 
>> Opinions?
>> 
>> -schorsch
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From wouter.beck at ascendilex.nl  Mon Mar 21 14:41:22 2016
From: wouter.beck at ascendilex.nl (ascendilex | Wouter Beck)
Date: Mon, 21 Mar 2016 22:41:22 +0100
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
Message-ID: <56F06A82.5030004@ascendilex.nl>

An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160321/08dc39e9/attachment.html>

From gregoryjward at gmail.com  Mon Mar 21 14:55:51 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Mon, 21 Mar 2016 14:55:51 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <322e95b483431566b86e73c327a52e72@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
Message-ID: <97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>

Hmmm...  Well, I may be a little thicker with respect to learning new languages than you give me credit for.  Lately, I've been trying to pick up Java for one of my client projects and having a lot of trouble, despite (or because of?) its passing similarity to C++.  Perl is relatively easy for me precisely because it doesn't have all the object-oriented stuff or extensive libraries.  I always avoided the C++ STL because I never could understand what they wanted me to do with it.  It's less a matter of language philosophy and more a matter of how much vocabulary/syntax one needs to master, because my mental capacity for "miscellaneous stuff" is severely limited.  I never could get the hang of foreign languages because I can't remember vocabulary.

So, I stick by my preference not to rewrite all the existing Perl scripts as Python, except in cases where I am not needed for their future maintenance.  I understand that it is important to move away from C-shell, and that's fine.  Unfortunately, my ability to fix anything more than the way the Radiance tools get called in Python is currently zero, and looking at your new scripts, I don't see that changing anytime soon.

Also, I wish I had some test cases for these scripts, but I was never really good about that.  I generally wrote something when I needed it or had an example ready, but I didn't have the foresight to keep those examples around, so I'm not much help there.  Sorry!

-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Python scripts for Radiance
> Date: March 21, 2016 2:21:12 PM PDT
> 
> Greg, someone of your capacity will be fluent in the Python syntax within
> an hour, the object and exception system in a day, and the most elementary
> parts of the library within a few days (the included library is so huge
> that even experienced pythonistas will keep searching the documentation
> for more arcane modules).
> 
> Python is "the language thet doesn't get in the way", and not another Perl.
> You will very quickly have less problems debugging a Python program by
> someone else, compared to a Perl program you have written yourself.
> While I definitively understand your reluctance, I also think that in this
> specific case you will find it to be unjustified.
> And if you should still run into trouble, there are enough Radiance users
> out there who are already very fluent and can help out.
> 
> So now we need a few more good conversion candidates with test cases.
> Do you by chance still have any of the test cases you used to verify
> the existing scripts when you created them?
> 
> -schorsch
> 
> 
> Am 2016-03-21 20:44, schrieb Gregory J. Ward:
>> There is the downside that I don't know Python at all, and learning
>> yet another object-oriented language with completely different syntax
>> isn't high on my list of priorities.  That said, if we can get past
>> the support issues on various platforms, I have no problem with
>> Schorsch and others making contributions they wish to support on an
>> ongoing basis, or ones that are unlikely to require support.
>> For this reason, I don't have much enthusiasm for converting something
>> as complex as genBSDF to Python, where I couldn't understand or fix
>> any problems that arise in future.
>> Cheers,
>> -Greg
>>> From: Georg Mischler <schorsch at schorsch.com>
>>> Subject: [Radiance-dev] Python scripts for Radiance
>>> Date: March 21, 2016 9:02:03 AM PDT
>>> Hi again!
>>> I have converted some of the original Radiance shell scripts into Python.
>>> https://github.com/gmischler/PyRad
>>> The examples so far are exact drop-in replacements of the original csh
>>> or Perl versions, but with some extra functionality and benefits.
>>> * usage instructions (-H)
>>> * progress report (-V)
>>> * dry-run mode (-N)
>>> * detailed error diagnostics
>>> * compatible with Python 2.7 and Python 3.x
>>> * self contained (all functionality can be combined in one file)
>>> * truly cross-platform (no dependencies other than Python and Radiance)
>>> * direct process management (no intermediate shell calls)
>>> * immune to whitespace in file names
>>> * tamper-proof use of temporary files
>>> * instrumented for building a single-file *.exe with pyinstaller
>>> The current selection is still small, the examples were chosen for
>>> varying reasons:
>>> * falsecolor.py
>>> This one has been sitting on my disk (in much less refined form) for
>>> many years. Now I've updated it to using color palettes and to satisfy
>>> all the points above.
>>> * phisto.py
>>> * rlux.py
>>> * pveil.py
>>> Those three became test candidates because they are simple and have
>>> a straightforward command line.
>>> I'm looking for ideas (and contributions) on where to continue next.
>>> Good candidates are scripts that are commonly used.
>>> It is also very helpful if a script includes documentation about what
>>> it's actually supposed to do. Ideally with a set of test data to
>>> verify that it really does that.
>>> Actually, a solid set of test cases for the current collection would
>>> be very helpful too.
>>> Some of the csh/Perl scripts present a challenge, because they have
>>> rather unconventional command lines. In those cases, we might want to
>>> consider changing the interface to something more regular, provided
>>> this is possible.
>>> Not all of the existing scripts are really worth the effort.
>>> The Python versions with the extra functionality are definitively not
>>> as simple as the originals. Flexibility and safety has its price.
>>> On the other hand, they will definitively be *much* easier to maintain.
>>> Many of the current scripts (csh *and* Perl) blindly assume the
>>> existence of a unix type shell, a number of other posix tools
>>> (grep/awk/sed/etc.), and they often fail with spaces in file and
>>> directory names. Fixing this would introduce additional overhead
>>> in any language.
>>> Why Python?
>>> For developers, it is simply one of the most productive tools around.
>>> Python has grown into one of the most popular languages just by its
>>> practical merits, without any corporate backing, and without a very
>>> strong web appeal.
>>> Most Radiance users will already have it installed, no matter the
>>> platform.
>>> On unix, scripts can be invoked by "#!" (like any other).
>>> Any script can be "compiled" into a standalone executable file.
>>> This is important on Windows, because invoking scripts (Python,
>>> *.bat, or otherwise) from within programs is a real hassle there.
>>> In fact, it ended up being the simplest way to get winimage to
>>> perform falsecolor analysis.
>>> (This could also be done with Perl, but...)
>>> I expect Python to play an increasing role in Radiance development in
>>> the future, with or without my own involvement.  So we might just as
>>> well embrace it.
>>> I would like to suggest adding Python versions of the most commonly
>>> used scripts to the distribution. There are several possible
>>> configurations how this could be done, so we'd have to discuss a
>>> number of technical details first. And yes, verification before
>>> inclusion would be an important step.
>>> Opinions?
>>> -schorsch
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
> 
> -- 
> Georg Mischler  --  simulations developer  --  schorsch at schorsch com
> +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
> 
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev


From schorsch at schorsch.com  Mon Mar 21 16:22:47 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Tue, 22 Mar 2016 00:22:47 +0100
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
Message-ID: <be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>

You're arguing with some of the most syntactitcally complex aspects
of current programming languages here. (STL?!?)
In contrast, Pythons syntax was specifically designed to be easy to
understand and use (there's a lot of research into that).

Maybe you should just invest an hour and play through the tutorial
  https://docs.python.org/3/tutorial/  (also in the downloaded docs)
Then you may see firsthand that Python is really different from
all the horrible things you've already seen...

If you can't get your head wrapped around object oriented ideas,
Python won't force them onto you (other than Java). But if you want
to use them, they're much simpler to implement in Python.

Python is "the language that doesn't get in the way".

-schorsch


Am 2016-03-21 22:55, schrieb Gregory J. Ward:
> Hmmm...  Well, I may be a little thicker with respect to learning new
> languages than you give me credit for.  Lately, I've been trying to
> pick up Java for one of my client projects and having a lot of
> trouble, despite (or because of?) its passing similarity to C++.  Perl
> is relatively easy for me precisely because it doesn't have all the
> object-oriented stuff or extensive libraries.  I always avoided the
> C++ STL because I never could understand what they wanted me to do
> with it.  It's less a matter of language philosophy and more a matter
> of how much vocabulary/syntax one needs to master, because my mental
> capacity for "miscellaneous stuff" is severely limited.  I never could
> get the hang of foreign languages because I can't remember vocabulary.
> 
> So, I stick by my preference not to rewrite all the existing Perl
> scripts as Python, except in cases where I am not needed for their
> future maintenance.  I understand that it is important to move away
> from C-shell, and that's fine.  Unfortunately, my ability to fix
> anything more than the way the Radiance tools get called in Python is
> currently zero, and looking at your new scripts, I don't see that
> changing anytime soon.
> 
> Also, I wish I had some test cases for these scripts, but I was never
> really good about that.  I generally wrote something when I needed it
> or had an example ready, but I didn't have the foresight to keep those
> examples around, so I'm not much help there.  Sorry!
> 
> -Greg
> 
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>> Date: March 21, 2016 2:21:12 PM PDT
>> 
>> Greg, someone of your capacity will be fluent in the Python syntax 
>> within
>> an hour, the object and exception system in a day, and the most 
>> elementary
>> parts of the library within a few days (the included library is so 
>> huge
>> that even experienced pythonistas will keep searching the 
>> documentation
>> for more arcane modules).
>> 
>> Python is "the language thet doesn't get in the way", and not another 
>> Perl.
>> You will very quickly have less problems debugging a Python program by
>> someone else, compared to a Perl program you have written yourself.
>> While I definitively understand your reluctance, I also think that in 
>> this
>> specific case you will find it to be unjustified.
>> And if you should still run into trouble, there are enough Radiance 
>> users
>> out there who are already very fluent and can help out.
>> 
>> So now we need a few more good conversion candidates with test cases.
>> Do you by chance still have any of the test cases you used to verify
>> the existing scripts when you created them?
>> 
>> -schorsch
>> 
>> 
>> Am 2016-03-21 20:44, schrieb Gregory J. Ward:
>>> There is the downside that I don't know Python at all, and learning
>>> yet another object-oriented language with completely different syntax
>>> isn't high on my list of priorities.  That said, if we can get past
>>> the support issues on various platforms, I have no problem with
>>> Schorsch and others making contributions they wish to support on an
>>> ongoing basis, or ones that are unlikely to require support.
>>> For this reason, I don't have much enthusiasm for converting 
>>> something
>>> as complex as genBSDF to Python, where I couldn't understand or fix
>>> any problems that arise in future.
>>> Cheers,
>>> -Greg
>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>> Subject: [Radiance-dev] Python scripts for Radiance
>>>> Date: March 21, 2016 9:02:03 AM PDT
>>>> Hi again!
>>>> I have converted some of the original Radiance shell scripts into 
>>>> Python.
>>>> https://github.com/gmischler/PyRad
>>>> The examples so far are exact drop-in replacements of the original 
>>>> csh
>>>> or Perl versions, but with some extra functionality and benefits.
>>>> * usage instructions (-H)
>>>> * progress report (-V)
>>>> * dry-run mode (-N)
>>>> * detailed error diagnostics
>>>> * compatible with Python 2.7 and Python 3.x
>>>> * self contained (all functionality can be combined in one file)
>>>> * truly cross-platform (no dependencies other than Python and 
>>>> Radiance)
>>>> * direct process management (no intermediate shell calls)
>>>> * immune to whitespace in file names
>>>> * tamper-proof use of temporary files
>>>> * instrumented for building a single-file *.exe with pyinstaller
>>>> The current selection is still small, the examples were chosen for
>>>> varying reasons:
>>>> * falsecolor.py
>>>> This one has been sitting on my disk (in much less refined form) for
>>>> many years. Now I've updated it to using color palettes and to 
>>>> satisfy
>>>> all the points above.
>>>> * phisto.py
>>>> * rlux.py
>>>> * pveil.py
>>>> Those three became test candidates because they are simple and have
>>>> a straightforward command line.
>>>> I'm looking for ideas (and contributions) on where to continue next.
>>>> Good candidates are scripts that are commonly used.
>>>> It is also very helpful if a script includes documentation about 
>>>> what
>>>> it's actually supposed to do. Ideally with a set of test data to
>>>> verify that it really does that.
>>>> Actually, a solid set of test cases for the current collection would
>>>> be very helpful too.
>>>> Some of the csh/Perl scripts present a challenge, because they have
>>>> rather unconventional command lines. In those cases, we might want 
>>>> to
>>>> consider changing the interface to something more regular, provided
>>>> this is possible.
>>>> Not all of the existing scripts are really worth the effort.
>>>> The Python versions with the extra functionality are definitively 
>>>> not
>>>> as simple as the originals. Flexibility and safety has its price.
>>>> On the other hand, they will definitively be *much* easier to 
>>>> maintain.
>>>> Many of the current scripts (csh *and* Perl) blindly assume the
>>>> existence of a unix type shell, a number of other posix tools
>>>> (grep/awk/sed/etc.), and they often fail with spaces in file and
>>>> directory names. Fixing this would introduce additional overhead
>>>> in any language.
>>>> Why Python?
>>>> For developers, it is simply one of the most productive tools 
>>>> around.
>>>> Python has grown into one of the most popular languages just by its
>>>> practical merits, without any corporate backing, and without a very
>>>> strong web appeal.
>>>> Most Radiance users will already have it installed, no matter the
>>>> platform.
>>>> On unix, scripts can be invoked by "#!" (like any other).
>>>> Any script can be "compiled" into a standalone executable file.
>>>> This is important on Windows, because invoking scripts (Python,
>>>> *.bat, or otherwise) from within programs is a real hassle there.
>>>> In fact, it ended up being the simplest way to get winimage to
>>>> perform falsecolor analysis.
>>>> (This could also be done with Perl, but...)
>>>> I expect Python to play an increasing role in Radiance development 
>>>> in
>>>> the future, with or without my own involvement.  So we might just as
>>>> well embrace it.
>>>> I would like to suggest adding Python versions of the most commonly
>>>> used scripts to the distribution. There are several possible
>>>> configurations how this could be done, so we'd have to discuss a
>>>> number of technical details first. And yes, verification before
>>>> inclusion would be an important step.
>>>> Opinions?
>>>> -schorsch
>>> _______________________________________________
>>> Radiance-dev mailing list
>>> Radiance-dev at radiance-online.org
>>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>> 
>> --
>> Georg Mischler  --  simulations developer  --  schorsch at schorsch 
>> com
>> +schorsch.com+  --  lighting design tools  --  
>> http://www.schorsch.com/
>> 
>> 
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Mon Mar 21 16:52:57 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Mon, 21 Mar 2016 16:52:57 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
Message-ID: <7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>

All I can say is:

	SHORTPROGN = os.path.splitext(os.path.split(sys.argv[0])[1])[0]

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Python scripts for Radiance
> Date: March 21, 2016 4:22:47 PM PDT
> 
> You're arguing with some of the most syntactitcally complex aspects
> of current programming languages here. (STL?!?)
> In contrast, Pythons syntax was specifically designed to be easy to
> understand and use (there's a lot of research into that).
> 
> Maybe you should just invest an hour and play through the tutorial
> https://docs.python.org/3/tutorial/  (also in the downloaded docs)
> Then you may see firsthand that Python is really different from
> all the horrible things you've already seen...
> 
> If you can't get your head wrapped around object oriented ideas,
> Python won't force them onto you (other than Java). But if you want
> to use them, they're much simpler to implement in Python.
> 
> Python is "the language that doesn't get in the way".
> 
> -schorsch
> 
> 
> Am 2016-03-21 22:55, schrieb Gregory J. Ward:
>> Hmmm...  Well, I may be a little thicker with respect to learning new
>> languages than you give me credit for.  Lately, I've been trying to
>> pick up Java for one of my client projects and having a lot of
>> trouble, despite (or because of?) its passing similarity to C++.  Perl
>> is relatively easy for me precisely because it doesn't have all the
>> object-oriented stuff or extensive libraries.  I always avoided the
>> C++ STL because I never could understand what they wanted me to do
>> with it.  It's less a matter of language philosophy and more a matter
>> of how much vocabulary/syntax one needs to master, because my mental
>> capacity for "miscellaneous stuff" is severely limited.  I never could
>> get the hang of foreign languages because I can't remember vocabulary.
>> So, I stick by my preference not to rewrite all the existing Perl
>> scripts as Python, except in cases where I am not needed for their
>> future maintenance.  I understand that it is important to move away
>> from C-shell, and that's fine.  Unfortunately, my ability to fix
>> anything more than the way the Radiance tools get called in Python is
>> currently zero, and looking at your new scripts, I don't see that
>> changing anytime soon.
>> Also, I wish I had some test cases for these scripts, but I was never
>> really good about that.  I generally wrote something when I needed it
>> or had an example ready, but I didn't have the foresight to keep those
>> examples around, so I'm not much help there.  Sorry!
>> -Greg
>>> From: Georg Mischler <schorsch at schorsch.com>
>>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>>> Date: March 21, 2016 2:21:12 PM PDT
>>> Greg, someone of your capacity will be fluent in the Python syntax within
>>> an hour, the object and exception system in a day, and the most elementary
>>> parts of the library within a few days (the included library is so huge
>>> that even experienced pythonistas will keep searching the documentation
>>> for more arcane modules).
>>> Python is "the language thet doesn't get in the way", and not another Perl.
>>> You will very quickly have less problems debugging a Python program by
>>> someone else, compared to a Perl program you have written yourself.
>>> While I definitively understand your reluctance, I also think that in this
>>> specific case you will find it to be unjustified.
>>> And if you should still run into trouble, there are enough Radiance users
>>> out there who are already very fluent and can help out.
>>> So now we need a few more good conversion candidates with test cases.
>>> Do you by chance still have any of the test cases you used to verify
>>> the existing scripts when you created them?
>>> -schorsch
>>> Am 2016-03-21 20:44, schrieb Gregory J. Ward:
>>>> There is the downside that I don't know Python at all, and learning
>>>> yet another object-oriented language with completely different syntax
>>>> isn't high on my list of priorities.  That said, if we can get past
>>>> the support issues on various platforms, I have no problem with
>>>> Schorsch and others making contributions they wish to support on an
>>>> ongoing basis, or ones that are unlikely to require support.
>>>> For this reason, I don't have much enthusiasm for converting something
>>>> as complex as genBSDF to Python, where I couldn't understand or fix
>>>> any problems that arise in future.
>>>> Cheers,
>>>> -Greg
>>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>>> Subject: [Radiance-dev] Python scripts for Radiance
>>>>> Date: March 21, 2016 9:02:03 AM PDT
>>>>> Hi again!
>>>>> I have converted some of the original Radiance shell scripts into Python.
>>>>> https://github.com/gmischler/PyRad
>>>>> The examples so far are exact drop-in replacements of the original csh
>>>>> or Perl versions, but with some extra functionality and benefits.
>>>>> * usage instructions (-H)
>>>>> * progress report (-V)
>>>>> * dry-run mode (-N)
>>>>> * detailed error diagnostics
>>>>> * compatible with Python 2.7 and Python 3.x
>>>>> * self contained (all functionality can be combined in one file)
>>>>> * truly cross-platform (no dependencies other than Python and Radiance)
>>>>> * direct process management (no intermediate shell calls)
>>>>> * immune to whitespace in file names
>>>>> * tamper-proof use of temporary files
>>>>> * instrumented for building a single-file *.exe with pyinstaller
>>>>> The current selection is still small, the examples were chosen for
>>>>> varying reasons:
>>>>> * falsecolor.py
>>>>> This one has been sitting on my disk (in much less refined form) for
>>>>> many years. Now I've updated it to using color palettes and to satisfy
>>>>> all the points above.
>>>>> * phisto.py
>>>>> * rlux.py
>>>>> * pveil.py
>>>>> Those three became test candidates because they are simple and have
>>>>> a straightforward command line.
>>>>> I'm looking for ideas (and contributions) on where to continue next.
>>>>> Good candidates are scripts that are commonly used.
>>>>> It is also very helpful if a script includes documentation about what
>>>>> it's actually supposed to do. Ideally with a set of test data to
>>>>> verify that it really does that.
>>>>> Actually, a solid set of test cases for the current collection would
>>>>> be very helpful too.
>>>>> Some of the csh/Perl scripts present a challenge, because they have
>>>>> rather unconventional command lines. In those cases, we might want to
>>>>> consider changing the interface to something more regular, provided
>>>>> this is possible.
>>>>> Not all of the existing scripts are really worth the effort.
>>>>> The Python versions with the extra functionality are definitively not
>>>>> as simple as the originals. Flexibility and safety has its price.
>>>>> On the other hand, they will definitively be *much* easier to maintain.
>>>>> Many of the current scripts (csh *and* Perl) blindly assume the
>>>>> existence of a unix type shell, a number of other posix tools
>>>>> (grep/awk/sed/etc.), and they often fail with spaces in file and
>>>>> directory names. Fixing this would introduce additional overhead
>>>>> in any language.
>>>>> Why Python?
>>>>> For developers, it is simply one of the most productive tools around.
>>>>> Python has grown into one of the most popular languages just by its
>>>>> practical merits, without any corporate backing, and without a very
>>>>> strong web appeal.
>>>>> Most Radiance users will already have it installed, no matter the
>>>>> platform.
>>>>> On unix, scripts can be invoked by "#!" (like any other).
>>>>> Any script can be "compiled" into a standalone executable file.
>>>>> This is important on Windows, because invoking scripts (Python,
>>>>> *.bat, or otherwise) from within programs is a real hassle there.
>>>>> In fact, it ended up being the simplest way to get winimage to
>>>>> perform falsecolor analysis.
>>>>> (This could also be done with Perl, but...)
>>>>> I expect Python to play an increasing role in Radiance development in
>>>>> the future, with or without my own involvement.  So we might just as
>>>>> well embrace it.
>>>>> I would like to suggest adding Python versions of the most commonly
>>>>> used scripts to the distribution. There are several possible
>>>>> configurations how this could be done, so we'd have to discuss a
>>>>> number of technical details first. And yes, verification before
>>>>> inclusion would be an important step.
>>>>> Opinions?
>>>>> -schorsch


From schorsch at schorsch.com  Mon Mar 21 17:21:45 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Tue, 22 Mar 2016 01:21:45 +0100
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
Message-ID: <7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>

If that exceeds your syntax input queue, then you're getting old! :P


Am 2016-03-22 00:52, schrieb Gregory J. Ward:
> All I can say is:
> 
> 	SHORTPROGN = os.path.splitext(os.path.split(sys.argv[0])[1])[0]
> 
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>> Date: March 21, 2016 4:22:47 PM PDT
>> 
>> You're arguing with some of the most syntactitcally complex aspects
>> of current programming languages here. (STL?!?)
>> In contrast, Pythons syntax was specifically designed to be easy to
>> understand and use (there's a lot of research into that).
>> 
>> Maybe you should just invest an hour and play through the tutorial
>> https://docs.python.org/3/tutorial/  (also in the downloaded docs)
>> Then you may see firsthand that Python is really different from
>> all the horrible things you've already seen...
>> 
>> If you can't get your head wrapped around object oriented ideas,
>> Python won't force them onto you (other than Java). But if you want
>> to use them, they're much simpler to implement in Python.
>> 
>> Python is "the language that doesn't get in the way".
>> 
>> -schorsch
>> 
>> 
>> Am 2016-03-21 22:55, schrieb Gregory J. Ward:
>>> Hmmm...  Well, I may be a little thicker with respect to learning new
>>> languages than you give me credit for.  Lately, I've been trying to
>>> pick up Java for one of my client projects and having a lot of
>>> trouble, despite (or because of?) its passing similarity to C++.  
>>> Perl
>>> is relatively easy for me precisely because it doesn't have all the
>>> object-oriented stuff or extensive libraries.  I always avoided the
>>> C++ STL because I never could understand what they wanted me to do
>>> with it.  It's less a matter of language philosophy and more a matter
>>> of how much vocabulary/syntax one needs to master, because my mental
>>> capacity for "miscellaneous stuff" is severely limited.  I never 
>>> could
>>> get the hang of foreign languages because I can't remember 
>>> vocabulary.
>>> So, I stick by my preference not to rewrite all the existing Perl
>>> scripts as Python, except in cases where I am not needed for their
>>> future maintenance.  I understand that it is important to move away
>>> from C-shell, and that's fine.  Unfortunately, my ability to fix
>>> anything more than the way the Radiance tools get called in Python is
>>> currently zero, and looking at your new scripts, I don't see that
>>> changing anytime soon.
>>> Also, I wish I had some test cases for these scripts, but I was never
>>> really good about that.  I generally wrote something when I needed it
>>> or had an example ready, but I didn't have the foresight to keep 
>>> those
>>> examples around, so I'm not much help there.  Sorry!
>>> -Greg
>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>>>> Date: March 21, 2016 2:21:12 PM PDT
>>>> Greg, someone of your capacity will be fluent in the Python syntax 
>>>> within
>>>> an hour, the object and exception system in a day, and the most 
>>>> elementary
>>>> parts of the library within a few days (the included library is so 
>>>> huge
>>>> that even experienced pythonistas will keep searching the 
>>>> documentation
>>>> for more arcane modules).
>>>> Python is "the language thet doesn't get in the way", and not 
>>>> another Perl.
>>>> You will very quickly have less problems debugging a Python program 
>>>> by
>>>> someone else, compared to a Perl program you have written yourself.
>>>> While I definitively understand your reluctance, I also think that 
>>>> in this
>>>> specific case you will find it to be unjustified.
>>>> And if you should still run into trouble, there are enough Radiance 
>>>> users
>>>> out there who are already very fluent and can help out.
>>>> So now we need a few more good conversion candidates with test 
>>>> cases.
>>>> Do you by chance still have any of the test cases you used to verify
>>>> the existing scripts when you created them?
>>>> -schorsch
>>>> Am 2016-03-21 20:44, schrieb Gregory J. Ward:
>>>>> There is the downside that I don't know Python at all, and learning
>>>>> yet another object-oriented language with completely different 
>>>>> syntax
>>>>> isn't high on my list of priorities.  That said, if we can get past
>>>>> the support issues on various platforms, I have no problem with
>>>>> Schorsch and others making contributions they wish to support on an
>>>>> ongoing basis, or ones that are unlikely to require support.
>>>>> For this reason, I don't have much enthusiasm for converting 
>>>>> something
>>>>> as complex as genBSDF to Python, where I couldn't understand or fix
>>>>> any problems that arise in future.
>>>>> Cheers,
>>>>> -Greg
>>>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>>>> Subject: [Radiance-dev] Python scripts for Radiance
>>>>>> Date: March 21, 2016 9:02:03 AM PDT
>>>>>> Hi again!
>>>>>> I have converted some of the original Radiance shell scripts into 
>>>>>> Python.
>>>>>> https://github.com/gmischler/PyRad
>>>>>> The examples so far are exact drop-in replacements of the original 
>>>>>> csh
>>>>>> or Perl versions, but with some extra functionality and benefits.
>>>>>> * usage instructions (-H)
>>>>>> * progress report (-V)
>>>>>> * dry-run mode (-N)
>>>>>> * detailed error diagnostics
>>>>>> * compatible with Python 2.7 and Python 3.x
>>>>>> * self contained (all functionality can be combined in one file)
>>>>>> * truly cross-platform (no dependencies other than Python and 
>>>>>> Radiance)
>>>>>> * direct process management (no intermediate shell calls)
>>>>>> * immune to whitespace in file names
>>>>>> * tamper-proof use of temporary files
>>>>>> * instrumented for building a single-file *.exe with pyinstaller
>>>>>> The current selection is still small, the examples were chosen for
>>>>>> varying reasons:
>>>>>> * falsecolor.py
>>>>>> This one has been sitting on my disk (in much less refined form) 
>>>>>> for
>>>>>> many years. Now I've updated it to using color palettes and to 
>>>>>> satisfy
>>>>>> all the points above.
>>>>>> * phisto.py
>>>>>> * rlux.py
>>>>>> * pveil.py
>>>>>> Those three became test candidates because they are simple and 
>>>>>> have
>>>>>> a straightforward command line.
>>>>>> I'm looking for ideas (and contributions) on where to continue 
>>>>>> next.
>>>>>> Good candidates are scripts that are commonly used.
>>>>>> It is also very helpful if a script includes documentation about 
>>>>>> what
>>>>>> it's actually supposed to do. Ideally with a set of test data to
>>>>>> verify that it really does that.
>>>>>> Actually, a solid set of test cases for the current collection 
>>>>>> would
>>>>>> be very helpful too.
>>>>>> Some of the csh/Perl scripts present a challenge, because they 
>>>>>> have
>>>>>> rather unconventional command lines. In those cases, we might want 
>>>>>> to
>>>>>> consider changing the interface to something more regular, 
>>>>>> provided
>>>>>> this is possible.
>>>>>> Not all of the existing scripts are really worth the effort.
>>>>>> The Python versions with the extra functionality are definitively 
>>>>>> not
>>>>>> as simple as the originals. Flexibility and safety has its price.
>>>>>> On the other hand, they will definitively be *much* easier to 
>>>>>> maintain.
>>>>>> Many of the current scripts (csh *and* Perl) blindly assume the
>>>>>> existence of a unix type shell, a number of other posix tools
>>>>>> (grep/awk/sed/etc.), and they often fail with spaces in file and
>>>>>> directory names. Fixing this would introduce additional overhead
>>>>>> in any language.
>>>>>> Why Python?
>>>>>> For developers, it is simply one of the most productive tools 
>>>>>> around.
>>>>>> Python has grown into one of the most popular languages just by 
>>>>>> its
>>>>>> practical merits, without any corporate backing, and without a 
>>>>>> very
>>>>>> strong web appeal.
>>>>>> Most Radiance users will already have it installed, no matter the
>>>>>> platform.
>>>>>> On unix, scripts can be invoked by "#!" (like any other).
>>>>>> Any script can be "compiled" into a standalone executable file.
>>>>>> This is important on Windows, because invoking scripts (Python,
>>>>>> *.bat, or otherwise) from within programs is a real hassle there.
>>>>>> In fact, it ended up being the simplest way to get winimage to
>>>>>> perform falsecolor analysis.
>>>>>> (This could also be done with Perl, but...)
>>>>>> I expect Python to play an increasing role in Radiance development 
>>>>>> in
>>>>>> the future, with or without my own involvement.  So we might just 
>>>>>> as
>>>>>> well embrace it.
>>>>>> I would like to suggest adding Python versions of the most 
>>>>>> commonly
>>>>>> used scripts to the distribution. There are several possible
>>>>>> configurations how this could be done, so we'd have to discuss a
>>>>>> number of technical details first. And yes, verification before
>>>>>> inclusion would be an important step.
>>>>>> Opinions?
>>>>>> -schorsch
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Mon Mar 21 17:34:53 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Mon, 21 Mar 2016 17:34:53 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
Message-ID: <F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>

Getting old?  That, I am!  

Seriously, though, what's up with all the double-subscripts on string arrays?  Seems you always need string[0][0] to access a word, when I would expect just one subscript unless you want a character.  And I have absolutely no clue how the quoted line extracts the final file component from a path, assuming that's its purpose.  Python seems to introduce a whole new set of conventions, which if my mind weren't already polluted by the conventions of half a dozen other languages, probably wouldn't give me so much trouble.

The only real benefit I see to your recommendation, other than having just one language to deal with, is that we don't have to mess with different quoting conventions between Windows and Unix shell interpreters.  That does simplify things a bit, but we still need to change options around because Windows doesn't handle binary data transfer reliably.  So, piped commands still are not 100% portable even in Python.  We'd still have to switch between data format (-f*) command options on the two platforms, or suffer significant performance penalties on Unix.

Cheers,
-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Python scripts for Radiance
> Date: March 21, 2016 5:21:45 PM PDT
> 
> If that exceeds your syntax input queue, then you're getting old! :P
> 
> 
> Am 2016-03-22 00:52, schrieb Gregory J. Ward:
>> All I can say is:
>> 	SHORTPROGN = os.path.splitext(os.path.split(sys.argv[0])[1])[0]

>>> From: Georg Mischler <schorsch at schorsch.com>
>>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>>> Date: March 21, 2016 4:22:47 PM PDT
>>> You're arguing with some of the most syntactitcally complex aspects
>>> of current programming languages here. (STL?!?)
>>> In contrast, Pythons syntax was specifically designed to be easy to
>>> understand and use (there's a lot of research into that).
>>> Maybe you should just invest an hour and play through the tutorial
>>> https://docs.python.org/3/tutorial/  (also in the downloaded docs)
>>> Then you may see firsthand that Python is really different from
>>> all the horrible things you've already seen...
>>> If you can't get your head wrapped around object oriented ideas,
>>> Python won't force them onto you (other than Java). But if you want
>>> to use them, they're much simpler to implement in Python.
>>> Python is "the language that doesn't get in the way".
>>> -schorsch
>>> Am 2016-03-21 22:55, schrieb Gregory J. Ward:
>>>> Hmmm...  Well, I may be a little thicker with respect to learning new
>>>> languages than you give me credit for.  Lately, I've been trying to
>>>> pick up Java for one of my client projects and having a lot of
>>>> trouble, despite (or because of?) its passing similarity to C++.  Perl
>>>> is relatively easy for me precisely because it doesn't have all the
>>>> object-oriented stuff or extensive libraries.  I always avoided the
>>>> C++ STL because I never could understand what they wanted me to do
>>>> with it.  It's less a matter of language philosophy and more a matter
>>>> of how much vocabulary/syntax one needs to master, because my mental
>>>> capacity for "miscellaneous stuff" is severely limited.  I never could
>>>> get the hang of foreign languages because I can't remember vocabulary.
>>>> So, I stick by my preference not to rewrite all the existing Perl
>>>> scripts as Python, except in cases where I am not needed for their
>>>> future maintenance.  I understand that it is important to move away
>>>> from C-shell, and that's fine.  Unfortunately, my ability to fix
>>>> anything more than the way the Radiance tools get called in Python is
>>>> currently zero, and looking at your new scripts, I don't see that
>>>> changing anytime soon.
>>>> Also, I wish I had some test cases for these scripts, but I was never
>>>> really good about that.  I generally wrote something when I needed it
>>>> or had an example ready, but I didn't have the foresight to keep those
>>>> examples around, so I'm not much help there.  Sorry!
>>>> -Greg
>>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>>>>> Date: March 21, 2016 2:21:12 PM PDT
>>>>> Greg, someone of your capacity will be fluent in the Python syntax within
>>>>> an hour, the object and exception system in a day, and the most elementary
>>>>> parts of the library within a few days (the included library is so huge
>>>>> that even experienced pythonistas will keep searching the documentation
>>>>> for more arcane modules).
>>>>> Python is "the language thet doesn't get in the way", and not another Perl.
>>>>> You will very quickly have less problems debugging a Python program by
>>>>> someone else, compared to a Perl program you have written yourself.
>>>>> While I definitively understand your reluctance, I also think that in this
>>>>> specific case you will find it to be unjustified.
>>>>> And if you should still run into trouble, there are enough Radiance users
>>>>> out there who are already very fluent and can help out.
>>>>> So now we need a few more good conversion candidates with test cases.
>>>>> Do you by chance still have any of the test cases you used to verify
>>>>> the existing scripts when you created them?
>>>>> -schorsch
>>>>> Am 2016-03-21 20:44, schrieb Gregory J. Ward:
>>>>>> There is the downside that I don't know Python at all, and learning
>>>>>> yet another object-oriented language with completely different syntax
>>>>>> isn't high on my list of priorities.  That said, if we can get past
>>>>>> the support issues on various platforms, I have no problem with
>>>>>> Schorsch and others making contributions they wish to support on an
>>>>>> ongoing basis, or ones that are unlikely to require support.
>>>>>> For this reason, I don't have much enthusiasm for converting something
>>>>>> as complex as genBSDF to Python, where I couldn't understand or fix
>>>>>> any problems that arise in future.
>>>>>> Cheers,
>>>>>> -Greg
>>>>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>>>>> Subject: [Radiance-dev] Python scripts for Radiance
>>>>>>> Date: March 21, 2016 9:02:03 AM PDT
>>>>>>> Hi again!
>>>>>>> I have converted some of the original Radiance shell scripts into Python.
>>>>>>> https://github.com/gmischler/PyRad
>>>>>>> The examples so far are exact drop-in replacements of the original csh
>>>>>>> or Perl versions, but with some extra functionality and benefits.
>>>>>>> * usage instructions (-H)
>>>>>>> * progress report (-V)
>>>>>>> * dry-run mode (-N)
>>>>>>> * detailed error diagnostics
>>>>>>> * compatible with Python 2.7 and Python 3.x
>>>>>>> * self contained (all functionality can be combined in one file)
>>>>>>> * truly cross-platform (no dependencies other than Python and Radiance)
>>>>>>> * direct process management (no intermediate shell calls)
>>>>>>> * immune to whitespace in file names
>>>>>>> * tamper-proof use of temporary files
>>>>>>> * instrumented for building a single-file *.exe with pyinstaller
>>>>>>> The current selection is still small, the examples were chosen for
>>>>>>> varying reasons:
>>>>>>> * falsecolor.py
>>>>>>> This one has been sitting on my disk (in much less refined form) for
>>>>>>> many years. Now I've updated it to using color palettes and to satisfy
>>>>>>> all the points above.
>>>>>>> * phisto.py
>>>>>>> * rlux.py
>>>>>>> * pveil.py
>>>>>>> Those three became test candidates because they are simple and have
>>>>>>> a straightforward command line.
>>>>>>> I'm looking for ideas (and contributions) on where to continue next.
>>>>>>> Good candidates are scripts that are commonly used.
>>>>>>> It is also very helpful if a script includes documentation about what
>>>>>>> it's actually supposed to do. Ideally with a set of test data to
>>>>>>> verify that it really does that.
>>>>>>> Actually, a solid set of test cases for the current collection would
>>>>>>> be very helpful too.
>>>>>>> Some of the csh/Perl scripts present a challenge, because they have
>>>>>>> rather unconventional command lines. In those cases, we might want to
>>>>>>> consider changing the interface to something more regular, provided
>>>>>>> this is possible.
>>>>>>> Not all of the existing scripts are really worth the effort.
>>>>>>> The Python versions with the extra functionality are definitively not
>>>>>>> as simple as the originals. Flexibility and safety has its price.
>>>>>>> On the other hand, they will definitively be *much* easier to maintain.
>>>>>>> Many of the current scripts (csh *and* Perl) blindly assume the
>>>>>>> existence of a unix type shell, a number of other posix tools
>>>>>>> (grep/awk/sed/etc.), and they often fail with spaces in file and
>>>>>>> directory names. Fixing this would introduce additional overhead
>>>>>>> in any language.
>>>>>>> Why Python?
>>>>>>> For developers, it is simply one of the most productive tools around.
>>>>>>> Python has grown into one of the most popular languages just by its
>>>>>>> practical merits, without any corporate backing, and without a very
>>>>>>> strong web appeal.
>>>>>>> Most Radiance users will already have it installed, no matter the
>>>>>>> platform.
>>>>>>> On unix, scripts can be invoked by "#!" (like any other).
>>>>>>> Any script can be "compiled" into a standalone executable file.
>>>>>>> This is important on Windows, because invoking scripts (Python,
>>>>>>> *.bat, or otherwise) from within programs is a real hassle there.
>>>>>>> In fact, it ended up being the simplest way to get winimage to
>>>>>>> perform falsecolor analysis.
>>>>>>> (This could also be done with Perl, but...)
>>>>>>> I expect Python to play an increasing role in Radiance development in
>>>>>>> the future, with or without my own involvement.  So we might just as
>>>>>>> well embrace it.
>>>>>>> I would like to suggest adding Python versions of the most commonly
>>>>>>> used scripts to the distribution. There are several possible
>>>>>>> configurations how this could be done, so we'd have to discuss a
>>>>>>> number of technical details first. And yes, verification before
>>>>>>> inclusion would be an important step.
>>>>>>> Opinions?
>>>>>>> -schorsch
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
> 
> -- 
> Georg Mischler  --  simulations developer  --  schorsch at schorsch com
> +schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/
> 
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev


From rmfritz3 at gmail.com  Mon Mar 21 20:32:47 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Mon, 21 Mar 2016 20:32:47 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
Message-ID: <CANeAMoKDepaiTmGYpxoje3=FjiutqUkF0TVS=c_aLBOuDcsrxg@mail.gmail.com>

The problem that code solves is finding the name of the invoked command and
getting rid of the Windows .exe extension. I'd write it a bit differently:

  from os.path import basename, splitext
  ...
  progname = splitext(basename(sys.argv[0]))[0]

  (or, at length)
  progfile = basename(sys.argv[0])
  progname = splitext(progfile)[0]

On the other hand, it probably ought to be encapsulated somewhere in a
function or class, so that one does not have to look at it too much. :-)

The binary EOF thing was a problem of the old FAT filesystem, which
operated in blocks, and EOF was an actual character in the file. It is
still present in NTFS, then? Say, what?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160321/feaa0cf8/attachment.html>

From schorsch at schorsch.com  Tue Mar 22 04:49:39 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Tue, 22 Mar 2016 12:49:39 +0100
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
Message-ID: <6291434a20178429225e7067dffdb54e@tanha.pair.com>

Am 2016-03-22 01:34, schrieb Gregory J. Ward:
> Getting old?  That, I am!

Hehe, so am I!


> Seriously, though, what's up with all the double-subscripts on string
> arrays?  Seems you always need string[0][0] to access a word, when I
> would expect just one subscript unless you want a character.

Where did you see a double-subscript?

It's essentially the equivalent of fixargv0() (two dozen lines of C).
But since it consists of just two nested library calls, there's no
point in turning it into an extra function.


> And I
> have absolutely no clue how the quoted line extracts the final file
> component from a path, assuming that's its purpose.  Python seems to
> introduce a whole new set of conventions, which if my mind weren't
> already polluted by the conventions of half a dozen other languages,
> probably wouldn't give me so much trouble.

If every language used the same concepts and conventions, there'd
be little point in having more than one of them, would there?

Those are rather straightforward functions from the library module
"os.path", accessing an attribute (in this case a list of strings)
of the module "sys".
Once you have familiarized youself with the basics of how to invoke
library functions in Python, It's easy to guess what they do just by
looking at their names.


> The only real benefit I see to your recommendation, other than having
> just one language to deal with, is that we don't have to mess with
> different quoting conventions between Windows and Unix shell
> interpreters.

The problem here is that Radiance uses the shell (via posix system()
and popen()) to invoke subprocesses. In a multi-platform environment,
those functions should be avoided to begin with, but that would be a
lot of work to change now in Radiance.

I have written win_popen.c and win_process.c many years ago to
circumvent (not solve!) the problem in Radiance itself.

In Python, using os.system() and os.popen() would result in the same
problems. That's why I'm using the "subprocess" library module, which
invokes processes directly and encapsulates the platform differences.

One of the consequences is that pipes aren't chained automatically,
so we need some extra code to handle those (same as win_popen() does).
But that's a price we should be willing to pay in any language we use.
This functionality is tucked away in the pyradlib/pyrad_proc.py module,
and - once finalized - should never need to be touched again.


> That does simplify things a bit, but we still need to
> change options around because Windows doesn't handle binary data
> transfer reliably.  So, piped commands still are not 100% portable
> even in Python.

Windows can handle binary data transfers just fine.
Or are you talking about "\r\n"?
That is a rather minor problem in Python, since we need to
distinguish between binary and text data streams anyway.
You don't want your binary data converted to Unicode, do you?


> We'd still have to switch between data format (-f*)
> command options on the two platforms, or suffer significant
> performance penalties on Unix.

Sorry, not sure what you're talking about there.


Cheers
-schorsch


>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>> Date: March 21, 2016 5:21:45 PM PDT
>> 
>> If that exceeds your syntax input queue, then you're getting old! :P
>> 
>> 
>> Am 2016-03-22 00:52, schrieb Gregory J. Ward:
>>> All I can say is:
>>> 	SHORTPROGN = os.path.splitext(os.path.split(sys.argv[0])[1])[0]
> 
>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>>>> Date: March 21, 2016 4:22:47 PM PDT
>>>> You're arguing with some of the most syntactitcally complex aspects
>>>> of current programming languages here. (STL?!?)
>>>> In contrast, Pythons syntax was specifically designed to be easy to
>>>> understand and use (there's a lot of research into that).
>>>> Maybe you should just invest an hour and play through the tutorial
>>>> https://docs.python.org/3/tutorial/  (also in the downloaded docs)
>>>> Then you may see firsthand that Python is really different from
>>>> all the horrible things you've already seen...
>>>> If you can't get your head wrapped around object oriented ideas,
>>>> Python won't force them onto you (other than Java). But if you want
>>>> to use them, they're much simpler to implement in Python.
>>>> Python is "the language that doesn't get in the way".
>>>> -schorsch
>>>> Am 2016-03-21 22:55, schrieb Gregory J. Ward:
>>>>> Hmmm...  Well, I may be a little thicker with respect to learning 
>>>>> new
>>>>> languages than you give me credit for.  Lately, I've been trying to
>>>>> pick up Java for one of my client projects and having a lot of
>>>>> trouble, despite (or because of?) its passing similarity to C++.  
>>>>> Perl
>>>>> is relatively easy for me precisely because it doesn't have all the
>>>>> object-oriented stuff or extensive libraries.  I always avoided the
>>>>> C++ STL because I never could understand what they wanted me to do
>>>>> with it.  It's less a matter of language philosophy and more a 
>>>>> matter
>>>>> of how much vocabulary/syntax one needs to master, because my 
>>>>> mental
>>>>> capacity for "miscellaneous stuff" is severely limited.  I never 
>>>>> could
>>>>> get the hang of foreign languages because I can't remember 
>>>>> vocabulary.
>>>>> So, I stick by my preference not to rewrite all the existing Perl
>>>>> scripts as Python, except in cases where I am not needed for their
>>>>> future maintenance.  I understand that it is important to move away
>>>>> from C-shell, and that's fine.  Unfortunately, my ability to fix
>>>>> anything more than the way the Radiance tools get called in Python 
>>>>> is
>>>>> currently zero, and looking at your new scripts, I don't see that
>>>>> changing anytime soon.
>>>>> Also, I wish I had some test cases for these scripts, but I was 
>>>>> never
>>>>> really good about that.  I generally wrote something when I needed 
>>>>> it
>>>>> or had an example ready, but I didn't have the foresight to keep 
>>>>> those
>>>>> examples around, so I'm not much help there.  Sorry!
>>>>> -Greg
>>>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>>>> Subject: Re: [Radiance-dev] Python scripts for Radiance
>>>>>> Date: March 21, 2016 2:21:12 PM PDT
>>>>>> Greg, someone of your capacity will be fluent in the Python syntax 
>>>>>> within
>>>>>> an hour, the object and exception system in a day, and the most 
>>>>>> elementary
>>>>>> parts of the library within a few days (the included library is so 
>>>>>> huge
>>>>>> that even experienced pythonistas will keep searching the 
>>>>>> documentation
>>>>>> for more arcane modules).
>>>>>> Python is "the language thet doesn't get in the way", and not 
>>>>>> another Perl.
>>>>>> You will very quickly have less problems debugging a Python 
>>>>>> program by
>>>>>> someone else, compared to a Perl program you have written 
>>>>>> yourself.
>>>>>> While I definitively understand your reluctance, I also think that 
>>>>>> in this
>>>>>> specific case you will find it to be unjustified.
>>>>>> And if you should still run into trouble, there are enough 
>>>>>> Radiance users
>>>>>> out there who are already very fluent and can help out.
>>>>>> So now we need a few more good conversion candidates with test 
>>>>>> cases.
>>>>>> Do you by chance still have any of the test cases you used to 
>>>>>> verify
>>>>>> the existing scripts when you created them?
>>>>>> -schorsch
>>>>>> Am 2016-03-21 20:44, schrieb Gregory J. Ward:
>>>>>>> There is the downside that I don't know Python at all, and 
>>>>>>> learning
>>>>>>> yet another object-oriented language with completely different 
>>>>>>> syntax
>>>>>>> isn't high on my list of priorities.  That said, if we can get 
>>>>>>> past
>>>>>>> the support issues on various platforms, I have no problem with
>>>>>>> Schorsch and others making contributions they wish to support on 
>>>>>>> an
>>>>>>> ongoing basis, or ones that are unlikely to require support.
>>>>>>> For this reason, I don't have much enthusiasm for converting 
>>>>>>> something
>>>>>>> as complex as genBSDF to Python, where I couldn't understand or 
>>>>>>> fix
>>>>>>> any problems that arise in future.
>>>>>>> Cheers,
>>>>>>> -Greg
>>>>>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>>>>>> Subject: [Radiance-dev] Python scripts for Radiance
>>>>>>>> Date: March 21, 2016 9:02:03 AM PDT
>>>>>>>> Hi again!
>>>>>>>> I have converted some of the original Radiance shell scripts 
>>>>>>>> into Python.
>>>>>>>> https://github.com/gmischler/PyRad
>>>>>>>> The examples so far are exact drop-in replacements of the 
>>>>>>>> original csh
>>>>>>>> or Perl versions, but with some extra functionality and 
>>>>>>>> benefits.
>>>>>>>> * usage instructions (-H)
>>>>>>>> * progress report (-V)
>>>>>>>> * dry-run mode (-N)
>>>>>>>> * detailed error diagnostics
>>>>>>>> * compatible with Python 2.7 and Python 3.x
>>>>>>>> * self contained (all functionality can be combined in one file)
>>>>>>>> * truly cross-platform (no dependencies other than Python and 
>>>>>>>> Radiance)
>>>>>>>> * direct process management (no intermediate shell calls)
>>>>>>>> * immune to whitespace in file names
>>>>>>>> * tamper-proof use of temporary files
>>>>>>>> * instrumented for building a single-file *.exe with pyinstaller
>>>>>>>> The current selection is still small, the examples were chosen 
>>>>>>>> for
>>>>>>>> varying reasons:
>>>>>>>> * falsecolor.py
>>>>>>>> This one has been sitting on my disk (in much less refined form) 
>>>>>>>> for
>>>>>>>> many years. Now I've updated it to using color palettes and to 
>>>>>>>> satisfy
>>>>>>>> all the points above.
>>>>>>>> * phisto.py
>>>>>>>> * rlux.py
>>>>>>>> * pveil.py
>>>>>>>> Those three became test candidates because they are simple and 
>>>>>>>> have
>>>>>>>> a straightforward command line.
>>>>>>>> I'm looking for ideas (and contributions) on where to continue 
>>>>>>>> next.
>>>>>>>> Good candidates are scripts that are commonly used.
>>>>>>>> It is also very helpful if a script includes documentation about 
>>>>>>>> what
>>>>>>>> it's actually supposed to do. Ideally with a set of test data to
>>>>>>>> verify that it really does that.
>>>>>>>> Actually, a solid set of test cases for the current collection 
>>>>>>>> would
>>>>>>>> be very helpful too.
>>>>>>>> Some of the csh/Perl scripts present a challenge, because they 
>>>>>>>> have
>>>>>>>> rather unconventional command lines. In those cases, we might 
>>>>>>>> want to
>>>>>>>> consider changing the interface to something more regular, 
>>>>>>>> provided
>>>>>>>> this is possible.
>>>>>>>> Not all of the existing scripts are really worth the effort.
>>>>>>>> The Python versions with the extra functionality are 
>>>>>>>> definitively not
>>>>>>>> as simple as the originals. Flexibility and safety has its 
>>>>>>>> price.
>>>>>>>> On the other hand, they will definitively be *much* easier to 
>>>>>>>> maintain.
>>>>>>>> Many of the current scripts (csh *and* Perl) blindly assume the
>>>>>>>> existence of a unix type shell, a number of other posix tools
>>>>>>>> (grep/awk/sed/etc.), and they often fail with spaces in file and
>>>>>>>> directory names. Fixing this would introduce additional overhead
>>>>>>>> in any language.
>>>>>>>> Why Python?
>>>>>>>> For developers, it is simply one of the most productive tools 
>>>>>>>> around.
>>>>>>>> Python has grown into one of the most popular languages just by 
>>>>>>>> its
>>>>>>>> practical merits, without any corporate backing, and without a 
>>>>>>>> very
>>>>>>>> strong web appeal.
>>>>>>>> Most Radiance users will already have it installed, no matter 
>>>>>>>> the
>>>>>>>> platform.
>>>>>>>> On unix, scripts can be invoked by "#!" (like any other).
>>>>>>>> Any script can be "compiled" into a standalone executable file.
>>>>>>>> This is important on Windows, because invoking scripts (Python,
>>>>>>>> *.bat, or otherwise) from within programs is a real hassle 
>>>>>>>> there.
>>>>>>>> In fact, it ended up being the simplest way to get winimage to
>>>>>>>> perform falsecolor analysis.
>>>>>>>> (This could also be done with Perl, but...)
>>>>>>>> I expect Python to play an increasing role in Radiance 
>>>>>>>> development in
>>>>>>>> the future, with or without my own involvement.  So we might 
>>>>>>>> just as
>>>>>>>> well embrace it.
>>>>>>>> I would like to suggest adding Python versions of the most 
>>>>>>>> commonly
>>>>>>>> used scripts to the distribution. There are several possible
>>>>>>>> configurations how this could be done, so we'd have to discuss a
>>>>>>>> number of technical details first. And yes, verification before
>>>>>>>> inclusion would be an important step.
>>>>>>>> Opinions?
>>>>>>>> -schorsch
>>> _______________________________________________
>>> Radiance-dev mailing list
>>> Radiance-dev at radiance-online.org
>>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>> 
>> --
>> Georg Mischler  --  simulations developer  --  schorsch at schorsch 
>> com
>> +schorsch.com+  --  lighting design tools  --  
>> http://www.schorsch.com/
>> 
>> 
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Tue Mar 22 09:02:22 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Tue, 22 Mar 2016 09:02:22 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <6291434a20178429225e7067dffdb54e@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
Message-ID: <C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>

Removing some stuff to keep things from getting too drawn-out...

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Python scripts for Radiance
> Date: March 22, 2016 4:49:39 AM PDT
> 
> Am 2016-03-22 01:34, schrieb Gregory J. Ward:
> ...
> Where did you see a double-subscript?

I think it's when you're calling your parser library, which must be putting arguments into 2-D arrays.

> It's essentially the equivalent of fixargv0() (two dozen lines of C).
> But since it consists of just two nested library calls, there's no
> point in turning it into an extra function.
> 
> If every language used the same concepts and conventions, there'd
> be little point in having more than one of them, would there?
> 
> Those are rather straightforward functions from the library module
> "os.path", accessing an attribute (in this case a list of strings)
> of the module "sys".
> Once you have familiarized youself with the basics of how to invoke
> library functions in Python, It's easy to guess what they do just by
> looking at their names.

Well, it's still not obvious to me, even after Randoph's explanation (which used different calls).  In any case, I was only trying to make the point that Python isn't transparent, either.

Thinking on it some more, the main issue I have with Python is probably the object-oriented structure, which moves it even further from a command-line interpreter.  For me, the main benefit of using a scripting language is that it is close to the command-line, which is where Radiance (mostly) lives.  If you introduce too much structure, you're getting back to something resembling a C program, and you may as well just write it that way, instead.

Perl looks a lot like traditional interpreter shells with the added benefit of more useful built-in commands and expression evaluation.  You can open a Perl script and read through it like you're reading a sequence of commands.  User-defined functions have a bare-bones call structure and don't have to be defined before they're used, so they don't interrupt the flow as you read through the code.  Scripting languages need to be easy to write and easy to read to be useful in my opinion.  They don't have to be beautiful.

Also, relying heavily on add-on libraries comes at a cost, which is expanded vocabulary one must learn.  We get by in Perl with just one library for making temp files, I think, and that was added to avoid some of the system incompatibilities with Windows and is only called in a couple of places.

>> The only real benefit I see to your recommendation, other than having
>> just one language to deal with, is that we don't have to mess with
>> different quoting conventions between Windows and Unix shell
>> interpreters.
> 
> The problem here is that Radiance uses the shell (via posix system()
> and popen()) to invoke subprocesses. In a multi-platform environment,
> those functions should be avoided to begin with, but that would be a
> lot of work to change now in Radiance.
> 
> I have written win_popen.c and win_process.c many years ago to
> circumvent (not solve!) the problem in Radiance itself.
> 
> In Python, using os.system() and os.popen() would result in the same
> problems. That's why I'm using the "subprocess" library module, which
> invokes processes directly and encapsulates the platform differences.
> 
> One of the consequences is that pipes aren't chained automatically,
> so we need some extra code to handle those (same as win_popen() does).
> But that's a price we should be willing to pay in any language we use.
> This functionality is tucked away in the pyradlib/pyrad_proc.py module,
> and - once finalized - should never need to be touched again.

We chain up to 4 commands in genBSDF, which I guess will translate to call_four() in your library?

>> That does simplify things a bit, but we still need to
>> change options around because Windows doesn't handle binary data
>> transfer reliably.  So, piped commands still are not 100% portable
>> even in Python.
> 
> Windows can handle binary data transfers just fine.
> Or are you talking about "\r\n"?
> That is a rather minor problem in Python, since we need to
> distinguish between binary and text data streams anyway.
> You don't want your binary data converted to Unicode, do you?
> 
>> We'd still have to switch between data format (-f*)
>> command options on the two platforms, or suffer significant
>> performance penalties on Unix.
> 
> Sorry, not sure what you're talking about there.

Well, we may need to devise some tests to be sure this is still a problem, but in the past, Windows would deliver binary files in 128-byte chunks, meaning that the last chunk might have garbage at the end of it that was not actually produced by the program that sent it.  So long as the receiving program knows exactly how much data to expect, which is frequently the case, there is no problem.  However, if the receiving program is counting bytes to see how much data it gets (like rcalc, total, etc.) then it screws up the results, which is why we've been sticking with ASCII data in Windows despite the horrendous overhead translating between ASCII and IEEE floating-point.

Cheers,
-Greg

From Robert.Guglielmetti at nrel.gov  Tue Mar 22 09:37:46 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Tue, 22 Mar 2016 16:37:46 +0000
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
Message-ID: <D316CE4A.23DC4%Robert.Guglielmetti@nrel.gov>

This is getting good...

On 3/22/16, 10:02 AM, "Gregory J. Ward" <gregoryjward at gmail.com> wrote:

>
>Thinking on it some more, the main issue I have with Python is probably
>the object-oriented structure, which moves it even further from a
>command-line interpreter.  For me, the main benefit of using a scripting
>language is that it is close to the command-line, which is where Radiance
>(mostly) lives.  If you introduce too much structure, you're getting back
>to something resembling a C program, and you may as well just write it
>that way, instead.
>
>Perl looks a lot like traditional interpreter shells with the added
>benefit of more useful built-in commands and expression evaluation.  You
>can open a Perl script and read through it like you're reading a sequence
>of commands.  User-defined functions have a bare-bones call structure and
>don't have to be defined before they're used, so they don't interrupt the
>flow as you read through the code.  Scripting languages need to be easy
>to write and easy to read to be useful in my opinion.  They don't have to
>be beautiful.
>
>Also, relying heavily on add-on libraries comes at a cost, which is
>expanded vocabulary one must learn.  We get by in Perl with just one
>library for making temp files, I think, and that was added to avoid some
>of the system incompatibilities with Windows and is only called in a
>couple of places.


Eh, I respectfully disagree, here. Languages like Python and Ruby are
making it easy for meatheads like me to write functional cross-platform
programs that can leverage Radiance tools well, and offer users niceties
like command line help, threading, queuing, etc. One could write these
with minimal library support and blow off making functions where they make
sense and leave one with a very linear, readable (and maintainable)
program. On the other hand, wrapping a few redundant bits into a function
here and there makes it cleaner, easier to maintain, and IMO does not come
anywhere close to the price of admission of writing the same shit in C or
C++.(!)



>Well, we may need to devise some tests to be sure this is still a
>problem, but in the past, Windows would deliver binary files in 128-byte
>chunks, meaning that the last chunk might have garbage at the end of it
>that was not actually produced by the program that sent it.  So long as
>the receiving program knows exactly how much data to expect, which is
>frequently the case, there is no problem.  However, if the receiving
>program is counting bytes to see how much data it gets (like rcalc,
>total, etc.) then it screws up the results, which is why we've been
>sticking with ASCII data in Windows despite the horrendous overhead
>translating between ASCII and IEEE floating-point.


This was still a problem last year when I was writing the
Radiance-OpenStudio stuff, and is a major roadblock for doing large scale
analysis with Radiance on Windows, I'm finding. =(



From gregoryjward at gmail.com  Tue Mar 22 09:48:50 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Tue, 22 Mar 2016 09:48:50 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <D316CE4A.23DC4%Robert.Guglielmetti@nrel.gov>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<D316CE4A.23DC4%Robert.Guglielmetti@nrel.gov>
Message-ID: <AA353702-9DF3-4FF7-858C-268E2D20055C@gmail.com>

Real quick:

> From: "Guglielmetti, Robert" <Robert.Guglielmetti at nrel.gov>
> Date: March 22, 2016 9:37:46 AM PDT
> 
> Eh, I respectfully disagree, here. Languages like Python and Ruby are
> making it easy for meatheads like me to write functional cross-platform
> programs that can leverage Radiance tools well, and offer users niceties
> like command line help, threading, queuing, etc. One could write these
> with minimal library support and blow off making functions where they make
> sense and leave one with a very linear, readable (and maintainable)
> program. On the other hand, wrapping a few redundant bits into a function
> here and there makes it cleaner, easier to maintain, and IMO does not come
> anywhere close to the price of admission of writing the same shit in C or
> C++.(!)

I wasn't arguing against defining your own functions or encapsulation -- just heavy reliance on add-on libraries.  The former just keeps the code neat, moving repeated or complicated calls to another part of the script.  The latter means you have to go learn about some library you never heard of and study it to figure out what the script is even doing.  Arguments about obviousness notwithstanding, you can't debug a program you don't fully understand.

-G

From rmfritz3 at gmail.com  Tue Mar 22 11:25:38 2016
From: rmfritz3 at gmail.com (Randolph Fritz)
Date: Tue, 22 Mar 2016 11:25:38 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <AA353702-9DF3-4FF7-858C-268E2D20055C@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<D316CE4A.23DC4%Robert.Guglielmetti@nrel.gov>
	<AA353702-9DF3-4FF7-858C-268E2D20055C@gmail.com>
Message-ID: <32580473-976F-4680-A6FC-19A070E84886@gmail.com>

I don?t think it?s as awful as that; Python is a widely-known, widely-used, and well-documented language and freely available.  I worry more about Perl, because it is so easy to create write-only code in Perl and this becomes a maintenance problem.

On the other hand some Unix commands are becoming obsolete. I use awk and csh and wonder how long they will last.  Like languages, computing environments change over time.

The justification for the various interpretive languages is development speed and (mostly) ease of maintenance; one can probably write most things in Python in 1/10th the time it takes to write them in C, and with modern computers so fast, you may never actually have to write the code in C, or at least put that step off for some time.  If your first version is adequate, why fiddle with it?  There is some effort at bridging the productivity gap between compiled and interpreted languages.  Unfortunately that work has not so far reached scientific and engineering computing.  We?re still using FORTRAN for some things!

Randolph

> On Mar 22, 2016, at 9:48 AM, Gregory J. Ward <gregoryjward at gmail.com> wrote:
> 
> Real quick:
> 
>> From: "Guglielmetti, Robert" <Robert.Guglielmetti at nrel.gov>
>> Date: March 22, 2016 9:37:46 AM PDT
>> 
>> Eh, I respectfully disagree, here. Languages like Python and Ruby are
>> making it easy for meatheads like me to write functional cross-platform
>> programs that can leverage Radiance tools well, and offer users niceties
>> like command line help, threading, queuing, etc. One could write these
>> with minimal library support and blow off making functions where they make
>> sense and leave one with a very linear, readable (and maintainable)
>> program. On the other hand, wrapping a few redundant bits into a function
>> here and there makes it cleaner, easier to maintain, and IMO does not come
>> anywhere close to the price of admission of writing the same shit in C or
>> C++.(!)
> 
> I wasn't arguing against defining your own functions or encapsulation -- just heavy reliance on add-on libraries.  The former just keeps the code neat, moving repeated or complicated calls to another part of the script.  The latter means you have to go learn about some library you never heard of and study it to figure out what the script is even doing.  Arguments about obviousness notwithstanding, you can't debug a program you don't fully understand.
> 
> -G
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev



From schorsch at schorsch.com  Tue Mar 22 12:30:46 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Tue, 22 Mar 2016 20:30:46 +0100
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
Message-ID: <41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>

>> Am 2016-03-22 01:34, schrieb Gregory J. Ward:
> 
> Well, it's still not obvious to me, even after Randoph's explanation
> (which used different calls).  In any case, I was only trying to make
> the point that Python isn't transparent, either.

An unknown language is never immediately transparent without some
minimal learning effort. But that's not necessarily because it's
difficult - just because it's new.


> Thinking on it some more, the main issue I have with Python is
> probably the object-oriented structure, which moves it even further
> from a command-line interpreter.  For me, the main benefit of using a
> scripting language is that it is close to the command-line, which is
> where Radiance (mostly) lives.  If you introduce too much structure,
> you're getting back to something resembling a C program, and you may
> as well just write it that way, instead.

There are (at least) two different classes of "scripts" in Radiance.
Some are indeed little more than a listing of a few commands, and
in a few cases it looks like they were one-off solutions to a very
specific problem. Most people will never use those, or they might
create their own versions. It may or may not be worth to convert
them, and in some cases the Python version may actually become a
literal translation without any added structure.

The other class are programs like falsecolor or genBSDF, which are
far beyond that "script" stage. Those are "real" programs in the sense
that they solve tasks that most people will be confronted with
regularly. This makes them unlikely to change very significantly over
time, other than to add features. In those cases, the effort is
clearly justified to design an object oriented structure and add all
the bells and whistles most users expect from a complete tool.

You seem to think that object orientation will necessarily make a 
program
inflexible. Well, for Java and C++, this is indeed usually the case.
But it doesn't have to be like that. A well crafted object oriented
design will make adding features easier, not harder. And Python is one
of the rare languages, where changing the code is actually fun, and
not something to be scared of.

This ease of maintenance is also one of the reasons why those things
should rather *not* be converted to C. There's simply no need to do 
that,
as long as we can delegate the number crunching to other tools.


> Perl looks a lot like traditional interpreter shells with the added
> benefit of more useful built-in commands and expression evaluation.
> You can open a Perl script and read through it like you're reading a
> sequence of commands.  User-defined functions have a bare-bones call
> structure and don't have to be defined before they're used, so they
> don't interrupt the flow as you read through the code.

If you look at Python, you'll find that all that is (or can be) the
case there as well, just without the uglyness.


> Scripting languages need to be easy to write and easy to read to be
> useful in my opinion.

But you're still full of praise for Perl...?


> Also, relying heavily on add-on libraries comes at a cost, which is
> expanded vocabulary one must learn.

Libraries coming included with the language are not "add-on".
We won't get any bonus points for reinventing the wheel, or for
dragging stuff around instead of wheeling it.


> We chain up to 4 commands in genBSDF, which I guess will translate to
> call_four() in your library?

We're going to have a call_many() then, which will accept and chain an
arbitrary number of commands. Win_popen() already does that.


>>> We'd still have to switch between data format (-f*)
>>> command options on the two platforms, or suffer significant
>>> performance penalties on Unix.
>> 
>> Sorry, not sure what you're talking about there.
> 
> Well, we may need to devise some tests to be sure this is still a
> problem, but in the past, Windows would deliver binary files in
> 128-byte chunks, meaning that the last chunk might have garbage at the
> end of it that was not actually produced by the program that sent it.

That sounds like a severely broken implementation. I can't possibly
imagine this still to be the case. If there's a test case, I'll check
it out.


Cheers
-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/


From rmfritz3 at gmail.com  Tue Mar 22 14:40:55 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Tue, 22 Mar 2016 14:40:55 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
Message-ID: <CANeAMo+5hCCnzjQt4gkCgyiOuERCL0ixMnGuCjDpy+U6AjQ7tA@mail.gmail.com>

Greg:
?
>
> Well, we may need to devise some tests to be sure this is still a
> problem, but in the past, Windows would deliver binary files in
> 128-byte chunks, meaning that the last chunk might have garbage at the
> end of it that was not actually produced by the program that sent it.
>

Schorsch

> That sounds like a severely broken implementation. I can't possibly
> imagine this still to be the case. If there's a test case, I'll check
> it out.


It's a hang-over from MS-DOS and its FAT filesystem, which measured files
in blocks rather than bytes. I'd be surprised if Windows NTFS has the
problem, *but* memory sticks still use a FAT filesystem, so the problem may
emerge when transporting files on a memory stick. That's a case to test.

Greg, I once tried writing all my project scripts in Python. Ultimately I
got sick of it and reverted to csh. But for the a-bit-more-than-a-script
problems that Schorsh is talking about, Python is an enormous help, making
the development process faster and less error-prone. Compared to any shell,
Python makes it easier to write correct code. Compared to C, python is far
more concise, making coding much faster, which is why we don't just use C
instead. And, truly, it does not impose the formal requirements that Java
or C++ does. I wish you would give it another look before deciding it's
hopeless.

And back to work with me.

Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160322/179fce3c/attachment.html>

From gregoryjward at gmail.com  Tue Mar 22 16:04:47 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Tue, 22 Mar 2016 16:04:47 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
Message-ID: <6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>

> From: Georg Mischler <schorsch at schorsch.com>
> Date: March 22, 2016 12:30:46 PM PDT
> ...
>> Thinking on it some more, the main issue I have with Python is
>> probably the object-oriented structure, which moves it even further
>> from a command-line interpreter.  For me, the main benefit of using a
>> scripting language is that it is close to the command-line, which is
>> where Radiance (mostly) lives.  If you introduce too much structure,
>> you're getting back to something resembling a C program, and you may
>> as well just write it that way, instead.
> 
> There are (at least) two different classes of "scripts" in Radiance.
> Some are indeed little more than a listing of a few commands, and
> in a few cases it looks like they were one-off solutions to a very
> specific problem. Most people will never use those, or they might
> create their own versions. It may or may not be worth to convert
> them, and in some cases the Python version may actually become a
> literal translation without any added structure.

OK, I suppose I would have to see an example of that, preferably something that wasn't organized around a class.  One of the things I have always disliked about C++ is how you have to dig around in the headers to figure out what the heck the code is doing.  Python at least keeps it together, but it's still a mess in the sense that the code layout has little to do with control flow.  It's an extra hurdle to understanding I could do without.

There's still the issue of all the supporting libraries, their many classes and associated methods. 

> The other class are programs like falsecolor or genBSDF, which are
> far beyond that "script" stage. Those are "real" programs in the sense
> that they solve tasks that most people will be confronted with
> regularly. This makes them unlikely to change very significantly over
> time, other than to add features. In those cases, the effort is
> clearly justified to design an object oriented structure and add all
> the bells and whistles most users expect from a complete tool.

Never mind that I just rewrote genBSDF almost from scratch last year when I introduced rfluxmtx and wrapBSDF with color support, which simplified the code substantially (and required numerous changes in structure).  I was hoping not to have to do that again, of course....

> You seem to think that object orientation will necessarily make a program
> inflexible. Well, for Java and C++, this is indeed usually the case.
> But it doesn't have to be like that. A well crafted object oriented
> design will make adding features easier, not harder. And Python is one
> of the rare languages, where changing the code is actually fun, and
> not something to be scared of.
> 
> This ease of maintenance is also one of the reasons why those things
> should rather *not* be converted to C. There's simply no need to do that,
> as long as we can delegate the number crunching to other tools.

Certain things are definitely easier in a scripting language, or they wouldn't be useful.  Being able to manipulate strings and build command lines are the most important facilities.  Having some ability to do math and store arrays are also valuable features.  Perl and Python are both superior to the C-shell in that respect, so I agree with you about the importance of having a decent language for more sophisticated tools.  However, I don't see how Python is less work than Perl given the examples I've seen.  Why not Ruby?  Why not any of the other myriad languages out there?  You have your favorite; I have none.  I simply went with something that was familiar and supported, and don't feel like changing canoes midstream as the expression goes.

>> Perl looks a lot like traditional interpreter shells with the added
>> benefit of more useful built-in commands and expression evaluation.
>> You can open a Perl script and read through it like you're reading a
>> sequence of commands.  User-defined functions have a bare-bones call
>> structure and don't have to be defined before they're used, so they
>> don't interrupt the flow as you read through the code.
> 
> If you look at Python, you'll find that all that is (or can be) the
> case there as well, just without the uglyness.

As I said, I would have to see a simple example.  Your rlux.py ended up being a bit more complex than its C-shell progenitor...  As for ugliness, I don't really see the differences you do.  I have employed languages like TCL, which I do consider write-only (to use Randoph's term), but Perl is OK for me.

>> Scripting languages need to be easy to write and easy to read to be
>> useful in my opinion.
> 
> But you're still full of praise for Perl...?

I do find Perl easy to read compared to Python, mostly because I don't have to jump around the class methods or read up on the add-on libraries.  There are plenty of functions in Perl, no doubt about that, but they aren't such a growing concern.

>> Also, relying heavily on add-on libraries comes at a cost, which is
>> expanded vocabulary one must learn.
> 
> Libraries coming included with the language are not "add-on".
> We won't get any bonus points for reinventing the wheel, or for
> dragging stuff around instead of wheeling it.

I'm not saying we need to reinvent the wheel every time, but we could do without so many wheels.  Perhaps it's just a matter of restraint and paring add-on libraries to a minimum.  I don't know.

>> We chain up to 4 commands in genBSDF, which I guess will translate to
>> call_four() in your library?
> 
> We're going to have a call_many() then, which will accept and chain an
> arbitrary number of commands. Win_popen() already does that.

OK, I guess that would work.

>>>> We'd still have to switch between data format (-f*)
>>>> command options on the two platforms, or suffer significant
>>>> performance penalties on Unix.
>>> Sorry, not sure what you're talking about there.
>> Well, we may need to devise some tests to be sure this is still a
>> problem, but in the past, Windows would deliver binary files in
>> 128-byte chunks, meaning that the last chunk might have garbage at the
>> end of it that was not actually produced by the program that sent it.
> 
> That sounds like a severely broken implementation. I can't possibly
> imagine this still to be the case. If there's a test case, I'll check
> it out.

I don't own a Windows box, so it's difficult for me to produce test cases.  I only hear complaints from people about certain commands not behaving with binary data on Windows, even when it doesn't go into an intermediate file.  In other words, piping the binary output of one command into another still screws up.  Does Windows create a temporary file when it does this?  Maybe if it's on a FAT filesystem (as Randolph mentioned), this is the source of the problem.  It would be nice to track this down.  Although I don't have a ready solution, it would be good to at least determine the parameters of the problem.  (Radiance's binary files are immune: octrees, HDR pictures, triangle meshes, even binary matrix data -- it's just the raw IEEE floats & doubles that usually mess up.)

Cheers,
-Greg

From rmfritz3 at gmail.com  Tue Mar 22 20:09:08 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Tue, 22 Mar 2016 20:09:08 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
Message-ID: <CANeAMoKBvcsUKFwCb-x9TJ5QeHS0VOgOZiKSbjXBFibsUOgX0Q@mail.gmail.com>

I don't think Perl is necessarily write-only, but it is easy to produce
write-only code in it.

"Although I don't have a ready solution, it would be good to at least
determine the parameters of the problem."

Does anyone have an example? When I get a bit more time, I could look into
it.


-- 
Randolph M. Fritz, Lighting Design and Simulation
+1 206 659-8617 || rmfritz3 at gmail.com

On Tue, Mar 22, 2016 at 4:04 PM, Gregory J. Ward <gregoryjward at gmail.com>
wrote:

> > From: Georg Mischler <schorsch at schorsch.com>
> > Date: March 22, 2016 12:30:46 PM PDT
> > ...
> >> Thinking on it some more, the main issue I have with Python is
> >> probably the object-oriented structure, which moves it even further
> >> from a command-line interpreter.  For me, the main benefit of using a
> >> scripting language is that it is close to the command-line, which is
> >> where Radiance (mostly) lives.  If you introduce too much structure,
> >> you're getting back to something resembling a C program, and you may
> >> as well just write it that way, instead.
> >
> > There are (at least) two different classes of "scripts" in Radiance.
> > Some are indeed little more than a listing of a few commands, and
> > in a few cases it looks like they were one-off solutions to a very
> > specific problem. Most people will never use those, or they might
> > create their own versions. It may or may not be worth to convert
> > them, and in some cases the Python version may actually become a
> > literal translation without any added structure.
>
> OK, I suppose I would have to see an example of that, preferably something
> that wasn't organized around a class.  One of the things I have always
> disliked about C++ is how you have to dig around in the headers to figure
> out what the heck the code is doing.  Python at least keeps it together,
> but it's still a mess in the sense that the code layout has little to do
> with control flow.  It's an extra hurdle to understanding I could do
> without.
>
> There's still the issue of all the supporting libraries, their many
> classes and associated methods.
>
> > The other class are programs like falsecolor or genBSDF, which are
> > far beyond that "script" stage. Those are "real" programs in the sense
> > that they solve tasks that most people will be confronted with
> > regularly. This makes them unlikely to change very significantly over
> > time, other than to add features. In those cases, the effort is
> > clearly justified to design an object oriented structure and add all
> > the bells and whistles most users expect from a complete tool.
>
> Never mind that I just rewrote genBSDF almost from scratch last year when
> I introduced rfluxmtx and wrapBSDF with color support, which simplified the
> code substantially (and required numerous changes in structure).  I was
> hoping not to have to do that again, of course....
>
> > You seem to think that object orientation will necessarily make a program
> > inflexible. Well, for Java and C++, this is indeed usually the case.
> > But it doesn't have to be like that. A well crafted object oriented
> > design will make adding features easier, not harder. And Python is one
> > of the rare languages, where changing the code is actually fun, and
> > not something to be scared of.
> >
> > This ease of maintenance is also one of the reasons why those things
> > should rather *not* be converted to C. There's simply no need to do that,
> > as long as we can delegate the number crunching to other tools.
>
> Certain things are definitely easier in a scripting language, or they
> wouldn't be useful.  Being able to manipulate strings and build command
> lines are the most important facilities.  Having some ability to do math
> and store arrays are also valuable features.  Perl and Python are both
> superior to the C-shell in that respect, so I agree with you about the
> importance of having a decent language for more sophisticated tools.
> However, I don't see how Python is less work than Perl given the examples
> I've seen.  Why not Ruby?  Why not any of the other myriad languages out
> there?  You have your favorite; I have none.  I simply went with something
> that was familiar and supported, and don't feel like changing canoes
> midstream as the expression goes.
>
> >> Perl looks a lot like traditional interpreter shells with the added
> >> benefit of more useful built-in commands and expression evaluation.
> >> You can open a Perl script and read through it like you're reading a
> >> sequence of commands.  User-defined functions have a bare-bones call
> >> structure and don't have to be defined before they're used, so they
> >> don't interrupt the flow as you read through the code.
> >
> > If you look at Python, you'll find that all that is (or can be) the
> > case there as well, just without the uglyness.
>
> As I said, I would have to see a simple example.  Your rlux.py ended up
> being a bit more complex than its C-shell progenitor...  As for ugliness, I
> don't really see the differences you do.  I have employed languages like
> TCL, which I do consider write-only (to use Randoph's term), but Perl is OK
> for me.
>
> >> Scripting languages need to be easy to write and easy to read to be
> >> useful in my opinion.
> >
> > But you're still full of praise for Perl...?
>
> I do find Perl easy to read compared to Python, mostly because I don't
> have to jump around the class methods or read up on the add-on libraries.
> There are plenty of functions in Perl, no doubt about that, but they aren't
> such a growing concern.
>
> >> Also, relying heavily on add-on libraries comes at a cost, which is
> >> expanded vocabulary one must learn.
> >
> > Libraries coming included with the language are not "add-on".
> > We won't get any bonus points for reinventing the wheel, or for
> > dragging stuff around instead of wheeling it.
>
> I'm not saying we need to reinvent the wheel every time, but we could do
> without so many wheels.  Perhaps it's just a matter of restraint and paring
> add-on libraries to a minimum.  I don't know.
>
> >> We chain up to 4 commands in genBSDF, which I guess will translate to
> >> call_four() in your library?
> >
> > We're going to have a call_many() then, which will accept and chain an
> > arbitrary number of commands. Win_popen() already does that.
>
> OK, I guess that would work.
>
> >>>> We'd still have to switch between data format (-f*)
> >>>> command options on the two platforms, or suffer significant
> >>>> performance penalties on Unix.
> >>> Sorry, not sure what you're talking about there.
> >> Well, we may need to devise some tests to be sure this is still a
> >> problem, but in the past, Windows would deliver binary files in
> >> 128-byte chunks, meaning that the last chunk might have garbage at the
> >> end of it that was not actually produced by the program that sent it.
> >
> > That sounds like a severely broken implementation. I can't possibly
> > imagine this still to be the case. If there's a test case, I'll check
> > it out.
>
> I don't own a Windows box, so it's difficult for me to produce test
> cases.  I only hear complaints from people about certain commands not
> behaving with binary data on Windows, even when it doesn't go into an
> intermediate file.  In other words, piping the binary output of one command
> into another still screws up.  Does Windows create a temporary file when it
> does this?  Maybe if it's on a FAT filesystem (as Randolph mentioned), this
> is the source of the problem.  It would be nice to track this down.
> Although I don't have a ready solution, it would be good to at least
> determine the parameters of the problem.  (Radiance's binary files are
> immune: octrees, HDR pictures, triangle meshes, even binary matrix data --
> it's just the raw IEEE floats & doubles that usually mess up.)
>
> Cheers,
> -Greg
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160322/a3522d45/attachment-0001.html>

From schorsch at schorsch.com  Wed Mar 23 23:28:06 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Thu, 24 Mar 2016 07:28:06 +0100
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
Message-ID: <9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>

>>  It may or may not be worth to convert
>> them, and in some cases the Python version may actually become a
>> literal translation without any added structure.
> 
> OK, I suppose I would have to see an example of that, preferably
> something that wasn't organized around a class.  One of the things I
> have always disliked about C++ is how you have to dig around in the
> headers to figure out what the heck the code is doing.  Python at
> least keeps it together, but it's still a mess in the sense that the
> code layout has little to do with control flow.  It's an extra hurdle
> to understanding I could do without.

This is the straight and complete Python translation of the original
rlux.csh (inheriting most of its usability and portability problems):


import os, sys
if len(sys.argv) < 2:
     print("Usage: $0 [rtrace args] octree")
os.system("rtrace -i+ -dv- -h- -x 1 %s | rcalc -e 
'$1=47.4*$1+120*$2+11.6*$3' -u" % ' '.join(sys.argv[1:]))


The boilerplate I added around that is simply there for user
friendlyness, and the use of direct process management for platform
independence. With any script as popular as rlux, we *should* add
those things.


> There's still the issue of all the supporting libraries, their many
> classes and associated methods.

I don't quite see why that is supposed to be a problem.

Actually, I think you've got this one exactly backwards.
Using modules from Python's standard library does not add
dependencies, it reduces them! Those modules are very well documented,
and anyone working with Python will be familiar with them.

I think this is a bit different with Perl, where many popular modules
come from third party sources, and may or may not be present in a
given installation.

You're not refusing to use something like <stdio.h> "because of its
many functions" either, are you?


>> This ease of maintenance is also one of the reasons why those things
>> should rather *not* be converted to C. There's simply no need to do 
>> that,
>> as long as we can delegate the number crunching to other tools.

> However, I don't see how Python is less work
> than Perl given the examples I've seen.  Why not Ruby?  Why not any of
> the other myriad languages out there?  You have your favorite; I have
> none.  I simply went with something that was familiar and supported,
> and don't feel like changing canoes midstream as the expression goes.

Some years ago I would have argued solely with Pythons practical
merits, and its "batteries included" approach bringing such a complete
and useful standard library. It used to be my "secret weapon", giving
me a significant productivity advantage.

Today, another added benefit is the large pool of people who know how
to work with it (probably larger than Perl and Ruby together).
Ruby has many similarities with Python (not sure about its library), but
in comparison it's still a niche language. Without Ruby-on-rails it 
might
still be largely unknown.


>   Your rlux.py ended
> up being a bit more complex than its C-shell progenitor...
> As for

That added "complexity" has little to do with the fact that it's
written in Python (apart from not really being very complex).


> ugliness, I don't really see the differences you do.  I have employed
> languages like TCL, which I do consider write-only (to use Randoph's
> term), but Perl is OK for me.

Very few people will be able to make that last claim. And if you
manage to avoid Perls many syntactical and semantical pitfalls, then
you are truly a rare exception. For most people, Perl is just an
accident waiting to happen.


> I do find Perl easy to read compared to Python, mostly because I don't
> have to jump around the class methods or read up on the add-on
> libraries.  There are plenty of functions in Perl, no doubt about
> that, but they aren't such a growing concern.

You're mixing up choice of language with choice of design method here.

Perl also offers object oriented possibilities nowadays, even if by
far not as simple and elegant. Those features just don't seem to be as
popular with the target audience.


> I don't own a Windows box, so it's difficult for me to produce test
> cases.  I only hear complaints from people about certain commands not
> behaving with binary data on Windows, even when it doesn't go into an
> intermediate file.  In other words, piping the binary output of one
> command into another still screws up.  Does Windows create a temporary
> file when it does this?  Maybe if it's on a FAT filesystem (as
> Randolph mentioned), this is the source of the problem.  It would be
> nice to track this down.  Although I don't have a ready solution, it
> would be good to at least determine the parameters of the problem.
> (Radiance's binary files are immune: octrees, HDR pictures, triangle
> meshes, even binary matrix data -- it's just the raw IEEE floats &
> doubles that usually mess up.)

I've searched for similar complaints online. In the few instances I've
found, it usually was because a terminating null byte wasn't written
to the receiving buffer for some reason. The purportedly received
garbage data was then simply the previous random contents of that
buffer. That may or may not be the cause here as well.

If there really was an inherent problem with using pipes on Windows,
then I'm sure I would have found a lot more information about it.

Cheers
-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Thu Mar 24 09:27:18 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Thu, 24 Mar 2016 09:27:18 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
	<9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
Message-ID: <CANeAMoJQjwkuDmUpPc7jzsJrH7=MNVz3=jkW+4+gDqmaYxix_g@mail.gmail.com>

But one without the usability and portability problems is noticeably more
complex. On the other hand, it fixes those problems, and the problem of
file names and directories containing spaces as well.

If there really was an inherent problem with using pipes on Windows,
> then I'm sure I would have found a lot more information about it.

I am not so sure. Windows documentation can be amazingly opaque, because
MS's technical writers are apparently forbidden from mentioning
limitations, and a casual search will get you scads of irrelevant results.
?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160324/6ba1e893/attachment.html>

From Robert.Guglielmetti at nrel.gov  Thu Mar 24 09:44:43 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Thu, 24 Mar 2016 16:44:43 +0000
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <CANeAMoJQjwkuDmUpPc7jzsJrH7=MNVz3=jkW+4+gDqmaYxix_g@mail.gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
	<9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
	<CANeAMoJQjwkuDmUpPc7jzsJrH7=MNVz3=jkW+4+gDqmaYxix_g@mail.gmail.com>
Message-ID: <D31973D9.23E3F%Robert.Guglielmetti@nrel.gov>

There absolutely was an issue here, on Windows, when attempting to apply the workflow documented in the 3-phase tutorial Andy wrote, updated with rfluxmtx. For the life of me I cannot recall the specific error, nor can I find my notes on this. But it was related to reading matrices that were output as floats. When using '-faa' (i.e. storing the matrices in ASCII) the problem went away. We punted on this and just standardized on ASCII i/o for all matrix operations, and it's now a real problem with real building models. Would much rather find a solution that allows us to use floats all the time rather than reimplementing an os sniffer to do floats in *nix and ASCII on Windows, for all kinds of reasons. That's about all I have to say on this at the moment but if I can find my notes on this I'll butt-in again.


On 3/24/16, 10:27 AM, "Randolph M. Fritz" <rmfritz3 at gmail.com<mailto:rmfritz3 at gmail.com>> wrote:

If there really was an inherent problem with using pipes on Windows,
then I'm sure I would have found a lot more information about it.
I am not so sure. Windows documentation can be amazingly opaque, because MS's technical writers are apparently forbidden from mentioning limitations, and a casual search will get you scads of irrelevant results.
?

From gregoryjward at gmail.com  Thu Mar 24 09:58:57 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Thu, 24 Mar 2016 09:58:57 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
	<9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
Message-ID: <CC0ACADC-D6A8-4612-84C2-F811FE0B3060@gmail.com>

Hi Schorsch,

Thanks for your responses.  More inline...

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Python scripts for Radiance
> Date: March 23, 2016 11:28:06 PM PDT
> 
>>> It may or may not be worth to convert
>>> them, and in some cases the Python version may actually become a
>>> literal translation without any added structure.
>> OK, I suppose I would have to see an example of that, preferably
>> something that wasn't organized around a class.  One of the things I
>> have always disliked about C++ is how you have to dig around in the
>> headers to figure out what the heck the code is doing.  Python at
>> least keeps it together, but it's still a mess in the sense that the
>> code layout has little to do with control flow.  It's an extra hurdle
>> to understanding I could do without.
> 
> This is the straight and complete Python translation of the original
> rlux.csh (inheriting most of its usability and portability problems):
> 
> 
> import os, sys
> if len(sys.argv) < 2:
>    print("Usage: $0 [rtrace args] octree")
> os.system("rtrace -i+ -dv- -h- -x 1 %s | rcalc -e '$1=47.4*$1+120*$2+11.6*$3' -u" % ' '.join(sys.argv[1:]))
> 
> 
> The boilerplate I added around that is simply there for user
> friendlyness, and the use of direct process management for platform
> independence. With any script as popular as rlux, we *should* add
> those things.

I wasn't aware that rlux was used by many people, as it only works with ximage and I never even bothered to write a man page for it.  I do prefer the simpler solution above to the boilerplate one...  (Perl lets us quote things in a way that doesn't introduce issues with spacey filenames.)  Does rlux even work under Windows?  I suppose it does, or you wouldn't bother.  Also, where does this program exit?  How does it return an error if it doesn't get at least two arguments?  Shouldn't there be a call to os.exit(1) after the print call?  Why isn't print() os.print() or sys.print()?  These things seem mysterious to me in the land of the "language that doesn't get in they way."  The mixture of straight function calls, method calls on class names, and calls on null objects like ''.doSomethingWithString() seems eccentric, or at the least, inconsistent.

>> There's still the issue of all the supporting libraries, their many
>> classes and associated methods.
> 
> I don't quite see why that is supposed to be a problem.
> 
> Actually, I think you've got this one exactly backwards.
> Using modules from Python's standard library does not add
> dependencies, it reduces them! Those modules are very well documented,
> and anyone working with Python will be familiar with them.
> 
> I think this is a bit different with Perl, where many popular modules
> come from third party sources, and may or may not be present in a
> given installation.
> 
> You're not refusing to use something like <stdio.h> "because of its
> many functions" either, are you?

My main concern is just the add-on nature of the libraries, and that there can be too many to choose from.  Having basic facilities that everyone uses establishes conventions that make it easier to read other people's code.  So long as everyone chooses the same library to make the same calls, and those calls don't change with new versions of the libraries or of Python, then I don't have a problem with it.  It's not that I distrust libraries per se, just "extensionitis."  Seeing things like:

import os
import sys
import math
import tempfile
import argparse
import subprocess

at the top of a module is a bit scary -- it means I need to be familiar with these classes to understand the code.  It's just more work.  I prefer to avoid unnecessary work.  After all, I was choosing scripting over writing a C program to make my life simpler, not more fabulously complex.  Scripting is also something I do less frequently than writing in C and C++, so I'm not getting keeping my memory as fresh.

>> ... I don't see how Python is less work
>> than Perl given the examples I've seen.  Why not Ruby?  Why not any of
>> the other myriad languages out there?  You have your favorite; I have
>> none.  I simply went with something that was familiar and supported,
>> and don't feel like changing canoes midstream as the expression goes.
> 
> Some years ago I would have argued solely with Pythons practical
> merits, and its "batteries included" approach bringing such a complete
> and useful standard library. It used to be my "secret weapon", giving
> me a significant productivity advantage.
> 
> Today, another added benefit is the large pool of people who know how
> to work with it (probably larger than Perl and Ruby together).
> Ruby has many similarities with Python (not sure about its library), but
> in comparison it's still a niche language. Without Ruby-on-rails it might
> still be largely unknown.

OK, well I haven't kept up with language popularity, and I have no idea who is working with what, how often, or what the poll numbers say.  Again, I don't do scripting all that much, so the main issue for me is maintainability of rarely looked-at code.  If others are contributing scripts, then I would like to be able to read and understand them.  The closer a script is to a list of commands, the easier my job is.

>>  Your rlux.py ended
>> up being a bit more complex than its C-shell progenitor...
>> As for
> 
> That added "complexity" has little to do with the fact that it's
> written in Python (apart from not really being very complex).
> 
>> ugliness, I don't really see the differences you do.  I have employed
>> languages like TCL, which I do consider write-only (to use Randoph's
>> term), but Perl is OK for me.
> 
> Very few people will be able to make that last claim. And if you
> manage to avoid Perls many syntactical and semantical pitfalls, then
> you are truly a rare exception. For most people, Perl is just an
> accident waiting to happen.

While it's true there are too many ways to write the same expression in Perl, I don't find it difficult to write correct code, or read the code I've written.  I admit I haven't spent much time going through other people's Perl code, so I can't speak with much authority on language abuses.  Axel Jacobs' Perl code is quite easy to follow.

>> I do find Perl easy to read compared to Python, mostly because I don't
>> have to jump around the class methods or read up on the add-on
>> libraries.  There are plenty of functions in Perl, no doubt about
>> that, but they aren't such a growing concern.
> 
> You're mixing up choice of language with choice of design method here.
> 
> Perl also offers object oriented possibilities nowadays, even if by
> far not as simple and elegant. Those features just don't seem to be as
> popular with the target audience.

I suppose it's what you're used to.  As I said earlier, the issue with libraries is mostly about vocabulary and what you need to know that isn't right before you.  To me, writing a class to do something that should be straightforward doesn't make sense.  I might even argue that writing a class where you only expect to create a single object in that class also doesn't make sense, unless you plan to share the class with other classes or modules.

>> I don't own a Windows box, so it's difficult for me to produce test
>> cases.  I only hear complaints from people about certain commands not
>> behaving with binary data on Windows, even when it doesn't go into an
>> intermediate file.  In other words, piping the binary output of one
>> command into another still screws up.  Does Windows create a temporary
>> file when it does this?  Maybe if it's on a FAT filesystem (as
>> Randolph mentioned), this is the source of the problem.  It would be
>> nice to track this down.  Although I don't have a ready solution, it
>> would be good to at least determine the parameters of the problem.
>> (Radiance's binary files are immune: octrees, HDR pictures, triangle
>> meshes, even binary matrix data -- it's just the raw IEEE floats &
>> doubles that usually mess up.)
> 
> I've searched for similar complaints online. In the few instances I've
> found, it usually was because a terminating null byte wasn't written
> to the receiving buffer for some reason. The purportedly received
> garbage data was then simply the previous random contents of that
> buffer. That may or may not be the cause here as well.
> 
> If there really was an inherent problem with using pipes on Windows,
> then I'm sure I would have found a lot more information about it.

Well, in our case, it's not about null bytes not being sent -- it's about knowing exactly when we've reached end-of-data, which we expect the system to tell us in some cases.  Radiance's binary formats for octrees, ambient files, pictures, etc., we know when we've reached EOD regardless because the file header tells us how much to expect.  However, when we're sending binary streams of floats to rcalc, which is simply operating on them and counting on the OS to stop sending data when it's out of data, we run into trouble if the OS doesn't tell us exactly when the party is over.

I suppose a simple test would be something like:

	cnt 37 | rcalc -of -e '$1=recno' | total -if

This should give us a value of 703, or n*(n+1)/2 for any n (i.e., 37*(37+1)/2==703).  We could try running the above on a Windows box with a FAT or ExFAT filesystem to determine if this is a problem or not.  We should probably try it with some large numbers as well, being aware that we end on a 128-byte boundary when n is a multiple of 32.

We can also try it while writing with an intermediate file between rcalc and total, to see if that makes any difference.

Cheers,
-Greg



From Robert.Guglielmetti at nrel.gov  Thu Mar 24 09:59:17 2016
From: Robert.Guglielmetti at nrel.gov (Guglielmetti, Robert)
Date: Thu, 24 Mar 2016 16:59:17 +0000
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
	<9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
Message-ID: <D31975A6.23E4F%Robert.Guglielmetti@nrel.gov>

File under "my $0.02":

On 3/24/16, 12:28 AM, "Georg Mischler" <schorsch at schorsch.com> wrote:
>
>Today, another added benefit is the large pool of people who know how
>to work with it (probably larger than Perl and Ruby together).
>Ruby has many similarities with Python (not sure about its library), but
>in comparison it's still a niche language. Without Ruby-on-rails it
>Might still be largely unknown.


Agreed. The OpenStudio team is on Ruby because the whole project started
as a SketchUp plugin, and SketchUp's API is Ruby. I found it very easy to
slide over to Ruby from Python (and now prefer it), and Ruby's library
support is quite good. I agree it's less well-known, but *because* of
Rails it is indeed far from unknown. Be that as it may, I'm willing to bet
big money that this Radiance community has more Python expertise than it
does any other scripting-type language. Python also has a gem of a data
visualization library in 'matplotlib'. 



From gregoryjward at gmail.com  Thu Mar 24 10:10:19 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Thu, 24 Mar 2016 10:10:19 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <D31973D9.23E3F%Robert.Guglielmetti@nrel.gov>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
	<9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
	<CANeAMoJQjwkuDmUpPc7jzsJrH7=MNVz3=jkW+4+gDqmaYxix_g@mail.gmail.com>
	<D31973D9.23E3F%Robert.Guglielmetti@nrel.gov>
Message-ID: <55DFAFA3-5384-413B-A8EF-5A9528ACCA95@gmail.com>

Hi Rob,

We should definitely try this again -- as I said, binary matrix files shouldn't be a problem anymore, so long as it has a header with the number of rows and columns in it, so the receiving program knows when to stop reading in data.  You will still have issues with tools like rcalc working on header-less input, so those are the places to look out for in the workflow.  In some cases, we may be able to reformulate things to use rmtxop or add an option to rcalc for number of i/o records.

-Greg

> From: "Guglielmetti, Robert" <Robert.Guglielmetti at nrel.gov>
> Subject: Re: [Radiance-dev] Python scripts for Radiance
> Date: March 24, 2016 9:44:43 AM PDT
> 
> There absolutely was an issue here, on Windows, when attempting to apply the workflow documented in the 3-phase tutorial Andy wrote, updated with rfluxmtx. For the life of me I cannot recall the specific error, nor can I find my notes on this. But it was related to reading matrices that were output as floats. When using '-faa' (i.e. storing the matrices in ASCII) the problem went away. We punted on this and just standardized on ASCII i/o for all matrix operations, and it's now a real problem with real building models. Would much rather find a solution that allows us to use floats all the time rather than reimplementing an os sniffer to do floats in *nix and ASCII on Windows, for all kinds of reasons. That's about all I have to say on this at the moment but if I can find my notes on this I'll butt-in again.
> 
> 
> On 3/24/16, 10:27 AM, "Randolph M. Fritz" <rmfritz3 at gmail.com<mailto:rmfritz3 at gmail.com>> wrote:
> 
> If there really was an inherent problem with using pipes on Windows,
> then I'm sure I would have found a lot more information about it.
> I am not so sure. Windows documentation can be amazingly opaque, because MS's technical writers are apparently forbidden from mentioning limitations, and a casual search will get you scads of irrelevant results.


From rmfritz3 at gmail.com  Thu Mar 24 11:44:57 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Thu, 24 Mar 2016 11:44:57 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <55DFAFA3-5384-413B-A8EF-5A9528ACCA95@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
	<9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
	<CANeAMoJQjwkuDmUpPc7jzsJrH7=MNVz3=jkW+4+gDqmaYxix_g@mail.gmail.com>
	<D31973D9.23E3F%Robert.Guglielmetti@nrel.gov>
	<55DFAFA3-5384-413B-A8EF-5A9528ACCA95@gmail.com>
Message-ID: <CANeAMo+H7Ejo4eXphoiGZsn8o=n6ZqNpJWnfW57aoxZH8L4wBA@mail.gmail.com>

My impression is that Python has become something of a standard in the
research community, with tools like SciPy, NumPy, and SAGE widely used,
though Perl has a library comparable to NumPy in PDL, and there is a
SciRuby, There is nothing else like SAGE except for the commercial packages
Mathematica and MATLAB. There is also the granddaddy of them all, LISP, but
I don't want to press that on our community; it is intimidating, however
useful once one learns it.

On the statistical side there is R and (wince) Excel.

What do people think? Who is using what?

Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160324/ff666af4/attachment.html>

From rmfritz3 at gmail.com  Thu Mar 24 12:02:49 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Thu, 24 Mar 2016 12:02:49 -0700
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <CC0ACADC-D6A8-4612-84C2-F811FE0B3060@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
	<9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
	<CC0ACADC-D6A8-4612-84C2-F811FE0B3060@gmail.com>
Message-ID: <CANeAMo+r_jhAMiJb6ZOMEiWbg8W1TrGgDv5rsaqtkyYB41MGJw@mail.gmail.com>

import os
import sys
import math
import tempfile
import argparse
import subprocess

?On Unix, os, sys, and math are mostly wrappers around libraries familiar
to you; on Windows, they are often very close in functionality. I don't
expect they would be much trouble to your. Tempfile is a little bit more
confusing (it is loaded down with security "features," which are mostly
irrelevant in our work), and argparse and subprocess do require study.

This is, to some extent, the old decision as to use libraries or roll your
own code. The standard advice is to use libraries for the sake of
maintenance, since they are already debugged and documented, but libraries
can sometimes load you down with complexities unnecessary to your work.
Overuse of libraries can weigh your programs down; one can, for instance,
end up with XML formats when simple text files will do.

I am forming some thoughts on the broader issues, but I will wait for them
to gel before posting them, I think.

Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160324/5ce6bf07/attachment.html>

From schorsch at schorsch.com  Fri Mar 25 06:24:30 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 25 Mar 2016 14:24:30 +0100
Subject: [Radiance-dev] Python scripts for Radiance
In-Reply-To: <CC0ACADC-D6A8-4612-84C2-F811FE0B3060@gmail.com>
References: <989bfc6028f1e25b0ac1f17a7c65139d@tanha.pair.com>
	<99E510E0-EA5A-400C-B52F-B6ECD9C2A249@gmail.com>
	<322e95b483431566b86e73c327a52e72@tanha.pair.com>
	<97454963-1BDD-4D82-9D44-8FEAE67F7934@gmail.com>
	<be46f49649ffd85281ea06cb0d384d6e@tanha.pair.com>
	<7C27F318-CEBB-4E66-9D60-3CC77710DD47@gmail.com>
	<7b8d533fd4d019c19a3634bfb4db3dd1@tanha.pair.com>
	<F08BDDC3-56F4-4B9B-B21B-96F93134F7F2@gmail.com>
	<6291434a20178429225e7067dffdb54e@tanha.pair.com>
	<C687DD12-11E1-4D11-A821-81CD33646AF9@gmail.com>
	<41e4897753ab844fbd9c92ff5ebc0f47@tanha.pair.com>
	<6E8C96B4-02B8-4CC5-84EA-F3256992AA1E@gmail.com>
	<9e9ae1bca529b174567ee03a53c74675@tanha.pair.com>
	<CC0ACADC-D6A8-4612-84C2-F811FE0B3060@gmail.com>
Message-ID: <b859ede0635edd24296166bd131e9c85@tanha.pair.com>

Am 2016-03-24 17:58, schrieb Gregory J. Ward:
>   Does rlux even work under Windows?  I suppose it
> does, or you wouldn't bother.  Also, where does this program exit?
> How does it return an error if it doesn't get at least two arguments?
> Shouldn't there be a call to os.exit(1) after the print call?  Why
> isn't print() os.print() or sys.print()?  These things seem mysterious
> to me in the land of the "language that doesn't get in they way."  The
> mixture of straight function calls, method calls on class names, and
> calls on null objects like ''.doSomethingWithString() seems eccentric,
> or at the least, inconsistent.

The "big" version of rlux.py runs on *any* platform supporting both
Radiance and Python. The "small" one would require some fiddling with
quotes to run on Windows, as long as there are no spaces involved.

Python programs can exit in three different ways (quite similar to
Perl, I think):
  By running off the bottom without error (exit value 0)
  By the builtin function exit(n)/quit(n) (with the given exit value)
  Via an uncaught exception (exit value 1)
That just reminds me that I probably should exit with a no-zero value
at the very bottom when catching the "Error" exception.

And a closely related bug you correctly detected in my quick-and-dirty
translation: Next to printing the usage message, it should indeed
exit() with a non-zero value as well.

One of the purposes of modules is to unclutter the local namespace.
However, there's still a number of very frequently used objects and
functions directly accessible from any context. Those include
   the system exceptions
   the type objects (which also serve as conversion functions)
   other type conversion functions that aren't types themselfes
   quit() and exit() (really the same thing)
   print()
   a smallish number of other very elementary functions
Part of that selection is necessarily arbitrary (design choice), and
has been reduced quite a bit over the evolution of the language.
The print function is global because it is probably one of the most
used functions of all. In earlyer versions of Python it actually used
to be a language keyword instead of a function.

Something like ''.split() or ''.join() is absolutely consistent with
the general object model, and handled pretty much the same in all
object oriented languages. It would rather be excentric to still
treat a string as an "array of char" in this context.

The use of qualified names for functions and methods serves to keep
namespaces seperate, in oder to avoid confusion. I understand that it
may not be obvious to you right now whether you see a function call in
a module, or a method call in an object instance (I don't think I'm
using any class methods in my code). But that will become clearer each
time you look at it.


> My main concern is just the add-on nature of the libraries, and that
> there can be too many to choose from.  Having basic facilities that
> everyone uses establishes conventions that make it easier to read
> other people's code.  So long as everyone chooses the same library to
> make the same calls, and those calls don't change with new versions of
> the libraries or of Python, then I don't have a problem with it.  It's
> not that I distrust libraries per se, just "extensionitis."  Seeing
> things like:
> 
> import os
> import sys
> import math
> import tempfile
> import argparse
> import subprocess
> 
> at the top of a module is a bit scary -- it means I need to be
> familiar with these classes to understand the code.  It's just more
> work.  I prefer to avoid unnecessary work.

That block may look impressive (I could have written it on one line,
and you might have hardly noticed it). But the actual modules are
very common and rather obvious.


The documentation describes the most often used two modules as:
   os - Miscellaneous operating system interfaces
   sys - System-specific parameters and functions

You need "math" as soon as you want to do calculations beyond the basic
operators and min()/max().

"Tempfile" knows where the standard temp directories on every platforma
are, and helps to prevent tampering. I know that the latter is not
really critical for Radiance, but it's just good programming practise.

"Argparse" has an obvious name. Don't get fooled by the visually massive
appearance of the related code blocks, that is only because they
include all the text strings for the usage help output.

The "subprocess" module may be the least trivial of the lot, but it
simplifies things by encapsulating platform differences. And I've
again encapsulated its use in pyradlib/pyrad_proc. In the actual
scripts, we only need it for the constant subprocess.PIPE.
We could actually offer that for import through pyrad_proc, to make
it more obvious what it's used for.


Those are all very good questions that show your increasig grasp of
Python. All hope is not lost... ;)
An outside view is also quite helpful in finding the bugs hiding in
some of my own blind spots.


>> Perl also offers object oriented possibilities nowadays, even if by
>> far not as simple and elegant. Those features just don't seem to be as
>> popular with the target audience.
> 
> I suppose it's what you're used to.  As I said earlier, the issue with
> libraries is mostly about vocabulary and what you need to know that
> isn't right before you.  To me, writing a class to do something that
> should be straightforward doesn't make sense.  I might even argue that
> writing a class where you only expect to create a single object in
> that class also doesn't make sense, unless you plan to share the class
> with other classes or modules.

People have built whole life philosophies around that question...
In my case, after working with object oriented methods for so many
years, it has just become second nature to start with a class.
Experience shows that as things grow, they tend to turn into a class
anyway, so I'm usually saving on one of the refactoring stages.

When converting those scripts, I chose to use the same pattern for all
of them for consistency. I was fully aware that I was adding around 90%
of boilerplate to rlux.py, hence the comment at the top of the file.

But we also need to keep in mind, that when we start distributing
those things as exe files on Windows, those users may not want to go
to look up the sources on radiance-online just to see how the script
is invoked correctly. So the script itself really needs to give them
good diagnostics and usage instructions. And in the extreme case of
around three lines of actual functionality, that will lead to this
seemingly absurd ratio of content to packaging.

Btw.: That doesn't mean that the original csh scripts need to go away!
They may serve as a reference implementation verified by you, that we
can use to compare the translations against. As long as you haven't
familiarized yourself with Python enough to check the more complex
examples directly, they can happily live next to each other.


Cheers
-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Fri Mar 25 07:35:11 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 25 Mar 2016 15:35:11 +0100
Subject: [Radiance-dev] Pipe problems on Windows
Message-ID: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>

Moving this to a seperate thread.


The sequence below consistently gives me 703 on Vista, with the only
difference that the DOS box asks for double quotes.

But...

turning up n to values beyond 2000, the MSC binary of rcalc begins to
write(!) some bytes less(!) to stdout. Which obviously falsifies the
result of the chain.

Interesingly, the NREL binary doesn't do that.
Rob mentioned using gcc, so there seems to be a disagreement between
the two compilers as to the semantics of writing to stdout on program
termination.

Going to have some discussion with the debugger on this one.
I'd only be too happy if a simple flush() would solve the problem...

Ah, and first I should probably create a few test cases to cover this
kind of bug.


Cheers
-schorsch


>> I've searched for similar complaints online. In the few instances I've
>> found, it usually was because a terminating null byte wasn't written
>> to the receiving buffer for some reason. The purportedly received
>> garbage data was then simply the previous random contents of that
>> buffer. That may or may not be the cause here as well.
>> 
>> If there really was an inherent problem with using pipes on Windows,
>> then I'm sure I would have found a lot more information about it.
> 
> Well, in our case, it's not about null bytes not being sent -- it's
> about knowing exactly when we've reached end-of-data, which we expect
> the system to tell us in some cases.  Radiance's binary formats for
> octrees, ambient files, pictures, etc., we know when we've reached EOD
> regardless because the file header tells us how much to expect.
> However, when we're sending binary streams of floats to rcalc, which
> is simply operating on them and counting on the OS to stop sending
> data when it's out of data, we run into trouble if the OS doesn't tell
> us exactly when the party is over.
> 
> I suppose a simple test would be something like:
> 
> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
> 
> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
> 37*(37+1)/2==703).  We could try running the above on a Windows box
> with a FAT or ExFAT filesystem to determine if this is a problem or
> not.  We should probably try it with some large numbers as well, being
> aware that we end on a 128-byte boundary when n is a multiple of 32.
> 
> We can also try it while writing with an intermediate file between
> rcalc and total, to see if that makes any difference.

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Fri Mar 25 09:01:19 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Fri, 25 Mar 2016 09:01:19 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
Message-ID: <F2BD3535-68DC-4FE0-AA60-B35204541D71@gmail.com>

Well, rcalc.c calls exit(0) when finished, which is supposed to flush all the output streams.  Does it under MSC?

What do you get when you send the output of rcalc to a (binary) file with n>2000 -- is the byte count wrong, then?

Thanks for having a look at this!
-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: [Radiance-dev] Pipe problems on Windows
> Date: March 25, 2016 7:35:11 AM PDT
> 
> Moving this to a seperate thread.
> 
> 
> The sequence below consistently gives me 703 on Vista, with the only
> difference that the DOS box asks for double quotes.
> 
> But...
> 
> turning up n to values beyond 2000, the MSC binary of rcalc begins to
> write(!) some bytes less(!) to stdout. Which obviously falsifies the
> result of the chain.
> 
> Interesingly, the NREL binary doesn't do that.
> Rob mentioned using gcc, so there seems to be a disagreement between
> the two compilers as to the semantics of writing to stdout on program
> termination.
> 
> Going to have some discussion with the debugger on this one.
> I'd only be too happy if a simple flush() would solve the problem...
> 
> Ah, and first I should probably create a few test cases to cover this
> kind of bug.
> 
> 
> Cheers
> -schorsch
> 
> 
>>> I've searched for similar complaints online. In the few instances I've
>>> found, it usually was because a terminating null byte wasn't written
>>> to the receiving buffer for some reason. The purportedly received
>>> garbage data was then simply the previous random contents of that
>>> buffer. That may or may not be the cause here as well.
>>> If there really was an inherent problem with using pipes on Windows,
>>> then I'm sure I would have found a lot more information about it.
>> Well, in our case, it's not about null bytes not being sent -- it's
>> about knowing exactly when we've reached end-of-data, which we expect
>> the system to tell us in some cases.  Radiance's binary formats for
>> octrees, ambient files, pictures, etc., we know when we've reached EOD
>> regardless because the file header tells us how much to expect.
>> However, when we're sending binary streams of floats to rcalc, which
>> is simply operating on them and counting on the OS to stop sending
>> data when it's out of data, we run into trouble if the OS doesn't tell
>> us exactly when the party is over.
>> I suppose a simple test would be something like:
>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>> 37*(37+1)/2==703).  We could try running the above on a Windows box
>> with a FAT or ExFAT filesystem to determine if this is a problem or
>> not.  We should probably try it with some large numbers as well, being
>> aware that we end on a 128-byte boundary when n is a multiple of 32.
>> We can also try it while writing with an intermediate file between
>> rcalc and total, to see if that makes any difference.
> 


From rmfritz3 at gmail.com  Fri Mar 25 10:51:11 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Fri, 25 Mar 2016 10:51:11 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <F2BD3535-68DC-4FE0-AA60-B35204541D71@gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<F2BD3535-68DC-4FE0-AA60-B35204541D71@gmail.com>
Message-ID: <CANeAMoJGFg8UBCaByLXtwcA-3hVR6XYSPFcm9S=tzgReg5EfNw@mail.gmail.com>

>
> rcalc.c calls exit(0) when finished, which is supposed to flush all the
> output streams.
>

Harbison and Steele's *C: A Reference Manual* agrees, and so does the MS
documentation.

WtF?

I suppose it is possible this is some subtle pointer bug. :-(
?
Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160325/b72c2f4f/attachment-0001.html>

From rmfritz3 at gmail.com  Fri Mar 25 10:55:04 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Fri, 25 Mar 2016 10:55:04 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <CANeAMoJGFg8UBCaByLXtwcA-3hVR6XYSPFcm9S=tzgReg5EfNw@mail.gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<F2BD3535-68DC-4FE0-AA60-B35204541D71@gmail.com>
	<CANeAMoJGFg8UBCaByLXtwcA-3hVR6XYSPFcm9S=tzgReg5EfNw@mail.gmail.com>
Message-ID: <CANeAMoJWPQLARwQeBopnAA1maOFYJk3o2ZfyLY5H9y5ns8EGoQ@mail.gmail.com>

I suppose we could run rcalc under valgrind and start looking for memory
problems. :-(

Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160325/947f4874/attachment.html>

From gregoryjward at gmail.com  Fri Mar 25 11:10:26 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Fri, 25 Mar 2016 11:10:26 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <CANeAMoJWPQLARwQeBopnAA1maOFYJk3o2ZfyLY5H9y5ns8EGoQ@mail.gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<F2BD3535-68DC-4FE0-AA60-B35204541D71@gmail.com>
	<CANeAMoJGFg8UBCaByLXtwcA-3hVR6XYSPFcm9S=tzgReg5EfNw@mail.gmail.com>
	<CANeAMoJWPQLARwQeBopnAA1maOFYJk3o2ZfyLY5H9y5ns8EGoQ@mail.gmail.com>
Message-ID: <AF1C6305-7964-473E-8F64-32B2C1D95B1D@gmail.com>

I would be surprised if this ended up being a memory issue.  I don't think rcalc allocates memory, unless the stack counts.

-Greg

> From: "Randolph M. Fritz" <rmfritz3 at gmail.com>
> Subject: Re: [Radiance-dev] Pipe problems on Windows
> 
> I suppose we could run rcalc under valgrind and start looking for memory problems. :-(
> 
> Randolph

++++++++++++++
> From: "Randolph M. Fritz" <rmfritz3 at gmail.com>
> Date: March 25, 2016 10:51:11 AM PDT
> 
> rcalc.c calls exit(0) when finished, which is supposed to flush all the output streams.
> 
> Harbison and Steele's *C: A Reference Manual* agrees, and so does the MS documentation.
> 
> WtF?
> 
> I suppose it is possible this is some subtle pointer bug. :-(
> ?
> Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160325/6efe987d/attachment.html>

From rmfritz3 at gmail.com  Fri Mar 25 11:27:15 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Fri, 25 Mar 2016 11:27:15 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <AF1C6305-7964-473E-8F64-32B2C1D95B1D@gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<F2BD3535-68DC-4FE0-AA60-B35204541D71@gmail.com>
	<CANeAMoJGFg8UBCaByLXtwcA-3hVR6XYSPFcm9S=tzgReg5EfNw@mail.gmail.com>
	<CANeAMoJWPQLARwQeBopnAA1maOFYJk3o2ZfyLY5H9y5ns8EGoQ@mail.gmail.com>
	<AF1C6305-7964-473E-8F64-32B2C1D95B1D@gmail.com>
Message-ID: <CANeAMoLApTh02VwUfac0y=v=kn3b5o_6MKN2xMnkQKUi+jsQ_Q@mail.gmail.com>

I'm shooting in the dark, but it's exactly what we would expect from a
memory error. I suppose it might also be a subtle data typing error, or an
error in the write calls. Can anyone think of anything else?

Schorsch, which version of MSVC are you using?

Randolph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160325/8a01d17b/attachment.html>

From schorsch at schorsch.com  Fri Mar 25 12:19:21 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 25 Mar 2016 20:19:21 +0100
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
Message-ID: <0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>

Am 2016-03-25 15:35, schrieb Georg Mischler:
> Moving this to a seperate thread.
> 
> 
> The sequence below consistently gives me 703 on Vista, with the only
> difference that the DOS box asks for double quotes.
> 
> But...
> 
> turning up n to values beyond 2000, the MSC binary of rcalc begins to
> write(!) some bytes less(!) to stdout. Which obviously falsifies the
> result of the chain.
> 
> Interesingly, the NREL binary doesn't do that.
> Rob mentioned using gcc, so there seems to be a disagreement between
> the two compilers as to the semantics of writing to stdout on program
> termination.
> 
> Going to have some discussion with the debugger on this one.
> I'd only be too happy if a simple flush() would solve the problem...
> 
> Ah, and first I should probably create a few test cases to cover this
> kind of bug.
> 
> 
round two:

I've detected the problem by redirecting the output of rcalc
into a file, which ends up too small.
It always happens when running in bash.
It currently gives the correct output about one time out of
four running in cmd.exe.
When reading from a file instead of through a pipe from cnt,
the output is always correct.
Adding a fflush() doesn't change anyhting, as mentioned the
exit() will do that anyway.
There's no problem when feeding the same data through
call_one() from pyradlib.
Passing in the output of cnt through call_two() currently runs
into a deadlock that I can't quite explain.

It's getting more and more mysterious...

-schorsch


> Cheers
> -schorsch
> 
> 
>>> I've searched for similar complaints online. In the few instances 
>>> I've
>>> found, it usually was because a terminating null byte wasn't written
>>> to the receiving buffer for some reason. The purportedly received
>>> garbage data was then simply the previous random contents of that
>>> buffer. That may or may not be the cause here as well.
>>> 
>>> If there really was an inherent problem with using pipes on Windows,
>>> then I'm sure I would have found a lot more information about it.
>> 
>> Well, in our case, it's not about null bytes not being sent -- it's
>> about knowing exactly when we've reached end-of-data, which we expect
>> the system to tell us in some cases.  Radiance's binary formats for
>> octrees, ambient files, pictures, etc., we know when we've reached EOD
>> regardless because the file header tells us how much to expect.
>> However, when we're sending binary streams of floats to rcalc, which
>> is simply operating on them and counting on the OS to stop sending
>> data when it's out of data, we run into trouble if the OS doesn't tell
>> us exactly when the party is over.
>> 
>> I suppose a simple test would be something like:
>> 
>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>> 
>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>> 37*(37+1)/2==703).  We could try running the above on a Windows box
>> with a FAT or ExFAT filesystem to determine if this is a problem or
>> not.  We should probably try it with some large numbers as well, being
>> aware that we end on a 128-byte boundary when n is a multiple of 32.
>> 
>> We can also try it while writing with an intermediate file between
>> rcalc and total, to see if that makes any difference.

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Fri Mar 25 12:22:42 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 25 Mar 2016 20:22:42 +0100
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <CANeAMoLApTh02VwUfac0y=v=kn3b5o_6MKN2xMnkQKUi+jsQ_Q@mail.gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<F2BD3535-68DC-4FE0-AA60-B35204541D71@gmail.com>
	<CANeAMoJGFg8UBCaByLXtwcA-3hVR6XYSPFcm9S=tzgReg5EfNw@mail.gmail.com>
	<CANeAMoJWPQLARwQeBopnAA1maOFYJk3o2ZfyLY5H9y5ns8EGoQ@mail.gmail.com>
	<AF1C6305-7964-473E-8F64-32B2C1D95B1D@gmail.com>
	<CANeAMoLApTh02VwUfac0y=v=kn3b5o_6MKN2xMnkQKUi+jsQ_Q@mail.gmail.com>
Message-ID: <db521f37df844392b19e4ef0eef36a7e@tanha.pair.com>

Am 2016-03-25 19:27, schrieb Randolph M. Fritz:
> I'm shooting in the dark, but it's exactly what we would expect from a
> memory error. I suppose it might also be a subtle data typing error,
> or an error in the write calls. Can anyone think of anything else?
> 
> Schorsch, which version of MSVC are you using?

The most recent one. Visual Studio 2015 Community edition.

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Fri Mar 25 15:13:17 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Fri, 25 Mar 2016 23:13:17 +0100
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
Message-ID: <bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>

Sorry for the weird sequence in here...

Deadlock issue resolved.
Now the testing with call_two() also results in the output
of rcalc being cut short by one or several values.

The problem starts at n=1330, where one value is lost.
Starting with n=4833, the last two values get missing.
Starting with n=9876, the last three values are dropped.
At least approximately. Sometimes it's a value less or more.
Any logic to those numbers? I have no idea.

By the way, the effect is independent of the output format.
This also happens with ASCII output.
Somehow I get the impression, this might be a different problem
than we were originally looking for, and I'm not sure yet if
cnt or rcalc are to blame.

-schorsch


Am 2016-03-25 20:19, schrieb Georg Mischler:
> Am 2016-03-25 15:35, schrieb Georg Mischler:
>> Moving this to a seperate thread.
>> 
>> 
>> The sequence below consistently gives me 703 on Vista, with the only
>> difference that the DOS box asks for double quotes.
>> 
>> But...
>> 
>> turning up n to values beyond 2000, the MSC binary of rcalc begins to
>> write(!) some bytes less(!) to stdout. Which obviously falsifies the
>> result of the chain.
>> 
>> Interesingly, the NREL binary doesn't do that.
>> Rob mentioned using gcc, so there seems to be a disagreement between
>> the two compilers as to the semantics of writing to stdout on program
>> termination.
>> 
>> Going to have some discussion with the debugger on this one.
>> I'd only be too happy if a simple flush() would solve the problem...
>> 
>> Ah, and first I should probably create a few test cases to cover this
>> kind of bug.
>> 
>> 
> round two:
> 
> I've detected the problem by redirecting the output of rcalc
> into a file, which ends up too small.
> It always happens when running in bash.
> It currently gives the correct output about one time out of
> four running in cmd.exe.
> When reading from a file instead of through a pipe from cnt,
> the output is always correct.
> Adding a fflush() doesn't change anyhting, as mentioned the
> exit() will do that anyway.
> There's no problem when feeding the same data through
> call_one() from pyradlib.
> Passing in the output of cnt through call_two() currently runs
> into a deadlock that I can't quite explain.
> 
> It's getting more and more mysterious...
> 
> -schorsch
> 
> 
>> Cheers
>> -schorsch
>> 
>> 
>>>> I've searched for similar complaints online. In the few instances 
>>>> I've
>>>> found, it usually was because a terminating null byte wasn't written
>>>> to the receiving buffer for some reason. The purportedly received
>>>> garbage data was then simply the previous random contents of that
>>>> buffer. That may or may not be the cause here as well.
>>>> 
>>>> If there really was an inherent problem with using pipes on Windows,
>>>> then I'm sure I would have found a lot more information about it.
>>> 
>>> Well, in our case, it's not about null bytes not being sent -- it's
>>> about knowing exactly when we've reached end-of-data, which we expect
>>> the system to tell us in some cases.  Radiance's binary formats for
>>> octrees, ambient files, pictures, etc., we know when we've reached 
>>> EOD
>>> regardless because the file header tells us how much to expect.
>>> However, when we're sending binary streams of floats to rcalc, which
>>> is simply operating on them and counting on the OS to stop sending
>>> data when it's out of data, we run into trouble if the OS doesn't 
>>> tell
>>> us exactly when the party is over.
>>> 
>>> I suppose a simple test would be something like:
>>> 
>>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>>> 
>>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>>> 37*(37+1)/2==703).  We could try running the above on a Windows box
>>> with a FAT or ExFAT filesystem to determine if this is a problem or
>>> not.  We should probably try it with some large numbers as well, 
>>> being
>>> aware that we end on a 128-byte boundary when n is a multiple of 32.
>>> 
>>> We can also try it while writing with an intermediate file between
>>> rcalc and total, to see if that makes any difference.

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Fri Mar 25 15:49:05 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Fri, 25 Mar 2016 15:49:05 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
Message-ID: <525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>

Really strange...  I definitely don't see problems on Unix.  Did you say that the problem goes away with intermediate files?  Which commands succeed and which ones fail.  Can we figure out where bytes are being lost?

-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Pipe problems on Windows
> Date: March 25, 2016 3:13:17 PM PDT
> 
> Sorry for the weird sequence in here...
> 
> Deadlock issue resolved.
> Now the testing with call_two() also results in the output
> of rcalc being cut short by one or several values.
> 
> The problem starts at n=1330, where one value is lost.
> Starting with n=4833, the last two values get missing.
> Starting with n=9876, the last three values are dropped.
> At least approximately. Sometimes it's a value less or more.
> Any logic to those numbers? I have no idea.
> 
> By the way, the effect is independent of the output format.
> This also happens with ASCII output.
> Somehow I get the impression, this might be a different problem
> than we were originally looking for, and I'm not sure yet if
> cnt or rcalc are to blame.
> 
> -schorsch
> 
> 
> Am 2016-03-25 20:19, schrieb Georg Mischler:
>> Am 2016-03-25 15:35, schrieb Georg Mischler:
>>> Moving this to a seperate thread.
>>> The sequence below consistently gives me 703 on Vista, with the only
>>> difference that the DOS box asks for double quotes.
>>> But...
>>> turning up n to values beyond 2000, the MSC binary of rcalc begins to
>>> write(!) some bytes less(!) to stdout. Which obviously falsifies the
>>> result of the chain.
>>> Interesingly, the NREL binary doesn't do that.
>>> Rob mentioned using gcc, so there seems to be a disagreement between
>>> the two compilers as to the semantics of writing to stdout on program
>>> termination.
>>> Going to have some discussion with the debugger on this one.
>>> I'd only be too happy if a simple flush() would solve the problem...
>>> Ah, and first I should probably create a few test cases to cover this
>>> kind of bug.
>> round two:
>> I've detected the problem by redirecting the output of rcalc
>> into a file, which ends up too small.
>> It always happens when running in bash.
>> It currently gives the correct output about one time out of
>> four running in cmd.exe.
>> When reading from a file instead of through a pipe from cnt,
>> the output is always correct.
>> Adding a fflush() doesn't change anyhting, as mentioned the
>> exit() will do that anyway.
>> There's no problem when feeding the same data through
>> call_one() from pyradlib.
>> Passing in the output of cnt through call_two() currently runs
>> into a deadlock that I can't quite explain.
>> It's getting more and more mysterious...
>> -schorsch


From schorsch at schorsch.com  Sat Mar 26 00:09:02 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sat, 26 Mar 2016 08:09:02 +0100
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
	<525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
Message-ID: <6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>

No problems with the gcc binaries on Windows either.

I tend to agree with Randolph. This is likely a problem that comes to
the surface due to the different memory layout applied by the MS
compiler.

So far it only fails when cnt and rcalc are directly connected via
a pipe. When cnt writes to a file, then that file is complete.
Rcalc reading from such a file also procuces correct output.

My previous test cases for cnt only tested very small sequences.
I've now cranked up those tests (getting the job killed a few times
by exhausting 6 GB of RAM), and didn't find any problems under those
testing conditions.

One of the next steps might be to improvise a "tee" program for
Windows to see what happens to the data in between the two (and
whether the problem still persists then).

Then I'll have to figure out how I can get the MS debugger to invoke
such a chained pipeline for stepping through the process.
So far I could only take a glance when rcalc output was blocked for
some reason, so I had time to attach the debugger from the outside.
But that only gave me a static picture, which didn't really help.

-schorsch


Am 2016-03-25 23:49, schrieb Gregory J. Ward:
> Really strange...  I definitely don't see problems on Unix.  Did you
> say that the problem goes away with intermediate files?  Which
> commands succeed and which ones fail.  Can we figure out where bytes
> are being lost?
> 
> -Greg
> 
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: Re: [Radiance-dev] Pipe problems on Windows
>> Date: March 25, 2016 3:13:17 PM PDT
>> 
>> Sorry for the weird sequence in here...
>> 
>> Deadlock issue resolved.
>> Now the testing with call_two() also results in the output
>> of rcalc being cut short by one or several values.
>> 
>> The problem starts at n=1330, where one value is lost.
>> Starting with n=4833, the last two values get missing.
>> Starting with n=9876, the last three values are dropped.
>> At least approximately. Sometimes it's a value less or more.
>> Any logic to those numbers? I have no idea.
>> 
>> By the way, the effect is independent of the output format.
>> This also happens with ASCII output.
>> Somehow I get the impression, this might be a different problem
>> than we were originally looking for, and I'm not sure yet if
>> cnt or rcalc are to blame.
>> 
>> -schorsch
>> 
>> 
>> Am 2016-03-25 20:19, schrieb Georg Mischler:
>>> Am 2016-03-25 15:35, schrieb Georg Mischler:
>>>> Moving this to a seperate thread.
>>>> The sequence below consistently gives me 703 on Vista, with the only
>>>> difference that the DOS box asks for double quotes.
>>>> But...
>>>> turning up n to values beyond 2000, the MSC binary of rcalc begins 
>>>> to
>>>> write(!) some bytes less(!) to stdout. Which obviously falsifies the
>>>> result of the chain.
>>>> Interesingly, the NREL binary doesn't do that.
>>>> Rob mentioned using gcc, so there seems to be a disagreement between
>>>> the two compilers as to the semantics of writing to stdout on 
>>>> program
>>>> termination.
>>>> Going to have some discussion with the debugger on this one.
>>>> I'd only be too happy if a simple flush() would solve the problem...
>>>> Ah, and first I should probably create a few test cases to cover 
>>>> this
>>>> kind of bug.
>>> round two:
>>> I've detected the problem by redirecting the output of rcalc
>>> into a file, which ends up too small.
>>> It always happens when running in bash.
>>> It currently gives the correct output about one time out of
>>> four running in cmd.exe.
>>> When reading from a file instead of through a pipe from cnt,
>>> the output is always correct.
>>> Adding a fflush() doesn't change anyhting, as mentioned the
>>> exit() will do that anyway.
>>> There's no problem when feeding the same data through
>>> call_one() from pyradlib.
>>> Passing in the output of cnt through call_two() currently runs
>>> into a deadlock that I can't quite explain.
>>> It's getting more and more mysterious...
>>> -schorsch
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Sat Mar 26 00:24:23 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sat, 26 Mar 2016 08:24:23 +0100
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
	<525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
	<6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
Message-ID: <cb910e295fe1fbea4f79d035a343f6d6@tanha.pair.com>

Turns out the GitHub console brings a nice set of unix utilities.
The tee-d output of cnt is correct in all tested cases.
Reading that file via filename argument in rcalc gives
the correct output again.
Feeding the same data via a pipe from cat causes rcalc to
exhibit the bug.
So it's definitively rcalc that's losing data.

-schorsch

Am 2016-03-26 08:09, schrieb Georg Mischler:
> No problems with the gcc binaries on Windows either.
> 
> I tend to agree with Randolph. This is likely a problem that comes to
> the surface due to the different memory layout applied by the MS
> compiler.
> 
> So far it only fails when cnt and rcalc are directly connected via
> a pipe. When cnt writes to a file, then that file is complete.
> Rcalc reading from such a file also procuces correct output.
> 
> My previous test cases for cnt only tested very small sequences.
> I've now cranked up those tests (getting the job killed a few times
> by exhausting 6 GB of RAM), and didn't find any problems under those
> testing conditions.
> 
> One of the next steps might be to improvise a "tee" program for
> Windows to see what happens to the data in between the two (and
> whether the problem still persists then).
> 
> Then I'll have to figure out how I can get the MS debugger to invoke
> such a chained pipeline for stepping through the process.
> So far I could only take a glance when rcalc output was blocked for
> some reason, so I had time to attach the debugger from the outside.
> But that only gave me a static picture, which didn't really help.
> 
> -schorsch
> 
> 
> Am 2016-03-25 23:49, schrieb Gregory J. Ward:
>> Really strange...  I definitely don't see problems on Unix.  Did you
>> say that the problem goes away with intermediate files?  Which
>> commands succeed and which ones fail.  Can we figure out where bytes
>> are being lost?
>> 
>> -Greg
>> 
>>> From: Georg Mischler <schorsch at schorsch.com>
>>> Subject: Re: [Radiance-dev] Pipe problems on Windows
>>> Date: March 25, 2016 3:13:17 PM PDT
>>> 
>>> Sorry for the weird sequence in here...
>>> 
>>> Deadlock issue resolved.
>>> Now the testing with call_two() also results in the output
>>> of rcalc being cut short by one or several values.
>>> 
>>> The problem starts at n=1330, where one value is lost.
>>> Starting with n=4833, the last two values get missing.
>>> Starting with n=9876, the last three values are dropped.
>>> At least approximately. Sometimes it's a value less or more.
>>> Any logic to those numbers? I have no idea.
>>> 
>>> By the way, the effect is independent of the output format.
>>> This also happens with ASCII output.
>>> Somehow I get the impression, this might be a different problem
>>> than we were originally looking for, and I'm not sure yet if
>>> cnt or rcalc are to blame.
>>> 
>>> -schorsch
>>> 
>>> 
>>> Am 2016-03-25 20:19, schrieb Georg Mischler:
>>>> Am 2016-03-25 15:35, schrieb Georg Mischler:
>>>>> Moving this to a seperate thread.
>>>>> The sequence below consistently gives me 703 on Vista, with the 
>>>>> only
>>>>> difference that the DOS box asks for double quotes.
>>>>> But...
>>>>> turning up n to values beyond 2000, the MSC binary of rcalc begins 
>>>>> to
>>>>> write(!) some bytes less(!) to stdout. Which obviously falsifies 
>>>>> the
>>>>> result of the chain.
>>>>> Interesingly, the NREL binary doesn't do that.
>>>>> Rob mentioned using gcc, so there seems to be a disagreement 
>>>>> between
>>>>> the two compilers as to the semantics of writing to stdout on 
>>>>> program
>>>>> termination.
>>>>> Going to have some discussion with the debugger on this one.
>>>>> I'd only be too happy if a simple flush() would solve the 
>>>>> problem...
>>>>> Ah, and first I should probably create a few test cases to cover 
>>>>> this
>>>>> kind of bug.
>>>> round two:
>>>> I've detected the problem by redirecting the output of rcalc
>>>> into a file, which ends up too small.
>>>> It always happens when running in bash.
>>>> It currently gives the correct output about one time out of
>>>> four running in cmd.exe.
>>>> When reading from a file instead of through a pipe from cnt,
>>>> the output is always correct.
>>>> Adding a fflush() doesn't change anyhting, as mentioned the
>>>> exit() will do that anyway.
>>>> There's no problem when feeding the same data through
>>>> call_one() from pyradlib.
>>>> Passing in the output of cnt through call_two() currently runs
>>>> into a deadlock that I can't quite explain.
>>>> It's getting more and more mysterious...
>>>> -schorsch
>> 
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From rmfritz3 at gmail.com  Sat Mar 26 00:27:47 2016
From: rmfritz3 at gmail.com (Randolph Fritz)
Date: Sat, 26 Mar 2016 00:27:47 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
	<525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
	<6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
Message-ID: <1332A636-50EE-4027-8D8C-F03E969F5CD2@gmail.com>

On Mar 26, 2016, at 12:09 AM, Georg Mischler <schorsch at schorsch.com> wrote:
> 
> I tend to agree with Randolph. This is likely a problem that comes to
> the surface due to the different memory layout applied by the MS
> compiler.

I suppose it could also be a timing problem. Perhaps the Windows stdio library is multi-threaded and this somehow interacts with pipes.

Hmmm?or perhaps MSVC?s code generation ?optimizer? is creating problems.  Might be worth setting it to the lowest level and see if that helps.

> Then I'll have to figure out how I can get the MS debugger to invoke
> such a chained pipeline for stepping through the process.
> So far I could only take a glance when rcalc output was blocked for
> some reason, so I had time to attach the debugger from the outside.
> But that only gave me a static picture, which didn't really help.

I wonder if the Dr. Memory debugging tool (http://www.drmemory.org/) would help?

Randolph



From schorsch at schorsch.com  Sat Mar 26 02:49:05 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sat, 26 Mar 2016 10:49:05 +0100
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <1332A636-50EE-4027-8D8C-F03E969F5CD2@gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
	<525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
	<6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
	<1332A636-50EE-4027-8D8C-F03E969F5CD2@gmail.com>
Message-ID: <d08a3f079f07de768412dad5926b831c@tanha.pair.com>

Am 2016-03-26 08:27, schrieb Randolph Fritz:
> On Mar 26, 2016, at 12:09 AM, Georg Mischler <schorsch at schorsch.com> 
> wrote:
>> 
>> I tend to agree with Randolph. This is likely a problem that comes to
>> the surface due to the different memory layout applied by the MS
>> compiler.
> 
> I suppose it could also be a timing problem. Perhaps the Windows stdio
> library is multi-threaded and this somehow interacts with pipes.

For a while I also had that suspicion, especially since in cmd.exe,
things go right (or at least slightly less wrong) once in a while.
But memory alignment doesn't have to be identical on each run, and I
don't see a a reason for making straight stdio calls multi-threaded,
unless you explicitly use the "overlapping io" functions.
We would also find lots of complaints online, if correct use of
stdio could lead to intermittent failure.


> Hmmm?or perhaps MSVC?s code generation ?optimizer? is creating
> problems.  Might be worth setting it to the lowest level and see if
> that helps.

This is a debug build with zero optimization.


>> Then I'll have to figure out how I can get the MS debugger to invoke
>> such a chained pipeline for stepping through the process.
>> So far I could only take a glance when rcalc output was blocked for
>> some reason, so I had time to attach the debugger from the outside.
>> But that only gave me a static picture, which didn't really help.
> 
> I wonder if the Dr. Memory debugging tool (http://www.drmemory.org/) 
> would help?

I'll look into it, thanks!

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Sat Mar 26 08:33:29 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Sat, 26 Mar 2016 08:33:29 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <d08a3f079f07de768412dad5926b831c@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
	<525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
	<6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
	<1332A636-50EE-4027-8D8C-F03E969F5CD2@gmail.com>
	<d08a3f079f07de768412dad5926b831c@tanha.pair.com>
Message-ID: <318FFC4B-76FC-4DEA-8315-5DBEC0AF786F@gmail.com>

Input is read from stdin by rcalc using this line in getinputrec():

	return(fgets(inpbuf, INBSIZ, fp) != NULL);

I don't know why fgets() would fail on a pipe of ASCII data, but it sounds like that's what is happening in some cases.

-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Pipe problems on Windows
> Date: March 26, 2016 2:49:05 AM PDT
> 
> Am 2016-03-26 08:27, schrieb Randolph Fritz:
>> On Mar 26, 2016, at 12:09 AM, Georg Mischler <schorsch at schorsch.com> wrote:
>>> I tend to agree with Randolph. This is likely a problem that comes to
>>> the surface due to the different memory layout applied by the MS
>>> compiler.
>> I suppose it could also be a timing problem. Perhaps the Windows stdio
>> library is multi-threaded and this somehow interacts with pipes.
> 
> For a while I also had that suspicion, especially since in cmd.exe,
> things go right (or at least slightly less wrong) once in a while.
> But memory alignment doesn't have to be identical on each run, and I
> don't see a a reason for making straight stdio calls multi-threaded,
> unless you explicitly use the "overlapping io" functions.
> We would also find lots of complaints online, if correct use of
> stdio could lead to intermittent failure.
> 
> 
>> Hmmm?or perhaps MSVC?s code generation ?optimizer? is creating
>> problems.  Might be worth setting it to the lowest level and see if
>> that helps.
> 
> This is a debug build with zero optimization.
> 
> 
>>> Then I'll have to figure out how I can get the MS debugger to invoke
>>> such a chained pipeline for stepping through the process.
>>> So far I could only take a glance when rcalc output was blocked for
>>> some reason, so I had time to attach the debugger from the outside.
>>> But that only gave me a static picture, which didn't really help.
>> I wonder if the Dr. Memory debugging tool (http://www.drmemory.org/) would help?
> 
> I'll look into it, thanks!
> 
> -schorsch


From rmfritz3 at gmail.com  Sat Mar 26 11:48:18 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Sat, 26 Mar 2016 11:48:18 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <318FFC4B-76FC-4DEA-8315-5DBEC0AF786F@gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
	<525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
	<6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
	<1332A636-50EE-4027-8D8C-F03E969F5CD2@gmail.com>
	<d08a3f079f07de768412dad5926b831c@tanha.pair.com>
	<318FFC4B-76FC-4DEA-8315-5DBEC0AF786F@gmail.com>
Message-ID: <CANeAMoJkxK7vdd58wF1ySJsSQy1kVdRb5tMk9C=eBEZJ9oM8iw@mail.gmail.com>

Maybe we should change that to fread()? fgets() is text-oriented.

-- 
Randolph M. Fritz, Lighting Design and Simulation
+1 206 659-8617 || rmfritz3 at gmail.com

On Sat, Mar 26, 2016 at 8:33 AM, Gregory J. Ward <gregoryjward at gmail.com>
wrote:

> Input is read from stdin by rcalc using this line in getinputrec():
>
>         return(fgets(inpbuf, INBSIZ, fp) != NULL);
>
> I don't know why fgets() would fail on a pipe of ASCII data, but it sounds
> like that's what is happening in some cases.
>
> -Greg
>
> > From: Georg Mischler <schorsch at schorsch.com>
> > Subject: Re: [Radiance-dev] Pipe problems on Windows
> > Date: March 26, 2016 2:49:05 AM PDT
> >
> > Am 2016-03-26 08:27, schrieb Randolph Fritz:
> >> On Mar 26, 2016, at 12:09 AM, Georg Mischler <schorsch at schorsch.com>
> wrote:
> >>> I tend to agree with Randolph. This is likely a problem that comes to
> >>> the surface due to the different memory layout applied by the MS
> >>> compiler.
> >> I suppose it could also be a timing problem. Perhaps the Windows stdio
> >> library is multi-threaded and this somehow interacts with pipes.
> >
> > For a while I also had that suspicion, especially since in cmd.exe,
> > things go right (or at least slightly less wrong) once in a while.
> > But memory alignment doesn't have to be identical on each run, and I
> > don't see a a reason for making straight stdio calls multi-threaded,
> > unless you explicitly use the "overlapping io" functions.
> > We would also find lots of complaints online, if correct use of
> > stdio could lead to intermittent failure.
> >
> >
> >> Hmmm?or perhaps MSVC?s code generation ?optimizer? is creating
> >> problems.  Might be worth setting it to the lowest level and see if
> >> that helps.
> >
> > This is a debug build with zero optimization.
> >
> >
> >>> Then I'll have to figure out how I can get the MS debugger to invoke
> >>> such a chained pipeline for stepping through the process.
> >>> So far I could only take a glance when rcalc output was blocked for
> >>> some reason, so I had time to attach the debugger from the outside.
> >>> But that only gave me a static picture, which didn't really help.
> >> I wonder if the Dr. Memory debugging tool (http://www.drmemory.org/)
> would help?
> >
> > I'll look into it, thanks!
> >
> > -schorsch
>
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160326/e7cfc592/attachment.html>

From gregoryjward at gmail.com  Sat Mar 26 12:05:44 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Sat, 26 Mar 2016 12:05:44 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <CANeAMoJkxK7vdd58wF1ySJsSQy1kVdRb5tMk9C=eBEZJ9oM8iw@mail.gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
	<525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
	<6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
	<1332A636-50EE-4027-8D8C-F03E969F5CD2@gmail.com>
	<d08a3f079f07de768412dad5926b831c@tanha.pair.com>
	<318FFC4B-76FC-4DEA-8315-5DBEC0AF786F@gmail.com>
	<CANeAMoJkxK7vdd58wF1ySJsSQy1kVdRb5tMk9C=eBEZJ9oM8iw@mail.gmail.com>
Message-ID: <BEF1B990-83C2-4DD1-8C0E-47A6037D23C9@gmail.com>

It only calls fgets() when the input is ASCII, as it is in the case of reading from cnt.  I do call fread() for loading binary input.

-G

> From: "Randolph M. Fritz" <rmfritz3 at gmail.com>
> Subject: Re: [Radiance-dev] Pipe problems on Windows
> Date: March 26, 2016 11:48:18 AM PDT
> 
> Maybe we should change that to fread()? fgets() is text-oriented.
> 
> -- 
> Randolph M. Fritz, Lighting Design and Simulation
> +1 206 659-8617 || rmfritz3 at gmail.com
> 
> On Sat, Mar 26, 2016 at 8:33 AM, Gregory J. Ward <gregoryjward at gmail.com> wrote:
> Input is read from stdin by rcalc using this line in getinputrec():
> 
>         return(fgets(inpbuf, INBSIZ, fp) != NULL);
> 
> I don't know why fgets() would fail on a pipe of ASCII data, but it sounds like that's what is happening in some cases.
> 
> -Greg
> 
> > From: Georg Mischler <schorsch at schorsch.com>
> > Subject: Re: [Radiance-dev] Pipe problems on Windows
> > Date: March 26, 2016 2:49:05 AM PDT
> >
> > Am 2016-03-26 08:27, schrieb Randolph Fritz:
> >> On Mar 26, 2016, at 12:09 AM, Georg Mischler <schorsch at schorsch.com> wrote:
> >>> I tend to agree with Randolph. This is likely a problem that comes to
> >>> the surface due to the different memory layout applied by the MS
> >>> compiler.
> >> I suppose it could also be a timing problem. Perhaps the Windows stdio
> >> library is multi-threaded and this somehow interacts with pipes.
> >
> > For a while I also had that suspicion, especially since in cmd.exe,
> > things go right (or at least slightly less wrong) once in a while.
> > But memory alignment doesn't have to be identical on each run, and I
> > don't see a a reason for making straight stdio calls multi-threaded,
> > unless you explicitly use the "overlapping io" functions.
> > We would also find lots of complaints online, if correct use of
> > stdio could lead to intermittent failure.
> >
> >
> >> Hmmm?or perhaps MSVC?s code generation ?optimizer? is creating
> >> problems.  Might be worth setting it to the lowest level and see if
> >> that helps.
> >
> > This is a debug build with zero optimization.
> >
> >
> >>> Then I'll have to figure out how I can get the MS debugger to invoke
> >>> such a chained pipeline for stepping through the process.
> >>> So far I could only take a glance when rcalc output was blocked for
> >>> some reason, so I had time to attach the debugger from the outside.
> >>> But that only gave me a static picture, which didn't really help.
> >> I wonder if the Dr. Memory debugging tool (http://www.drmemory.org/) would help?
> >
> > I'll look into it, thanks!
> >
> > -schorsch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160326/6b18b165/attachment.html>

From rmfritz3 at gmail.com  Sat Mar 26 14:34:07 2016
From: rmfritz3 at gmail.com (Randolph M. Fritz)
Date: Sat, 26 Mar 2016 14:34:07 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <BEF1B990-83C2-4DD1-8C0E-47A6037D23C9@gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<0304e23cbf40f8ff386e2ff536ea5705@tanha.pair.com>
	<bb26ddaac1e4b9c707e863df77deb9cf@tanha.pair.com>
	<525FD5C8-9477-4864-A9F2-691DA5A4D74C@gmail.com>
	<6da68aa79e46d38555eb88d56ce7ff8a@tanha.pair.com>
	<1332A636-50EE-4027-8D8C-F03E969F5CD2@gmail.com>
	<d08a3f079f07de768412dad5926b831c@tanha.pair.com>
	<318FFC4B-76FC-4DEA-8315-5DBEC0AF786F@gmail.com>
	<CANeAMoJkxK7vdd58wF1ySJsSQy1kVdRb5tMk9C=eBEZJ9oM8iw@mail.gmail.com>
	<BEF1B990-83C2-4DD1-8C0E-47A6037D23C9@gmail.com>
Message-ID: <CANeAMoLL=v1ugrqG0gjw25=mf=3e=0AHFDfD7J6zdYanO5Xaew@mail.gmail.com>

It seems that Windows fread() sometimes returns a short record when reading
from a pipe. See
https://github.com/jmacd/xdelta/issues/101#issuecomment-85332549.

I still don't understand rcalc's behavior; it seems to me like the short
record should be treated as EOF, but maybe I'm missing something.
?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.radiance-online.org/pipermail/radiance-dev/attachments/20160326/22cb0b34/attachment.html>

From schorsch at schorsch.com  Sat Mar 26 15:20:09 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sat, 26 Mar 2016 23:20:09 +0100
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
Message-ID: <d9dbf03a0f5afcc86cd782a782875f27@tanha.pair.com>

It looks like we're dealing with a broken fgets() included
with Visual Studio 2015 Community edition.

When a newline character falls exactly to the end of the
pipe buffer, it will be ignored. This means that instead of
"\t1328\n" the received string will be "\t1328\t1329\n".
Any time that happens, nrecs is only incremented once for
two actual input values, which accounts for the lower nuber
of output values in the end.

Guess I'll have to try if our own fgetline() has better success.

But again, this is probably not the "garbage date from binary
pipe" problem that we were previously discussing. We should still
look for test cases to identify that one.

Cheers
-schorsch



Am 2016-03-25 15:35, schrieb Georg Mischler:
> Moving this to a seperate thread.
> 
> 
> The sequence below consistently gives me 703 on Vista, with the only
> difference that the DOS box asks for double quotes.
> 
> But...
> 
> turning up n to values beyond 2000, the MSC binary of rcalc begins to
> write(!) some bytes less(!) to stdout. Which obviously falsifies the
> result of the chain.
> 
> Interesingly, the NREL binary doesn't do that.
> Rob mentioned using gcc, so there seems to be a disagreement between
> the two compilers as to the semantics of writing to stdout on program
> termination.
> 
> Going to have some discussion with the debugger on this one.
> I'd only be too happy if a simple flush() would solve the problem...
> 
> Ah, and first I should probably create a few test cases to cover this
> kind of bug.
> 
> 
> Cheers
> -schorsch
> 
> 
>>> I've searched for similar complaints online. In the few instances 
>>> I've
>>> found, it usually was because a terminating null byte wasn't written
>>> to the receiving buffer for some reason. The purportedly received
>>> garbage data was then simply the previous random contents of that
>>> buffer. That may or may not be the cause here as well.
>>> 
>>> If there really was an inherent problem with using pipes on Windows,
>>> then I'm sure I would have found a lot more information about it.
>> 
>> Well, in our case, it's not about null bytes not being sent -- it's
>> about knowing exactly when we've reached end-of-data, which we expect
>> the system to tell us in some cases.  Radiance's binary formats for
>> octrees, ambient files, pictures, etc., we know when we've reached EOD
>> regardless because the file header tells us how much to expect.
>> However, when we're sending binary streams of floats to rcalc, which
>> is simply operating on them and counting on the OS to stop sending
>> data when it's out of data, we run into trouble if the OS doesn't tell
>> us exactly when the party is over.
>> 
>> I suppose a simple test would be something like:
>> 
>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>> 
>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>> 37*(37+1)/2==703).  We could try running the above on a Windows box
>> with a FAT or ExFAT filesystem to determine if this is a problem or
>> not.  We should probably try it with some large numbers as well, being
>> aware that we end on a 128-byte boundary when n is a multiple of 32.
>> 
>> We can also try it while writing with an intermediate file between
>> rcalc and total, to see if that makes any difference.

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Sat Mar 26 16:28:58 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Sat, 26 Mar 2016 16:28:58 -0700
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <d9dbf03a0f5afcc86cd782a782875f27@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<d9dbf03a0f5afcc86cd782a782875f27@tanha.pair.com>
Message-ID: <092BC57B-4514-42DE-ADE9-DCE72195E308@gmail.com>

I agree this is probably not the error we have seen before, though it is an important one.  We might think about writing an fgets() replacement for Windows, rather than using fgetline(), which has slightly different semantics.  We should replace it at the library level, so it will propagate to all potentially affected tools.  It's hard to believe that such a simple, basic function call would be broken in this way....

Good sleuthing, Schorsch!

-G

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Pipe problems on Windows
> Date: March 26, 2016 3:20:09 PM PDT
> 
> It looks like we're dealing with a broken fgets() included
> with Visual Studio 2015 Community edition.
> 
> When a newline character falls exactly to the end of the
> pipe buffer, it will be ignored. This means that instead of
> "\t1328\n" the received string will be "\t1328\t1329\n".
> Any time that happens, nrecs is only incremented once for
> two actual input values, which accounts for the lower nuber
> of output values in the end.
> 
> Guess I'll have to try if our own fgetline() has better success.
> 
> But again, this is probably not the "garbage date from binary
> pipe" problem that we were previously discussing. We should still
> look for test cases to identify that one.
> 
> Cheers
> -schorsch
> 
> 
> Am 2016-03-25 15:35, schrieb Georg Mischler:
>> Moving this to a seperate thread.
>> The sequence below consistently gives me 703 on Vista, with the only
>> difference that the DOS box asks for double quotes.
>> But...
>> turning up n to values beyond 2000, the MSC binary of rcalc begins to
>> write(!) some bytes less(!) to stdout. Which obviously falsifies the
>> result of the chain.
>> Interesingly, the NREL binary doesn't do that.
>> Rob mentioned using gcc, so there seems to be a disagreement between
>> the two compilers as to the semantics of writing to stdout on program
>> termination.
>> Going to have some discussion with the debugger on this one.
>> I'd only be too happy if a simple flush() would solve the problem...
>> Ah, and first I should probably create a few test cases to cover this
>> kind of bug.
>> Cheers
>> -schorsch
>>>> I've searched for similar complaints online. In the few instances I've
>>>> found, it usually was because a terminating null byte wasn't written
>>>> to the receiving buffer for some reason. The purportedly received
>>>> garbage data was then simply the previous random contents of that
>>>> buffer. That may or may not be the cause here as well.
>>>> If there really was an inherent problem with using pipes on Windows,
>>>> then I'm sure I would have found a lot more information about it.
>>> Well, in our case, it's not about null bytes not being sent -- it's
>>> about knowing exactly when we've reached end-of-data, which we expect
>>> the system to tell us in some cases.  Radiance's binary formats for
>>> octrees, ambient files, pictures, etc., we know when we've reached EOD
>>> regardless because the file header tells us how much to expect.
>>> However, when we're sending binary streams of floats to rcalc, which
>>> is simply operating on them and counting on the OS to stop sending
>>> data when it's out of data, we run into trouble if the OS doesn't tell
>>> us exactly when the party is over.
>>> I suppose a simple test would be something like:
>>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>>> 37*(37+1)/2==703).  We could try running the above on a Windows box
>>> with a FAT or ExFAT filesystem to determine if this is a problem or
>>> not.  We should probably try it with some large numbers as well, being
>>> aware that we end on a 128-byte boundary when n is a multiple of 32.
>>> We can also try it while writing with an intermediate file between
>>> rcalc and total, to see if that makes any difference.


From schorsch at schorsch.com  Sun Mar 27 01:38:43 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sun, 27 Mar 2016 10:38:43 +0200
Subject: [Radiance-dev] Pipe problems on Windows
In-Reply-To: <092BC57B-4514-42DE-ADE9-DCE72195E308@gmail.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<d9dbf03a0f5afcc86cd782a782875f27@tanha.pair.com>
	<092BC57B-4514-42DE-ADE9-DCE72195E308@gmail.com>
Message-ID: <16a246fe0c6b436250f7cd05dec82307@tanha.pair.com>

Good thing I tested with fgetline() before starting to roll my own
fgets(). The suspicion I had from stepping through fgets() was
confirmed, and it's actually the underlying stream that's broken.
Plugging our own buffering text stream might be theoretically
possible, but is probably not worth the effort.

So pending a fix from Microsoft, we need to consider Visual Studio
2015 in default settings as unsuitable for production use.

Microsoft seems to be quite proud of having massively refactored their
C/C++ runtime libraries for Windows 10 into what they call the
"universal crt". And that new version of the CRT is now included in VS
2015.

I'll try and see if (and how) I can link to an older CRT instead, but
I'm not very optimistic there.

The bug is slightly obscure. It only happens very intermittinlgy and
at seemingly random intervals. You need to pass a largish number of
very short text lines through a pipe to trigger it, and even then
you may only notice the problem if you happen to count the lines.
Sending a sequence of numerals simplifies that...

Of course that's not really an excuse for a multi-billion-dollar
corporation breaking one of the most basic building blocks of
eventually all of their software products. I'm actually wondering if
such a possibility to "manipulate" the contents of an interprocess
data stream (eg. by changing the default buffer length) has any
security implications.

This drastically shows the value of having an extremely complete and
thorough battery of test cases before you start with any major
refactoring.

-schorsch


Am 2016-03-27 00:28, schrieb Gregory J. Ward:
> I agree this is probably not the error we have seen before, though it
> is an important one.  We might think about writing an fgets()
> replacement for Windows, rather than using fgetline(), which has
> slightly different semantics.  We should replace it at the library
> level, so it will propagate to all potentially affected tools.  It's
> hard to believe that such a simple, basic function call would be
> broken in this way....
> 
> Good sleuthing, Schorsch!
> 
> -G
> 
>> From: Georg Mischler <schorsch at schorsch.com>
>> Subject: Re: [Radiance-dev] Pipe problems on Windows
>> Date: March 26, 2016 3:20:09 PM PDT
>> 
>> It looks like we're dealing with a broken fgets() included
>> with Visual Studio 2015 Community edition.
>> 
>> When a newline character falls exactly to the end of the
>> pipe buffer, it will be ignored. This means that instead of
>> "\t1328\n" the received string will be "\t1328\t1329\n".
>> Any time that happens, nrecs is only incremented once for
>> two actual input values, which accounts for the lower nuber
>> of output values in the end.
>> 
>> Guess I'll have to try if our own fgetline() has better success.
>> 
>> But again, this is probably not the "garbage date from binary
>> pipe" problem that we were previously discussing. We should still
>> look for test cases to identify that one.
>> 
>> Cheers
>> -schorsch
>> 
>> 
>> Am 2016-03-25 15:35, schrieb Georg Mischler:
>>> Moving this to a seperate thread.
>>> The sequence below consistently gives me 703 on Vista, with the only
>>> difference that the DOS box asks for double quotes.
>>> But...
>>> turning up n to values beyond 2000, the MSC binary of rcalc begins to
>>> write(!) some bytes less(!) to stdout. Which obviously falsifies the
>>> result of the chain.
>>> Interesingly, the NREL binary doesn't do that.
>>> Rob mentioned using gcc, so there seems to be a disagreement between
>>> the two compilers as to the semantics of writing to stdout on program
>>> termination.
>>> Going to have some discussion with the debugger on this one.
>>> I'd only be too happy if a simple flush() would solve the problem...
>>> Ah, and first I should probably create a few test cases to cover this
>>> kind of bug.
>>> Cheers
>>> -schorsch
>>>>> I've searched for similar complaints online. In the few instances 
>>>>> I've
>>>>> found, it usually was because a terminating null byte wasn't 
>>>>> written
>>>>> to the receiving buffer for some reason. The purportedly received
>>>>> garbage data was then simply the previous random contents of that
>>>>> buffer. That may or may not be the cause here as well.
>>>>> If there really was an inherent problem with using pipes on 
>>>>> Windows,
>>>>> then I'm sure I would have found a lot more information about it.
>>>> Well, in our case, it's not about null bytes not being sent -- it's
>>>> about knowing exactly when we've reached end-of-data, which we 
>>>> expect
>>>> the system to tell us in some cases.  Radiance's binary formats for
>>>> octrees, ambient files, pictures, etc., we know when we've reached 
>>>> EOD
>>>> regardless because the file header tells us how much to expect.
>>>> However, when we're sending binary streams of floats to rcalc, which
>>>> is simply operating on them and counting on the OS to stop sending
>>>> data when it's out of data, we run into trouble if the OS doesn't 
>>>> tell
>>>> us exactly when the party is over.
>>>> I suppose a simple test would be something like:
>>>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>>>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>>>> 37*(37+1)/2==703).  We could try running the above on a Windows box
>>>> with a FAT or ExFAT filesystem to determine if this is a problem or
>>>> not.  We should probably try it with some large numbers as well, 
>>>> being
>>>> aware that we end on a 128-byte boundary when n is a multiple of 32.
>>>> We can also try it while writing with an intermediate file between
>>>> rcalc and total, to see if that makes any difference.
> 
> _______________________________________________
> Radiance-dev mailing list
> Radiance-dev at radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Sun Mar 27 05:31:15 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sun, 27 Mar 2016 14:31:15 +0200
Subject: [Radiance-dev] Pipe problems on Windows - BUG in Universal CRT
In-Reply-To: <16a246fe0c6b436250f7cd05dec82307@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<d9dbf03a0f5afcc86cd782a782875f27@tanha.pair.com>
	<092BC57B-4514-42DE-ADE9-DCE72195E308@gmail.com>
	<16a246fe0c6b436250f7cd05dec82307@tanha.pair.com>
Message-ID: <ee7dbd80d8c1fc70a24cbf6d699cd053@tanha.pair.com>

I've sent feedback to Microsoft, we'll see what happens.

For anyone who wants to check the weirdness on their own:


sender.c
-----------------------------------------------------
#include <stdio.h>
#define MAX_TESTLINES 20000

int main(void)
{
   int i;

   for (i = 0; i < MAX_TESTLINES; i++) {
     fprintf_s(stdout, "x\n");
   }
   return 0;
}
-----------------------------------------------------


receiver.c
-----------------------------------------------------
#include <stdio.h>
#define MAX_BUF 10

int main(void)
{
   int i = 0;
   char inbuf[MAX_BUF];

   while (fgets((char*)&inbuf, MAX_BUF, stdin)) {
     if (inbuf[1] != '\n') {
       fprintf_s(stdout, "Line ending omitted from stream on line %d: 
\"%s\"\n", i++, &inbuf);
     }
     i++;
   }
   return 0;
}
-----------------------------------------------------


Invoke the two programs in a console as:

$ sender | receiver


With bug present, the output will be something similar to:

Line ending omitted from stream on line 2730: "xx
"
Line ending omitted from stream on line 5461: "xx
"
Line ending omitted from stream on line 8192: "xx
"
Line ending omitted from stream on line 10923: "xx
"
Line ending omitted from stream on line 13654: "xx
"
Line ending omitted from stream on line 16385: "xx
"


Have fun!

-schorsch


Am 2016-03-27 10:38, schrieb Georg Mischler:
> Good thing I tested with fgetline() before starting to roll my own
> fgets(). The suspicion I had from stepping through fgets() was
> confirmed, and it's actually the underlying stream that's broken.
> Plugging our own buffering text stream might be theoretically
> possible, but is probably not worth the effort.
> 
> So pending a fix from Microsoft, we need to consider Visual Studio
> 2015 in default settings as unsuitable for production use.
> 
> Microsoft seems to be quite proud of having massively refactored their
> C/C++ runtime libraries for Windows 10 into what they call the
> "universal crt". And that new version of the CRT is now included in VS
> 2015.
> 
> I'll try and see if (and how) I can link to an older CRT instead, but
> I'm not very optimistic there.
> 
> The bug is slightly obscure. It only happens very intermittinlgy and
> at seemingly random intervals. You need to pass a largish number of
> very short text lines through a pipe to trigger it, and even then
> you may only notice the problem if you happen to count the lines.
> Sending a sequence of numerals simplifies that...
> 
> Of course that's not really an excuse for a multi-billion-dollar
> corporation breaking one of the most basic building blocks of
> eventually all of their software products. I'm actually wondering if
> such a possibility to "manipulate" the contents of an interprocess
> data stream (eg. by changing the default buffer length) has any
> security implications.
> 
> This drastically shows the value of having an extremely complete and
> thorough battery of test cases before you start with any major
> refactoring.
> 
> -schorsch
> 
> 
> Am 2016-03-27 00:28, schrieb Gregory J. Ward:
>> I agree this is probably not the error we have seen before, though it
>> is an important one.  We might think about writing an fgets()
>> replacement for Windows, rather than using fgetline(), which has
>> slightly different semantics.  We should replace it at the library
>> level, so it will propagate to all potentially affected tools.  It's
>> hard to believe that such a simple, basic function call would be
>> broken in this way....
>> 
>> Good sleuthing, Schorsch!
>> 
>> -G
>> 
>>> From: Georg Mischler <schorsch at schorsch.com>
>>> Subject: Re: [Radiance-dev] Pipe problems on Windows
>>> Date: March 26, 2016 3:20:09 PM PDT
>>> 
>>> It looks like we're dealing with a broken fgets() included
>>> with Visual Studio 2015 Community edition.
>>> 
>>> When a newline character falls exactly to the end of the
>>> pipe buffer, it will be ignored. This means that instead of
>>> "\t1328\n" the received string will be "\t1328\t1329\n".
>>> Any time that happens, nrecs is only incremented once for
>>> two actual input values, which accounts for the lower nuber
>>> of output values in the end.
>>> 
>>> Guess I'll have to try if our own fgetline() has better success.
>>> 
>>> But again, this is probably not the "garbage date from binary
>>> pipe" problem that we were previously discussing. We should still
>>> look for test cases to identify that one.
>>> 
>>> Cheers
>>> -schorsch
>>> 
>>> 
>>> Am 2016-03-25 15:35, schrieb Georg Mischler:
>>>> Moving this to a seperate thread.
>>>> The sequence below consistently gives me 703 on Vista, with the only
>>>> difference that the DOS box asks for double quotes.
>>>> But...
>>>> turning up n to values beyond 2000, the MSC binary of rcalc begins 
>>>> to
>>>> write(!) some bytes less(!) to stdout. Which obviously falsifies the
>>>> result of the chain.
>>>> Interesingly, the NREL binary doesn't do that.
>>>> Rob mentioned using gcc, so there seems to be a disagreement between
>>>> the two compilers as to the semantics of writing to stdout on 
>>>> program
>>>> termination.
>>>> Going to have some discussion with the debugger on this one.
>>>> I'd only be too happy if a simple flush() would solve the problem...
>>>> Ah, and first I should probably create a few test cases to cover 
>>>> this
>>>> kind of bug.
>>>> Cheers
>>>> -schorsch
>>>>>> I've searched for similar complaints online. In the few instances 
>>>>>> I've
>>>>>> found, it usually was because a terminating null byte wasn't 
>>>>>> written
>>>>>> to the receiving buffer for some reason. The purportedly received
>>>>>> garbage data was then simply the previous random contents of that
>>>>>> buffer. That may or may not be the cause here as well.
>>>>>> If there really was an inherent problem with using pipes on 
>>>>>> Windows,
>>>>>> then I'm sure I would have found a lot more information about it.
>>>>> Well, in our case, it's not about null bytes not being sent -- it's
>>>>> about knowing exactly when we've reached end-of-data, which we 
>>>>> expect
>>>>> the system to tell us in some cases.  Radiance's binary formats for
>>>>> octrees, ambient files, pictures, etc., we know when we've reached 
>>>>> EOD
>>>>> regardless because the file header tells us how much to expect.
>>>>> However, when we're sending binary streams of floats to rcalc, 
>>>>> which
>>>>> is simply operating on them and counting on the OS to stop sending
>>>>> data when it's out of data, we run into trouble if the OS doesn't 
>>>>> tell
>>>>> us exactly when the party is over.
>>>>> I suppose a simple test would be something like:
>>>>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>>>>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>>>>> 37*(37+1)/2==703).  We could try running the above on a Windows box
>>>>> with a FAT or ExFAT filesystem to determine if this is a problem or
>>>>> not.  We should probably try it with some large numbers as well, 
>>>>> being
>>>>> aware that we end on a 128-byte boundary when n is a multiple of 
>>>>> 32.
>>>>> We can also try it while writing with an intermediate file between
>>>>> rcalc and total, to see if that makes any difference.
>> 
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From schorsch at schorsch.com  Sun Mar 27 06:21:27 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Sun, 27 Mar 2016 15:21:27 +0200
Subject: [Radiance-dev] Pipe problems on Windows - BUG in Universal CRT
In-Reply-To: <ee7dbd80d8c1fc70a24cbf6d699cd053@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<d9dbf03a0f5afcc86cd782a782875f27@tanha.pair.com>
	<092BC57B-4514-42DE-ADE9-DCE72195E308@gmail.com>
	<16a246fe0c6b436250f7cd05dec82307@tanha.pair.com>
	<ee7dbd80d8c1fc70a24cbf6d699cd053@tanha.pair.com>
Message-ID: <5f02d11719a84233d46ec430d023e951@tanha.pair.com>

Keep talking to myself...

The MS feedback site has those entries
  https://connect.microsoft.com/VisualStudio/Feedback/Details/1902345
  https://connect.microsoft.com/VisualStudio/Feedback/Details/2419638
both of which seem to describe incarnations of our problem.

In the first one, a MS person added a comment saying:
   We have fixed this bug; the fix will be present in an upcoming
   update to the Universal CRT.

So all hope is not lost.

-schorsch


Am 2016-03-27 14:31, schrieb Georg Mischler:
> I've sent feedback to Microsoft, we'll see what happens.
> 
> For anyone who wants to check the weirdness on their own:
> 
> 
> sender.c
> -----------------------------------------------------
> #include <stdio.h>
> #define MAX_TESTLINES 20000
> 
> int main(void)
> {
>   int i;
> 
>   for (i = 0; i < MAX_TESTLINES; i++) {
>     fprintf_s(stdout, "x\n");
>   }
>   return 0;
> }
> -----------------------------------------------------
> 
> 
> receiver.c
> -----------------------------------------------------
> #include <stdio.h>
> #define MAX_BUF 10
> 
> int main(void)
> {
>   int i = 0;
>   char inbuf[MAX_BUF];
> 
>   while (fgets((char*)&inbuf, MAX_BUF, stdin)) {
>     if (inbuf[1] != '\n') {
>       fprintf_s(stdout, "Line ending omitted from stream on line %d:
> \"%s\"\n", i++, &inbuf);
>     }
>     i++;
>   }
>   return 0;
> }
> -----------------------------------------------------
> 
> 
> Invoke the two programs in a console as:
> 
> $ sender | receiver
> 
> 
> With bug present, the output will be something similar to:
> 
> Line ending omitted from stream on line 2730: "xx
> "
> Line ending omitted from stream on line 5461: "xx
> "
> Line ending omitted from stream on line 8192: "xx
> "
> Line ending omitted from stream on line 10923: "xx
> "
> Line ending omitted from stream on line 13654: "xx
> "
> Line ending omitted from stream on line 16385: "xx
> "
> 
> 
> Have fun!
> 
> -schorsch
> 
> 
> Am 2016-03-27 10:38, schrieb Georg Mischler:
>> Good thing I tested with fgetline() before starting to roll my own
>> fgets(). The suspicion I had from stepping through fgets() was
>> confirmed, and it's actually the underlying stream that's broken.
>> Plugging our own buffering text stream might be theoretically
>> possible, but is probably not worth the effort.
>> 
>> So pending a fix from Microsoft, we need to consider Visual Studio
>> 2015 in default settings as unsuitable for production use.
>> 
>> Microsoft seems to be quite proud of having massively refactored their
>> C/C++ runtime libraries for Windows 10 into what they call the
>> "universal crt". And that new version of the CRT is now included in VS
>> 2015.
>> 
>> I'll try and see if (and how) I can link to an older CRT instead, but
>> I'm not very optimistic there.
>> 
>> The bug is slightly obscure. It only happens very intermittinlgy and
>> at seemingly random intervals. You need to pass a largish number of
>> very short text lines through a pipe to trigger it, and even then
>> you may only notice the problem if you happen to count the lines.
>> Sending a sequence of numerals simplifies that...
>> 
>> Of course that's not really an excuse for a multi-billion-dollar
>> corporation breaking one of the most basic building blocks of
>> eventually all of their software products. I'm actually wondering if
>> such a possibility to "manipulate" the contents of an interprocess
>> data stream (eg. by changing the default buffer length) has any
>> security implications.
>> 
>> This drastically shows the value of having an extremely complete and
>> thorough battery of test cases before you start with any major
>> refactoring.
>> 
>> -schorsch
>> 
>> 
>> Am 2016-03-27 00:28, schrieb Gregory J. Ward:
>>> I agree this is probably not the error we have seen before, though it
>>> is an important one.  We might think about writing an fgets()
>>> replacement for Windows, rather than using fgetline(), which has
>>> slightly different semantics.  We should replace it at the library
>>> level, so it will propagate to all potentially affected tools.  It's
>>> hard to believe that such a simple, basic function call would be
>>> broken in this way....
>>> 
>>> Good sleuthing, Schorsch!
>>> 
>>> -G
>>> 
>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>> Subject: Re: [Radiance-dev] Pipe problems on Windows
>>>> Date: March 26, 2016 3:20:09 PM PDT
>>>> 
>>>> It looks like we're dealing with a broken fgets() included
>>>> with Visual Studio 2015 Community edition.
>>>> 
>>>> When a newline character falls exactly to the end of the
>>>> pipe buffer, it will be ignored. This means that instead of
>>>> "\t1328\n" the received string will be "\t1328\t1329\n".
>>>> Any time that happens, nrecs is only incremented once for
>>>> two actual input values, which accounts for the lower nuber
>>>> of output values in the end.
>>>> 
>>>> Guess I'll have to try if our own fgetline() has better success.
>>>> 
>>>> But again, this is probably not the "garbage date from binary
>>>> pipe" problem that we were previously discussing. We should still
>>>> look for test cases to identify that one.
>>>> 
>>>> Cheers
>>>> -schorsch
>>>> 
>>>> 
>>>> Am 2016-03-25 15:35, schrieb Georg Mischler:
>>>>> Moving this to a seperate thread.
>>>>> The sequence below consistently gives me 703 on Vista, with the 
>>>>> only
>>>>> difference that the DOS box asks for double quotes.
>>>>> But...
>>>>> turning up n to values beyond 2000, the MSC binary of rcalc begins 
>>>>> to
>>>>> write(!) some bytes less(!) to stdout. Which obviously falsifies 
>>>>> the
>>>>> result of the chain.
>>>>> Interesingly, the NREL binary doesn't do that.
>>>>> Rob mentioned using gcc, so there seems to be a disagreement 
>>>>> between
>>>>> the two compilers as to the semantics of writing to stdout on 
>>>>> program
>>>>> termination.
>>>>> Going to have some discussion with the debugger on this one.
>>>>> I'd only be too happy if a simple flush() would solve the 
>>>>> problem...
>>>>> Ah, and first I should probably create a few test cases to cover 
>>>>> this
>>>>> kind of bug.
>>>>> Cheers
>>>>> -schorsch
>>>>>>> I've searched for similar complaints online. In the few instances 
>>>>>>> I've
>>>>>>> found, it usually was because a terminating null byte wasn't 
>>>>>>> written
>>>>>>> to the receiving buffer for some reason. The purportedly received
>>>>>>> garbage data was then simply the previous random contents of that
>>>>>>> buffer. That may or may not be the cause here as well.
>>>>>>> If there really was an inherent problem with using pipes on 
>>>>>>> Windows,
>>>>>>> then I'm sure I would have found a lot more information about it.
>>>>>> Well, in our case, it's not about null bytes not being sent -- 
>>>>>> it's
>>>>>> about knowing exactly when we've reached end-of-data, which we 
>>>>>> expect
>>>>>> the system to tell us in some cases.  Radiance's binary formats 
>>>>>> for
>>>>>> octrees, ambient files, pictures, etc., we know when we've reached 
>>>>>> EOD
>>>>>> regardless because the file header tells us how much to expect.
>>>>>> However, when we're sending binary streams of floats to rcalc, 
>>>>>> which
>>>>>> is simply operating on them and counting on the OS to stop sending
>>>>>> data when it's out of data, we run into trouble if the OS doesn't 
>>>>>> tell
>>>>>> us exactly when the party is over.
>>>>>> I suppose a simple test would be something like:
>>>>>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>>>>>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>>>>>> 37*(37+1)/2==703).  We could try running the above on a Windows 
>>>>>> box
>>>>>> with a FAT or ExFAT filesystem to determine if this is a problem 
>>>>>> or
>>>>>> not.  We should probably try it with some large numbers as well, 
>>>>>> being
>>>>>> aware that we end on a 128-byte boundary when n is a multiple of 
>>>>>> 32.
>>>>>> We can also try it while writing with an intermediate file between
>>>>>> rcalc and total, to see if that makes any difference.
>>> 
>>> _______________________________________________
>>> Radiance-dev mailing list
>>> Radiance-dev at radiance-online.org
>>> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



From gregoryjward at gmail.com  Sun Mar 27 17:03:42 2016
From: gregoryjward at gmail.com (Gregory J. Ward)
Date: Sun, 27 Mar 2016 17:03:42 -0700
Subject: [Radiance-dev] Pipe problems on Windows - BUG in Universal CRT
In-Reply-To: <5f02d11719a84233d46ec430d023e951@tanha.pair.com>
References: <24d4200a1ea89ee01193132859fb4473@tanha.pair.com>
	<d9dbf03a0f5afcc86cd782a782875f27@tanha.pair.com>
	<092BC57B-4514-42DE-ADE9-DCE72195E308@gmail.com>
	<16a246fe0c6b436250f7cd05dec82307@tanha.pair.com>
	<ee7dbd80d8c1fc70a24cbf6d699cd053@tanha.pair.com>
	<5f02d11719a84233d46ec430d023e951@tanha.pair.com>
Message-ID: <28B2A37B-D36E-4030-9E28-D6476CC037AD@gmail.com>

Good that you tracked this down, but as you say, we still have the rumored issue with binary data we need to sort out.

Regarding Microsoft (by analogy):

	https://www.youtube.com/watch?v=CHgUN_95UAw

Power to the monopolies!

-Greg

> From: Georg Mischler <schorsch at schorsch.com>
> Subject: Re: [Radiance-dev] Pipe problems on Windows - BUG in Universal CRT
> Date: March 27, 2016 6:21:27 AM PDT
> 
> Keep talking to myself...
> 
> The MS feedback site has those entries
> https://connect.microsoft.com/VisualStudio/Feedback/Details/1902345
> https://connect.microsoft.com/VisualStudio/Feedback/Details/2419638
> both of which seem to describe incarnations of our problem.
> 
> In the first one, a MS person added a comment saying:
>  We have fixed this bug; the fix will be present in an upcoming
>  update to the Universal CRT.
> 
> So all hope is not lost.
> 
> -schorsch
> 
> 
> Am 2016-03-27 14:31, schrieb Georg Mischler:
>> I've sent feedback to Microsoft, we'll see what happens.
>> For anyone who wants to check the weirdness on their own:
>> sender.c
>> -----------------------------------------------------
>> #include <stdio.h>
>> #define MAX_TESTLINES 20000
>> int main(void)
>> {
>>  int i;
>>  for (i = 0; i < MAX_TESTLINES; i++) {
>>    fprintf_s(stdout, "x\n");
>>  }
>>  return 0;
>> }
>> -----------------------------------------------------
>> receiver.c
>> -----------------------------------------------------
>> #include <stdio.h>
>> #define MAX_BUF 10
>> int main(void)
>> {
>>  int i = 0;
>>  char inbuf[MAX_BUF];
>>  while (fgets((char*)&inbuf, MAX_BUF, stdin)) {
>>    if (inbuf[1] != '\n') {
>>      fprintf_s(stdout, "Line ending omitted from stream on line %d:
>> \"%s\"\n", i++, &inbuf);
>>    }
>>    i++;
>>  }
>>  return 0;
>> }
>> -----------------------------------------------------
>> Invoke the two programs in a console as:
>> $ sender | receiver
>> With bug present, the output will be something similar to:
>> Line ending omitted from stream on line 2730: "xx
>> "
>> Line ending omitted from stream on line 5461: "xx
>> "
>> Line ending omitted from stream on line 8192: "xx
>> "
>> Line ending omitted from stream on line 10923: "xx
>> "
>> Line ending omitted from stream on line 13654: "xx
>> "
>> Line ending omitted from stream on line 16385: "xx
>> "
>> Have fun!
>> -schorsch
>> Am 2016-03-27 10:38, schrieb Georg Mischler:
>>> Good thing I tested with fgetline() before starting to roll my own
>>> fgets(). The suspicion I had from stepping through fgets() was
>>> confirmed, and it's actually the underlying stream that's broken.
>>> Plugging our own buffering text stream might be theoretically
>>> possible, but is probably not worth the effort.
>>> So pending a fix from Microsoft, we need to consider Visual Studio
>>> 2015 in default settings as unsuitable for production use.
>>> Microsoft seems to be quite proud of having massively refactored their
>>> C/C++ runtime libraries for Windows 10 into what they call the
>>> "universal crt". And that new version of the CRT is now included in VS
>>> 2015.
>>> I'll try and see if (and how) I can link to an older CRT instead, but
>>> I'm not very optimistic there.
>>> The bug is slightly obscure. It only happens very intermittinlgy and
>>> at seemingly random intervals. You need to pass a largish number of
>>> very short text lines through a pipe to trigger it, and even then
>>> you may only notice the problem if you happen to count the lines.
>>> Sending a sequence of numerals simplifies that...
>>> Of course that's not really an excuse for a multi-billion-dollar
>>> corporation breaking one of the most basic building blocks of
>>> eventually all of their software products. I'm actually wondering if
>>> such a possibility to "manipulate" the contents of an interprocess
>>> data stream (eg. by changing the default buffer length) has any
>>> security implications.
>>> This drastically shows the value of having an extremely complete and
>>> thorough battery of test cases before you start with any major
>>> refactoring.
>>> -schorsch
>>> Am 2016-03-27 00:28, schrieb Gregory J. Ward:
>>>> I agree this is probably not the error we have seen before, though it
>>>> is an important one.  We might think about writing an fgets()
>>>> replacement for Windows, rather than using fgetline(), which has
>>>> slightly different semantics.  We should replace it at the library
>>>> level, so it will propagate to all potentially affected tools.  It's
>>>> hard to believe that such a simple, basic function call would be
>>>> broken in this way....
>>>> Good sleuthing, Schorsch!
>>>> -G
>>>>> From: Georg Mischler <schorsch at schorsch.com>
>>>>> Subject: Re: [Radiance-dev] Pipe problems on Windows
>>>>> Date: March 26, 2016 3:20:09 PM PDT
>>>>> It looks like we're dealing with a broken fgets() included
>>>>> with Visual Studio 2015 Community edition.
>>>>> When a newline character falls exactly to the end of the
>>>>> pipe buffer, it will be ignored. This means that instead of
>>>>> "\t1328\n" the received string will be "\t1328\t1329\n".
>>>>> Any time that happens, nrecs is only incremented once for
>>>>> two actual input values, which accounts for the lower nuber
>>>>> of output values in the end.
>>>>> Guess I'll have to try if our own fgetline() has better success.
>>>>> But again, this is probably not the "garbage date from binary
>>>>> pipe" problem that we were previously discussing. We should still
>>>>> look for test cases to identify that one.
>>>>> Cheers
>>>>> -schorsch
>>>>> Am 2016-03-25 15:35, schrieb Georg Mischler:
>>>>>> Moving this to a seperate thread.
>>>>>> The sequence below consistently gives me 703 on Vista, with the only
>>>>>> difference that the DOS box asks for double quotes.
>>>>>> But...
>>>>>> turning up n to values beyond 2000, the MSC binary of rcalc begins to
>>>>>> write(!) some bytes less(!) to stdout. Which obviously falsifies the
>>>>>> result of the chain.
>>>>>> Interesingly, the NREL binary doesn't do that.
>>>>>> Rob mentioned using gcc, so there seems to be a disagreement between
>>>>>> the two compilers as to the semantics of writing to stdout on program
>>>>>> termination.
>>>>>> Going to have some discussion with the debugger on this one.
>>>>>> I'd only be too happy if a simple flush() would solve the problem...
>>>>>> Ah, and first I should probably create a few test cases to cover this
>>>>>> kind of bug.
>>>>>> Cheers
>>>>>> -schorsch
>>>>>>>> I've searched for similar complaints online. In the few instances I've
>>>>>>>> found, it usually was because a terminating null byte wasn't written
>>>>>>>> to the receiving buffer for some reason. The purportedly received
>>>>>>>> garbage data was then simply the previous random contents of that
>>>>>>>> buffer. That may or may not be the cause here as well.
>>>>>>>> If there really was an inherent problem with using pipes on Windows,
>>>>>>>> then I'm sure I would have found a lot more information about it.
>>>>>>> Well, in our case, it's not about null bytes not being sent -- it's
>>>>>>> about knowing exactly when we've reached end-of-data, which we expect
>>>>>>> the system to tell us in some cases.  Radiance's binary formats for
>>>>>>> octrees, ambient files, pictures, etc., we know when we've reached EOD
>>>>>>> regardless because the file header tells us how much to expect.
>>>>>>> However, when we're sending binary streams of floats to rcalc, which
>>>>>>> is simply operating on them and counting on the OS to stop sending
>>>>>>> data when it's out of data, we run into trouble if the OS doesn't tell
>>>>>>> us exactly when the party is over.
>>>>>>> I suppose a simple test would be something like:
>>>>>>> 	cnt 37 | rcalc -of -e '$1=recno' | total -if
>>>>>>> This should give us a value of 703, or n*(n+1)/2 for any n (i.e.,
>>>>>>> 37*(37+1)/2==703).  We could try running the above on a Windows box
>>>>>>> with a FAT or ExFAT filesystem to determine if this is a problem or
>>>>>>> not.  We should probably try it with some large numbers as well, being
>>>>>>> aware that we end on a 128-byte boundary when n is a multiple of 32.
>>>>>>> We can also try it while writing with an intermediate file between
>>>>>>> rcalc and total, to see if that makes any difference.


From schorsch at schorsch.com  Mon Mar 28 13:31:01 2016
From: schorsch at schorsch.com (Georg Mischler)
Date: Mon, 28 Mar 2016 22:31:01 +0200
Subject: [Radiance-dev] Test suite design
In-Reply-To: <e24520ba218abdfb56db96f036ad71ba@tanha.pair.com>
References: <fdde7f2e81ed2df4d4c75bd779989535@tanha.pair.com>
	<D30F2AF7.23BCF%Robert.Guglielmetti@nrel.gov>
	<e24520ba218abdfb56db96f036ad71ba@tanha.pair.com>
Message-ID: <b30e43cfbe4bb737347541aeb72bd260@tanha.pair.com>

I've checked a refactored version of the Python test framework
into CVS today. As with the other proposed scripts, it now works
with both Python 2.7 and Python 3.x, and the only dependencies
are Python and Radiance. SCons simply invokes it, as can any
other tool, or the user directly.

The file ray/test/run_tests.py is now both a script and a module,
with identical functionality. The caller can pass in the Radiance
binary and library paths (if they're not already covered by PATH
and RAYPATH). If given, they are added to the local environment,
which then gets passed along to the test cases.

It will run all the test cases it discovers in the subdirectories
of ray/test/testcases/. Alternatively, one or several sections can
be tested seperately. More details are in README.txt and the
module docstrings.

The support modules have moved to lib/pyradlib/, with lib/ being
the standard Radiance library (similar to lib/tcl/ for trad).
Run_tests.py will find that directoy and add its parent to the
Python search path. A test case can import them as:

   from pyradlib import lcompare
   from pyradlib.pyrad_proc import Error, PIPE, ProcMixin

As can be seen from the latter, I've switched the existing test
cases to useing the same process management module as the scripts,
instead of os.system().

This same library can also be used by any other Python scripts,
although each of those will be on its own in actually finding its
location.

To avoid having to search all the relevant directories in each
test case again, the test runner temporarily injects an ad-hoc
module into sys.modules. Test cases can "import testsupport",
which will give them direct access to all the paths detected by
the runner. The information provided by that module can of course
be extended with whatever seems useful.


I think this is the easiest way to go forward with our testing
efforts.

I had a look at the CTest stuff, and it seems like it would only
run on Robs machine, because it contains hardcoded paths to some
local directories. That could be fixed, of course, but the
dependency to a much less common third-party tool would still
remain.

So what so you (or your build tool) need to do to use this?

1. Make sure the contents of ray/src/common/pyradlib/ are copied
    to lib/pyradlib/
    (either in the build tree or in the final installation).

2. Invoke ray/test/run_tests.py with suitable parameters.

3. Sit back and smile :)


Of course, there's still a lot to improve, or more flexibility
to add. I'm open to suggestions!


Cheers
-schorsch


Am 2016-03-17 15:10, schrieb Georg Mischler:
> The criteria I would apply are:
> 
> - Which framework is easiest to install for end users?
>   Or maybe better: Which is most likely to be already installed on the
>   system of the average Radiance user, even when not part of the
>   currently running build system?
>   * On unix
>   * on Mac (as far as different from other unixes)
>   * on Windows
> 
> - Which is easiest to maintain and to add test cases?
>   More specificly: Which has the shortest learning curve for the
>   average Radiance user before they can contribute tests?
> 
> - And last but not least, which has all the capabilities we need?
>   * Run a program with various arguments and input, and compare its
>     output against a prepared set of expected data.
>   * Eventually: Load a shared library and run similar tests on
>     individual functions (not easily possible with the current state
>     of librtrad, those pesky global variables once again).
> 
> -schorsch
> 
> 
> Am 2016-03-16 22:28, schrieb Guglielmetti, Robert:
>> On 3/16/16, 3:02 PM, "Georg Mischler" <schorsch at schorsch.com> wrote:
>>> 
>>> That sounds like a lot of duplicate work...
>>> 
>>> Wouldn't it make more sense to maintain just one test suite, and
>>> have either build system just invoke that?
>> 
>> 
>> Definitely a lot of duplicate work, you're right. I was thinking maybe 
>> a
>> little too specifically about a particular testing framework (CTest in 
>> my
>> case).
>> 
>> 
>> _______________________________________________
>> Radiance-dev mailing list
>> Radiance-dev at radiance-online.org
>> http://www.radiance-online.org/mailman/listinfo/radiance-dev

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/



