From radiance-general@radiance-online.org  Tue Oct  2 23:10:48 2001
From: radiance-general@radiance-online.org (Jan Hollan)
Date: Wed, 3 Oct 2001 00:10:48 +0200 (CEST)
Subject: [Radiance-general] example of a street
Message-ID: <Pine.LNX.4.21.0110022337450.28390-100000@amper.ped.muni.cz>

I began to learn Radiance today in order to be able to compute simple
outdoor-lighting scenes, but did not succeed much with this powerful
engine. 

Please, could anybody give me an example of an input to give to rad? I
mean, e.g, a row of ten luminaires with a given ies photometric data
(<name>.ies or <name>.dat and <name>.rad, I've them for some producers)
and 7 klm bulbs, 10 m above the asphalt road (7 m wide), 3 m from its
axis, 50 m apart.

Moreover, I need not only a view, but average luminance of the road and
``uniformity ratios'' as well, from the view of a driver (1 m above the
road, 1 m from its axis). (I see, Chapter 7 of Rendering with Radiance
would say it, but it is not on-line and I've not the printed copy.)

dark and peaceful skies,
Jenik Hollan

PS.
 As an advocate of prevention of light pollution
(http://www.astro.cz/darksky is a hint, most my texts are just in Czech
however), I need to be able to compute the same things as lighting
professionals, but with a free software, of course.


From radiance-general@radiance-online.org  Tue Oct  2 23:44:18 2001
From: radiance-general@radiance-online.org (Georg Mischler)
Date: Tue, 2 Oct 2001 18:44:18 -0400 (EDT)
Subject: [Radiance-general] example of a street
In-Reply-To: <Pine.LNX.4.21.0110022337450.28390-100000@amper.ped.muni.cz>
Message-ID: <Pine.BSF.4.30.0110021823010.64164-100000@emancholl.pair.com>

Jan Hollan wrote:

> I began to learn Radiance today in order to be able to compute simple
> outdoor-lighting scenes, but did not succeed much with this powerful
> engine.
>
> Please, could anybody give me an example of an input to give to rad? I
> mean, e.g, a row of ten luminaires with a given ies photometric data
> (<name>.ies or <name>.dat and <name>.rad, I've them for some producers)
> and 7 klm bulbs, 10 m above the asphalt road (7 m wide), 3 m from its
> axis, 50 m apart.
>
> Moreover, I need not only a view, but average luminance of the road and
> ``uniformity ratios'' as well, from the view of a driver (1 m above the
> road, 1 m from its axis). (I see, Chapter 7 of Rendering with Radiance
> would say it, but it is not on-line and I've not the printed copy.)
>
> dark and peaceful skies,
> Jenik Hollan
>
> PS.
>  As an advocate of prevention of light pollution
> (http://www.astro.cz/darksky is a hint, most my texts are just in Czech
> however), I need to be able to compute the same things as lighting
> professionals, but with a free software, of course.


There are many definitions of free software.

If your concern is just to avoid the costs, and if your work is
about research and education, then you could get an educational
license of Rayfront, which would make the answer to most of the
above questions much simpler. You would still need some CAD
software to build your geometry model, but there are low cost
solutions to that as well. You can then calculate the required
average values and other ratios with a spreadsheat from the
numerical output. Contact me directly if you're interested.

Other than that, really answering your questions would require
a repetition of almost all of "the book" (or one of the manuals
for Radiance). There are no simple recipes for this kind of tasks
if you only have the bare Radiance engine at your hands. Radiance
is an open toolkit, whch requires you to supply some of the logic
by yourself, unless you are using a more abstract toolkit.

Your question is a bit of the "tell me everything" type.
You will have to study the documentation in any case, even if
you use one of the user interfaces available. And I really
recommend to get a copy of the book, just for the understanding
of what you're dealing with.

Maybe this is not the answer you hoped for...


Regards

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch.com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/


From radiance-general@radiance-online.org  Sun Oct  7 05:02:23 2001
From: radiance-general@radiance-online.org (Ron O. Dror)
Date: Sun, 7 Oct 2001 00:02:23 -0400 (EDT)
Subject: [Radiance-general] rtrace
In-Reply-To: <200110031000.f93A03u20310@darkside-animation.com>
Message-ID: <Pine.LNX.4.21.0110062354550.30428-100000@cdr03.ai.mit.edu>

I would like to recover the surface normals of the surfaces visible in
every pixel of a Radiance scene.  In other words, I want to trace the
initial ray cast for each pixel, and find the surface normal of the first
surface that ray hits.  I figured out that I could do this using rtrace
-on, if I feed rtrace the rays corresponding to each pixel in my
image.  Is there an easy way to compute all of these rays automatically
using an existing Radiance program, or will I need to write a special .cal
file for rcalc?  I have the feeling that some Radiance gurus could
accomplish this task in one or two lines.

Thanks in advance for any advice,

Ron

PhD student, MIT AI Lab
http://www.ai.mit.edu/people/rondror/



From radiance-general@radiance-online.org  Thu Oct 11 03:47:53 2001
From: radiance-general@radiance-online.org (Georg Mischler)
Date: Wed, 10 Oct 2001 22:47:53 -0400 (EDT)
Subject: [Radiance-general] rtrace
In-Reply-To: <Pine.LNX.4.21.0110062354550.30428-100000@cdr03.ai.mit.edu>
Message-ID: <Pine.BSF.4.30.0110102244180.46532-100000@emancholl.pair.com>

Ron O. Dror wrote:

> I would like to recover the surface normals of the surfaces visible in
> every pixel of a Radiance scene.  In other words, I want to trace the
> initial ray cast for each pixel, and find the surface normal of the first
> surface that ray hits.  I figured out that I could do this using rtrace
> -on, if I feed rtrace the rays corresponding to each pixel in my
> image.  Is there an easy way to compute all of these rays automatically
> using an existing Radiance program, or will I need to write a special .cal
> file for rcalc?  I have the feeling that some Radiance gurus could
> accomplish this task in one or two lines.
>
> Thanks in advance for any advice,
>
> Ron


Hi Ron,

I don't think there's a genuinely simple way to do what you want.
You have already figured out the "rtrace -on" part, which looks
like a good second step. But the first step would indeed be to
feed all those rays to rtrace, and I don't see an automatic way
to get that information from any Radiance program.

On the other hand, it's not very hard to construct that set
of vectors with a little program of your own for a standard
perspective. Two or three dozen lines of code will do the trick.
You don't even need to understand the actual view transformation.
Just walk through a regular grid on your image plane, subtract
the view point from each of those grid points, and write the
result into a file. There's no need to normalize the vectors to
unit lenght.

I'm not sure if this could be done with cnt/rcalc, and frieds,
as I have rarely used them myself. I suspect that a more complete
programming language (eg. Python) will be more effective to work with.


Have fun!

-schorsch

-- 
Georg Mischler  --  simulations developer  --  schorsch at schorsch.com
+schorsch.com+  --  lighting design tools  --  http://www.schorsch.com/


From radiance-general@radiance-online.org  Fri Oct 12 17:27:00 2001
From: radiance-general@radiance-online.org (Greg Ward)
Date: Fri, 12 Oct 2001 09:27:00 -0700
Subject: [Radiance-general] Re: Radiance-general digest, Vol 1 #22 - 2 msgs
References: <200110121000.f9CA07k01887@darkside-animation.com>
Message-ID: <3BC719D3.60CB12E7@lmi.net>

This is a multi-part message in MIME format.
--------------F2F6EFC25830270349AF3F12
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Ron wrote:

I would like to recover the surface normals of the surfaces visible in
every pixel of a Radiance scene.  In other words, I want to trace the
initial ray cast for each pixel, and find the surface normal of the first
surface that ray hits.  I figured out that I could do this using rtrace
-on, if I feed rtrace the rays corresponding to each pixel in my
image.  Is there an easy way to compute all of these rays automatically
using an existing Radiance program, or will I need to write a special .cal
file for rcalc?  I have the feeling that some Radiance gurus could
accomplish this task in one or two lines.

------------
There are two solutions to this problem.  As you say, it is a very handy
thing to be able to do, so I wrote a C program to do just that.  It is
part of the Unix distribution I've been working on and plan to release
as soon as I figure out how.  In the meantime, I am attaching the C file
and manual page to this message, which are fairly short.  The nice thing
about this solution is that it will work with any Radiance view type,
and will generate the exact rays corresponding to the center of each
pixel.  (If you want an absolute guarantee that these correspond to
the pixels sampled with rpict, you will need to set the -pj 0 option
in your rendering.)

The second solution is to apply the following .cal script with rcalc,
which works only for perspective views, found in ray/lib/lib:

{
	proj.cal - calculate image projection vector
}
				{ View Point }
VPx = 0; VPy = 0; VPz = 0;
				{ View Up }
VUx = 0; VUy = 0; VUz = 1;
				{ View Direction }
VDx = 0; VDy = 1; VDz = 0;
				{ View Horizontal and Vertical angles }
VH = 45; VV = 45;
				{ X and Y resolution }
X = 512; Y = 512;
				{ Projected Direction (computed) }
PDx = NVDx + h*IHx + v*IVx;
PDy = NVDy + h*IHy + v*IVy;
PDz = NVDz + h*IHz + v*IVz;
h = x - (X-1)/2; v = y - (Y-1)/2;
				{ Normalized View Direction }
NVDx = VDx/VDl; NVDy = VDy/VDl; NVDz = VDz/VDl;
VDl = sqrt(VDx*VDx + VDy*VDy + VDz*VDz);
				{ Increment Horizontal }
IHx = IHF*NTIHx; IHy = IHF*NTIHy; IHz = IHF*NTIHz;
NTIHx = TIHx/TIHl; NTIHy = TIHy/TIHl; NTIHz = TIHz/TIHl;
TIHx = VDy*VUz-VDz*VUy; TIHy = VDz*VUx-VDx*VUz; TIHz = VDx*VUy-VDy*VUx;
TIHl = sqrt(TIHx*TIHx + TIHy*TIHy + TIHz*TIHz);
IHF = 2*tan(PI/180/2*VH)/X;
				{ Increment Vertical }
IVx = IVF*(NTIHy*NVDz-NTIHz*NVDy);
IVy = IVF*(NTIHz*NVDx-NTIHx*NVDz);
IVz = IVF*(NTIHx*NVDy-NTIHy*NVDx);
IVF = 2*tan(PI/180/2*VV)/Y;

PI = 3.14159265358979323846

--------------
The horizontal and vertical increment vectors get added to a unit
direction vector to get the final view direction computed in PDx,
PDy, and PDz.  The view point (origin) remains the same for a
perspective view.  An example application of the above file with
a specific view origin, direction, and angle might be:

cnt 512 512 | rcalc -f proj.cal -e 'VPx=15.3;VPy=10.1;VPz=-3.3;' \
	-e 'VDx=.394;VDy=-.731;VDz=-.053;' \
	-e 'VH=30;VV=30;' -e '$1=VPx;$2=VPy;$3=VPz;' \
	-e '$4=PDx;$5=PDy;$6=PDz;' | rtrace [rtrace options]

Hope this helps.
-Greg
--------------F2F6EFC25830270349AF3F12
Content-Type: text/plain; charset=us-ascii; x-mac-type="54455854"; x-mac-creator="522A6368";
 name="vwrays.1"
Content-Transfer-Encoding: 7bit
Content-Description: Unknown Document
Content-Disposition: inline;
 filename="vwrays.1"

.\" SCCSid "@(#)vwrays.1 3.5 1/15/99 SGI"
.TH VWRAYS 1 1/15/99 RADIANCE
.SH NAME
vwrays - compute rays for a given picture or view
.SH SYNOPSIS
.B vwrays
.B "[ -i -f{a|f|d} | -d ]"
{
.B "view opts .."
|
.B picture
.B [zbuf]
}
.SH DESCRIPTION
.I Vwrays
takes a picture or view specification and computes the ray origin and
direction corresponding to each pixel in the image.
This information may then be passed to
.I rtrace(1)
to perform other calculations.
If a given pixel has no corresponding ray (because it is outside the
legal view boundaries), then six zero values are sent instead.
.PP
The
.I -i
option may be used to specify desired pixel positions on the standard
input rather than generating all the pixels for a given view.
.PP
The
.I -f
option may be used to set the record format to something other than the
default ASCII.
Using raw float or double records for example can reduce the time
requirements of transferring and interpreting information in
.I rtrace.
.PP
View options may be any combination of standard view parameters described
in the
.I rpict(1)
manual page, including input from a view file with the
.I \-vf
option.
Additionally, the target X and Y dimensions may be specified with
.I -x
and
.I -y
options, and the pixel aspect ratio may be given with
.I -p.
The default dimensions are 512x512, with a pixel aspect ratio of 1.0.
Just as in
.I rpict,
the X or the Y dimension will be reduced if necessary
to best match the specified pixel
aspect ratio, unless this ratio is set to zero.
.PP
If the
.I -d
option is given, then
.I vwrays
just prints the computed image dimensions, which are based on the view
aspect and the pixel aspect ratio just described.
The
.I -ld
switch will also be printed, with
.I -ld+
if the view file has an aft clipping plane, and
.I -ld-
otherwise.
This is useful for passing options to the
.I rtrace
command line.
(See below.)
.PP
If the view contains an aft clipping plane
.I (-va
option), then the magnitudes of the ray directions will
equal the maximum distance for each pixel, which will be interpreted
correctly by
.I rtrace
with the
.I -ld+
option.
Note that this option should not be given unless there is an aft
clipping plane, since the ray direction vectors will be normalized
otherwise, which would produce a uniform clipping distance of 1.
.PP
If a picture is given on the command line rather than a set of view options,
then the view and image dimensions are taken from the picture file, and
the reported ray origins and directions will exactly match the center of each
pixel in the picture.
.PP
If a depth buffer file is given as well, then
.I vwrays
computes the intersection point of each pixel ray (equal to the ray origin
plus the depth times the ray direction), and reports this instead of the
ray origin.
The reported ray direction will also be reversed.
The interpretation of this data is an image of origins and directions
for light rays leaving the scene surfaces to strike each pixel.
.SH EXAMPLES
To compute the ray intersection points and returned directions corresponding
to a picture and its depth buffer:
.IP "" .2i
vwrays scene_v2.pic scene_v2.zbf > scene_v2.pts
.PP
To determine what the dimensions of a given view would be:
.IP "" .2i
vwrays -d -vf myview.vf -x 2048 -y 2048
.PP
To generate a RADIANCE picture using
.I rtrace
instead of
.I rpict:
.IP "" .2i
vwrays -ff -vf view1.vf -x 1024 -y 1024 |
rtrace `vwrays -d -vf view1.vf -x 1024 -y 1024` -ffc scene.oct > view1.pic
.SH AUTHOR
Greg Ward Larson
.SH ACKNOWLEDGMENT
This work was supported by Silicon Graphics, Inc.
.SH BUGS
Although
.I vwrays
can reproduce any pixel ordering (i.e., any image orientation) when given
a rendered picture, it will only produce standard scanline-ordered rays when 
given a set of view parameters.
.SH "SEE ALSO"
rcalc(1), rpict(1), rtrace(1)

--------------F2F6EFC25830270349AF3F12
Content-Type: text/plain; charset=us-ascii; x-mac-type="54455854"; x-mac-creator="522A6368";
 name="vwrays.c"
Content-Transfer-Encoding: 7bit
Content-Description: Unknown Document
Content-Disposition: inline;
 filename="vwrays.c"

/* Copyright (c) 1997 Silicon Graphics, Inc. */

#ifndef lint
static char SCCSid[] = "@(#)vwrays.c 3.3 10/17/97 SGI";
#endif

/*
 * Compute rays corresponding to a given picture or view.
 */


#include "standard.h"

#include "view.h"

#include "resolu.h"

extern int	putf(), putd(), puta();

int	(*putr)() = puta;

VIEW	vw = STDVIEW;

RESOLU	rs = {PIXSTANDARD, 512, 512};

double	pa = 1.;

int	zfd = -1;

int	fromstdin = 0;

char	*progname;


main(argc, argv)
int	argc;
char	*argv[];
{
	char	*err;
	int	rval, getdim = 0;
	register int	i;

	progname = argv[0];
	if (argc < 2)
		goto userr;
	for (i = 1; i < argc && argv[i][0] == '-'; i++)
		switch (argv[i][1]) {
		case 'f':			/* output format */
			switch (argv[i][2]) {
			case 'a':			/* ASCII */
				putr = puta;
				break;
			case 'f':			/* float */
				putr = putf;
				break;
			case 'd':			/* double */
				putr = putd;
				break;
			default:
				goto userr;
			}
			break;
		case 'v':			/* view file or option */
			if (argv[i][2] == 'f') {
				rval = viewfile(argv[++i], &vw, NULL);
				if (rval <= 0) {
					fprintf(stderr,
						"%s: no view in file\n",
							argv[i]);
					exit(1);
				}
				break;
			}
			rval = getviewopt(&vw, argc-i, argv+i);
			if (rval < 0)
				goto userr;
			i += rval;
			break;
		case 'd':			/* report dimensions only */
			getdim++;
			break;
		case 'x':			/* x resolution */
			rs.xr = atoi(argv[++i]);
			if (rs.xr <= 0) {
				fprintf(stderr, "%s: bad x resolution\n",
						progname);
				exit(1);
			}
			break;
		case 'y':			/* y resolution */
			rs.yr = atoi(argv[++i]);
			if (rs.yr <= 0) {
				fprintf(stderr, "%s: bad y resolution\n",
						progname);
				exit(1);
			}
			break;
		case 'p':			/* pixel aspect ratio */
			pa = atof(argv[++i]);
			break;
		case 'i':			/* get pixels from stdin */
			fromstdin = 1;
			break;
		default:
			goto userr;
		}
	if (i > argc | i+2 < argc)
		goto userr;
	if (i < argc) {
		rval = viewfile(argv[i], &vw, &rs);
		if (rval <= 0) {
			fprintf(stderr, "%s: no view in picture\n", argv[i]);
			exit(1);
		}
		if (i+1 < argc) {
			zfd = open(argv[i+1], O_RDONLY);
			if (zfd < 0) {
				fprintf(stderr,
					"%s: cannot open depth buffer\n",
						argv[i+1]);
				exit(1);
			}
		}
	}
	if ((err = setview(&vw)) != NULL) {
		fprintf(stderr, "%s: %s\n", progname, err);
		exit(1);
	}
	if (i == argc)
		normaspect(viewaspect(&vw), &pa, &rs.xr, &rs.yr);
	if (getdim) {
		printf("-x %d -y %d -ld%c\n", rs.xr, rs.yr,
				vw.vaft > FTINY ? '+' : '-');
		exit(0);
	}
	if (fromstdin)
		pix2rays(stdin);
	else
		putrays();
	exit(0);
userr:
	fprintf(stderr,
	"Usage: %s [ -i -f{a|f|d} | -d ] { view opts .. | picture [zbuf] }\n",
			progname);
	exit(1);
}


pix2rays(FILE *fp)
{
	static FVECT	rorg, rdir;
	float	zval;
	double	px, py;
	int	pp[2];
	double	d;
	register int	i;

	while (fscanf(fp, "%lf %lf", &px, &py) == 2) {
		if (px < 0 || px >= rs.xr ||
				py < 0 || py >= rs.yr) {
			fprintf(stderr,
				"%s: (x,y) pair (%.0f,%.0f) out of range\n",
					px, py);
			exit(1);
		}
		if (zfd >= 0) {
			loc2pix(pp, &rs, px/rs.xr, py/rs.yr);
			if (lseek(zfd,
				(pp[1]*scanlen(&rs)+pp[0])*sizeof(float), 0)
					< 0 ||
					read(zfd, &zval, sizeof(float))
					< sizeof(float)) {
				fprintf(stderr, "%s: depth buffer read error\n",
						progname);
				exit(1);
			}
		}
		d = viewray(rorg, rdir, &vw, px/rs.xr, py/rs.yr);
		if (d < -FTINY)
			rorg[0] = rorg[1] = rorg[2] =
			rdir[0] = rdir[1] = rdir[2] = 0.;
		else if (zfd >= 0)
			for (i = 0; i < 3; i++) {
				rorg[i] += rdir[i]*zval;
				rdir[i] = -rdir[i];
			}
		else if (d > FTINY) {
			rdir[0] *= d; rdir[1] *= d; rdir[2] *= d;
		}
		(*putr)(rorg, rdir);
	}
	if (!feof(fp)) {
		fprintf(stderr, "%s: expected px py on input\n", progname);
		exit(1);
	}
}


putrays()
{
	static FLOAT	loc[2];
	static FVECT	rorg, rdir;
	float	*zbuf;
	int	sc;
	double	d;
	register int	si, i;

	if (zfd >= 0) {
		zbuf = (float *)malloc(scanlen(&rs)*sizeof(float));
		if (zbuf == NULL) {
			fprintf(stderr, "%s: not enough memory\n", progname);
			exit(1);
		}
	}
	for (sc = 0; sc < numscans(&rs); sc++) {
		if (zfd >= 0) {
			if (read(zfd, zbuf, scanlen(&rs)*sizeof(float)) <
					scanlen(&rs)*sizeof(float)) {
				fprintf(stderr, "%s: depth buffer read error\n",
						progname);
				exit(1);
			}
		}
		for (si = 0; si < scanlen(&rs); si++) {
			pix2loc(loc, &rs, si, sc);
			d = viewray(rorg, rdir, &vw, loc[0], loc[1]);
			if (d < -FTINY)
				rorg[0] = rorg[1] = rorg[2] =
				rdir[0] = rdir[1] = rdir[2] = 0.;
			else if (zfd >= 0)
				for (i = 0; i < 3; i++) {
					rorg[i] += rdir[i]*zbuf[si];
					rdir[i] = -rdir[i];
				}
			else if (d > FTINY) {
				rdir[0] *= d; rdir[1] *= d; rdir[2] *= d;
			}
			(*putr)(rorg, rdir);
		}
	}
	if (zfd >= 0)
		free((char *)zbuf);
}


puta(ro, rd)		/* put out ray in ASCII format */
FVECT	ro, rd;
{
	printf("%.5e %.5e %.5e %.5e %.5e %.5e\n",
			ro[0], ro[1], ro[2],
			rd[0], rd[1], rd[2]);
}


putf(ro, rd)		/* put out ray in float format */
FVECT	ro, rd;
{
	float v[6];

	v[0] = ro[0]; v[1] = ro[1]; v[2] = ro[2];
	v[3] = rd[0]; v[4] = rd[1]; v[5] = rd[2];
	fwrite(v, sizeof(float), 6, stdout);
}


putd(ro, rd)		/* put out ray in double format */
FVECT	ro, rd;
{
	double v[6];

	v[0] = ro[0]; v[1] = ro[1]; v[2] = ro[2];
	v[3] = rd[0]; v[4] = rd[1]; v[5] = rd[2];
	fwrite(v, sizeof(double), 6, stdout);
}

--------------F2F6EFC25830270349AF3F12--


From radiance-general@radiance-online.org  Fri Oct 12 22:53:01 2001
From: radiance-general@radiance-online.org (Peter Apian-Bennewitz)
Date: Fri, 12 Oct 2001 23:53:01 +0200
Subject: [Radiance-general] radsite up again, radiance-online dito
Message-ID: <3BC7663D.3ADB148A@pab-opto.de>


-------- Original Message --------
Subject: radsite is up again
Date: Fri, 05 Oct 2001 12:03:48 -0700
From: Greg Ward <gward@lmi.net>
Reply-To: gward@lmi.net
To: Peter Apian-Bennewitz <apian@pab-opto.de>
References: <3B840721.47A6B036@pab-opto.de> <3B84093E.61ED4C36@lmi.net>
<3BA7110C.7E9C2686@pab-opto.de> <3BA779F7.3FA34832@lmi.net>
<3BA84486.61C4E4C7@pab-opto.de>

Hi Peter,

Danny got the Radiance website up again, after a month or so downtime to
rebuild the system after a break-in.  Do you want to post something
about it on the distribution list?

-Greg

-------------------------------
NB:  radiance-online.org  had been absent for some days as well,
since our provider had some technical problems. sorry for that,
looks like we're up and running fairly stable now. No emails were
lost, as far as I checked.

-Peter

From radiance-general@radiance-online.org  Fri Oct 19 01:58:20 2001
From: radiance-general@radiance-online.org (ben masters)
Date: Fri, 19 Oct 2001 13:58:20 +1300
Subject: [Radiance-general] calculating transmissivity from transmittance
Message-ID: <F129a4XMbIMTeUETgn6000096b3@hotmail.com>

<html><div style='background-color:'><DIV>&nbsp;I am trying to calculate glazing transmssivity for window glass with a measured transmittance of 0.44. I have tried to use the&nbsp;formula on the rayfront website <A href="http://www.schorsch.com/rayfront/manual/dielectricdef.html">http://www.schorsch.com/rayfront/manual/dielectricdef.html</A>&nbsp;but keep on getting a strange answer 0f -320. Does anyone know if this formula is correct or how to calculate transmissivity? </DIV>
<DIV>Cheers</DIV>
<DIV>Ben Masters</DIV></div><br clear=all><hr>Get your FREE download of MSN Explorer at <a href='http://go.msn.com/bql/hmtag_itl_EN.asp'>http://explorer.msn.com</a><br></html>

From radiance-general@radiance-online.org  Fri Oct 19 08:37:36 2001
From: radiance-general@radiance-online.org (Jan Wienold)
Date: Fri, 19 Oct 2001 09:37:36 +0200
Subject: [Radiance-general] calculating transmissivity from transmittance
References: <F129a4XMbIMTeUETgn6000096b3@hotmail.com>
Message-ID: <3BCFD840.6DE17669@ise.fhg.de>

--------------3F8ECB9E598C62B5B7960D1E
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Dear Ben,

the formular equals the formular in the tutorial and is correct. (We use
it since years and you can also check it with virtual tranmittance
measurements.)

The transmissivity value  should be .479807.

Jan

ben masters wrote:

>  I am trying to calculate glazing transmssivity for window glass with
> a measured transmittance of 0.44. I have tried to use the formula on
> the rayfront website
> http://www.schorsch.com/rayfront/manual/dielectricdef.html but keep on
> getting a strange answer 0f -320. Does anyone know if this formula is
> correct or how to calculate transmissivity?CheersBen Masters
>
>
> -----------------------------------------------------------------------
> Get your FREE download of MSN Explorer at http://explorer.msn.com
> _______________________________________________ Radiance-general
> mailing list Radiance-general@radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-general

--
-------------------------------------------------------------------
   o -           NEW ADRESS!!!
  | \            Jan Wienold
                 Fraunhofer Institute for Solar Energy Systems
                 SOLAR BUILDING DESIGN GROUP - DAYLIGHTING
                 Heidenhofstr. 2
                 79110 Freiburg
                 GERMANY

                 Phone: ++49 - (0) 761 - 4588 -5- 133
                 Fax:   ++49 - (0) 761 - 4588 -9- 133
                 Email: jan.wienold@ise.fhg.de

                 Internet:
                 http://www.ise.fhg.de



--------------3F8ECB9E598C62B5B7960D1E
Content-Type: text/html; charset=us-ascii
Content-Transfer-Encoding: 7bit

<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
Dear Ben,
<p>the formular equals the formular in the tutorial and is correct. (We
use it since years and you can also check it with virtual tranmittance
measurements.)
<p>The transmissivity value&nbsp; should be .479807.
<p>Jan
<p>ben masters wrote:
<blockquote TYPE=CITE>
<div style='background-color:'>&nbsp;I am trying to calculate glazing transmssivity
for window glass with a measured transmittance of 0.44. I have tried to
use the formula on the rayfront website <a href="http://www.schorsch.com/rayfront/manual/dielectricdef.html">http://www.schorsch.com/rayfront/manual/dielectricdef.html</a>
but keep on getting a strange answer 0f -320. Does anyone know if this
formula is correct or how to calculate transmissivity?CheersBen Masters</div>

<p><br>
<hr>Get your FREE download of MSN Explorer at <a href="http://go.msn.com/bql/hmtag_itl_EN.asp">http://explorer.msn.com</a>
<br>_______________________________________________ Radiance-general mailing
list Radiance-general@radiance-online.org <A HREF="http://www.radiance-online.org/mailman/listinfo/radiance-general">http://www.radiance-online.org/mailman/listinfo/radiance-general</A></blockquote>

<pre>--&nbsp;
-------------------------------------------------------------------
&nbsp;&nbsp; o -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NEW ADRESS!!!
&nbsp; | \&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Jan Wienold
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fraunhofer Institute for Solar Energy Systems
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SOLAR BUILDING DESIGN GROUP - DAYLIGHTING
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Heidenhofstr. 2&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 79110 Freiburg
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GERMANY
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Phone: ++49 - (0) 761 - 4588 -5- 133
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fax:&nbsp;&nbsp; ++49 - (0) 761 - 4588 -9- 133
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Email: jan.wienold@ise.fhg.de
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Internet:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A HREF="http://www.ise.fhg.de">http://www.ise.fhg.de</A></pre>
&nbsp;</html>

--------------3F8ECB9E598C62B5B7960D1E--


From radiance-general@radiance-online.org  Fri Oct 19 14:31:35 2001
From: radiance-general@radiance-online.org (Joachim Klinner)
Date: Fri, 19 Oct 2001 15:31:35 +0200
Subject: [Radiance-general] clib
Message-ID: <3BD02B37.7A8D523@mail.fo.fh-koeln.de>

Dear Radiance-users,

I've got some trouble with compiling Radiance 3.1 under Linux
(gcc-2.95.2-149, Distrib.: Suse 7.1). I couldn't find a note in the
manual or readme about
the clib which works. Does anyone knows it . Thanks and Regards.

Joachim Klinner

*****************************************************************
Institut of Light and Building Technique at the University of Applied
Sciences Cologne
Joachim Klinner <joachimk@mail.fo.fh-koeln.de>
Lustheide 85, D-51427 Bergisch Gladbach
phone: 0049-2204-3014-13
fax:      0049-2204-3014-58
www.ilb.fh-koeln.de
******************************************************************


From radiance-general@radiance-online.org  Sat Oct 20 21:26:30 2001
From: radiance-general@radiance-online.org (Robert Graham)
Date: Sat, 20 Oct 2001 15:26:30 -0500
Subject: [Radiance-general] clib
References: <3BD02B37.7A8D523@mail.fo.fh-koeln.de>
Message-ID: <002101c159a5$83c0a180$827b389c@rgraham>

Make sure you've gotten the 3r1p20 files from the ftp/pub.  They seem to
work, though it appears to be missing the image manipulation executables.

Robert Graham

----- Original Message -----
From: "Joachim Klinner" <joachimk@server2.fo.fh-koeln.de>
To: <radiance-general@radiance-online.org>
Sent: Friday, October 19, 2001 8:31 AM
Subject: [Radiance-general] clib


> Dear Radiance-users,
>
> I've got some trouble with compiling Radiance 3.1 under Linux
> (gcc-2.95.2-149, Distrib.: Suse 7.1). I couldn't find a note in the
> manual or readme about
> the clib which works. Does anyone knows it . Thanks and Regards.
>
> Joachim Klinner
>
> *****************************************************************
> Institut of Light and Building Technique at the University of Applied
> Sciences Cologne
> Joachim Klinner <joachimk@mail.fo.fh-koeln.de>
> Lustheide 85, D-51427 Bergisch Gladbach
> phone: 0049-2204-3014-13
> fax:      0049-2204-3014-58
> www.ilb.fh-koeln.de
> ******************************************************************
>
> _______________________________________________
> Radiance-general mailing list
> Radiance-general@radiance-online.org
> http://www.radiance-online.org/mailman/listinfo/radiance-general
>
>


